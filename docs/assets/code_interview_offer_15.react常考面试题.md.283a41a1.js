import{_ as p,a as r}from"./chunks/Contributors.vue_vue_type_script_setup_true_lang.2d10c1d4.js";import{_ as t}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.63457685.js";import{_ as c,o,c as i,D as s,x as n,a as C,Q as b}from"./chunks/framework.c7127555.js";import"./chunks/commonjsHelpers.725317a4.js";const w=JSON.parse('{"title":"React 常考面试题","description":"","frontmatter":{},"headers":[{"level":3,"title":"1. React 事件机制","slug":"_1-react-事件机制","link":"#_1-react-事件机制","children":[]},{"level":3,"title":"2. React的事件和普通的HTML事件有什么不同？","slug":"_2-react的事件和普通的html事件有什么不同","link":"#_2-react的事件和普通的html事件有什么不同","children":[]},{"level":3,"title":"3. React 组件中怎么做事件代理？它的原理是什么？","slug":"_3-react-组件中怎么做事件代理-它的原理是什么","link":"#_3-react-组件中怎么做事件代理-它的原理是什么","children":[]},{"level":3,"title":"4. React 高阶组件、Render props、hooks 有什么区别，为什么要不断迭代","slug":"_4-react-高阶组件、render-props、hooks-有什么区别-为什么要不断迭代","link":"#_4-react-高阶组件、render-props、hooks-有什么区别-为什么要不断迭代","children":[]},{"level":3,"title":"5. 对React-Fiber的理解，它解决了什么问题？","slug":"_5-对react-fiber的理解-它解决了什么问题","link":"#_5-对react-fiber的理解-它解决了什么问题","children":[]},{"level":3,"title":"6. React.Component 和 React.PureComponent 的区别","slug":"_6-react-component-和-react-purecomponent-的区别","link":"#_6-react-component-和-react-purecomponent-的区别","children":[]},{"level":3,"title":"7. Component, Element, Instance 之间有什么区别和联系？","slug":"_7-component-element-instance-之间有什么区别和联系","link":"#_7-component-element-instance-之间有什么区别和联系","children":[]},{"level":3,"title":"8. React.createClass和extends Component的区别有哪些？","slug":"_8-react-createclass和extends-component的区别有哪些","link":"#_8-react-createclass和extends-component的区别有哪些","children":[]},{"level":3,"title":"9. React 高阶组件是什么，和普通组件有什么区别，适用什么场景","slug":"_9-react-高阶组件是什么-和普通组件有什么区别-适用什么场景","link":"#_9-react-高阶组件是什么-和普通组件有什么区别-适用什么场景","children":[]},{"level":3,"title":"10. 对componentWillReceiveProps 的理解","slug":"_10-对componentwillreceiveprops-的理解","link":"#_10-对componentwillreceiveprops-的理解","children":[]},{"level":3,"title":"11. 哪些方法会触发 React 重新渲染？重新渲染 render 会做些什么？","slug":"_11-哪些方法会触发-react-重新渲染-重新渲染-render-会做些什么","link":"#_11-哪些方法会触发-react-重新渲染-重新渲染-render-会做些什么","children":[]},{"level":3,"title":"12. React如何判断什么时候重新渲染组件？","slug":"_12-react如何判断什么时候重新渲染组件","link":"#_12-react如何判断什么时候重新渲染组件","children":[]},{"level":3,"title":"13. React声明组件有哪几种方法，有什么不同？","slug":"_13-react声明组件有哪几种方法-有什么不同","link":"#_13-react声明组件有哪几种方法-有什么不同","children":[]},{"level":3,"title":"14. 对有状态组件和无状态组件的理解及使用场景","slug":"_14-对有状态组件和无状态组件的理解及使用场景","link":"#_14-对有状态组件和无状态组件的理解及使用场景","children":[]},{"level":3,"title":"15. 对React中Fragment的理解，它的使用场景是什么？","slug":"_15-对react中fragment的理解-它的使用场景是什么","link":"#_15-对react中fragment的理解-它的使用场景是什么","children":[]},{"level":3,"title":"16. React如何获取组件对应的DOM元素？","slug":"_16-react如何获取组件对应的dom元素","link":"#_16-react如何获取组件对应的dom元素","children":[]},{"level":3,"title":"17. React中可以在render访问refs吗？为什么？","slug":"_17-react中可以在render访问refs吗-为什么","link":"#_17-react中可以在render访问refs吗-为什么","children":[]},{"level":3,"title":"18. 对React的插槽(Portals)的理解，如何使用，有哪些使用场景","slug":"_18-对react的插槽-portals-的理解-如何使用-有哪些使用场景","link":"#_18-对react的插槽-portals-的理解-如何使用-有哪些使用场景","children":[]},{"level":3,"title":"19. 在React中如何避免不必要的render？","slug":"_19-在react中如何避免不必要的render","link":"#_19-在react中如何避免不必要的render","children":[]},{"level":3,"title":"20. 对 React-Intl 的理解，它的工作原理？","slug":"_20-对-react-intl-的理解-它的工作原理","link":"#_20-对-react-intl-的理解-它的工作原理","children":[]},{"level":2,"title":"Contributors","slug":"contributors","link":"#contributors","children":[]}],"relativePath":"code/interview/offer/15.react常考面试题.md","lastUpdated":null}'),u={name:"code/interview/offer/15.react常考面试题.md"},d=n("h1",{id:"react-常考面试题",tabindex:"-1"},[C("React 常考面试题 "),n("a",{class:"header-anchor",href:"#react-常考面试题","aria-hidden":"true"},"#")],-1),m=b(`<h3 id="_1-react-事件机制" tabindex="-1">1. React 事件机制 <a class="header-anchor" href="#_1-react-事件机制" aria-hidden="true">#</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">&lt;div onClick={this.handleClick.bind(this)}&gt;点我&lt;/div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>React并不是将click事件绑定到了div的真实DOM上，而是在document处监听了所有的事件，当事件发生并且冒泡到document处的时候，React将事件内容封装并交由真正的处理函数运行。这样的方式不仅仅减少了内存的消耗，还能在组件挂在销毁时统一订阅和移除事件。</p><p>除此之外，冒泡到document上的事件也不是原生的浏览器事件，而是由react自己实现的合成事件（SyntheticEvent）。因此如果不想要是事件冒泡的话应该调用event.preventDefault()方法，而不是调用event.stopProppagation()方法。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/qGrNRp9nH3UekFocHu1rB9O106eY0vOBNL7jhFaVsSC5VyiawEgAgp43BPiaIxZGd4AELeSqtWYFP6mibXE9kXtAw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片">77fa6b2a59c92e160bc171f9c80783e7.jpg</p><p>JSX 上写的事件并没有绑定在对应的真实 DOM 上，而是通过事件代理的方式，将所有的事件都统一绑定在了 <code>document</code> 上。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件。</p><p>另外冒泡到 <code>document</code> 上的事件也不是原生浏览器事件，而是 React 自己实现的合成事件（SyntheticEvent）。因此我们如果不想要事件冒泡的话，调用 <code>event.stopPropagation</code> 是无效的，而应该调用 <code>event.preventDefault</code>。</p><p>实现合成事件的目的如下：</p><ul><li>合成事件首先抹平了浏览器之间的兼容问题，另外这是一个跨浏览器原生事件包装器，赋予了跨浏览器开发的能力；</li><li>对于原生浏览器事件来说，浏览器会给监听器创建一个事件对象。如果你有很多的事件监听，那么就需要分配很多的事件对象，造成高额的内存分配问题。但是对于合成事件来说，有一个事件池专门来管理它们的创建和销毁，当事件需要被使用时，就会从池子中复用对象，事件回调结束后，就会销毁事件对象上的属性，从而便于下次复用事件对象。</li></ul><h3 id="_2-react的事件和普通的html事件有什么不同" tabindex="-1">2. React的事件和普通的HTML事件有什么不同？ <a class="header-anchor" href="#_2-react的事件和普通的html事件有什么不同" aria-hidden="true">#</a></h3><p>区别：</p><ul><li>对于事件名称命名方式，原生事件为全小写，react 事件采用小驼峰；</li><li>对于事件函数处理语法，原生事件为字符串，react 事件为函数；</li><li>react 事件不能采用 return false 的方式来阻止浏览器的默认行为，而必须要地明确地调用<code>preventDefault()</code>来阻止默认行为。</li></ul><p>合成事件是 react 模拟原生 DOM 事件所有能力的一个事件对象，其优点如下：</p><ul><li>兼容所有浏览器，更好的跨平台；</li><li>将事件统一存放在一个数组，避免频繁的新增与删除（垃圾回收）。</li><li>方便 react 统一管理和事务机制。</li></ul><p>事件的执行顺序为原生事件先执行，合成事件后执行，合成事件会冒泡绑定到 document 上，所以尽量避免原生事件与合成事件混用，如果原生事件阻止冒泡，可能会导致合成事件不执行，因为需要冒泡到document 上合成事件才会执行。</p><h3 id="_3-react-组件中怎么做事件代理-它的原理是什么" tabindex="-1">3. React 组件中怎么做事件代理？它的原理是什么？ <a class="header-anchor" href="#_3-react-组件中怎么做事件代理-它的原理是什么" aria-hidden="true">#</a></h3><p>React基于Virtual DOM实现了一个SyntheticEvent层（合成事件层），定义的事件处理器会接收到一个合成事件对象的实例，它符合W3C标准，且与原生的浏览器事件拥有同样的接口，支持冒泡机制，所有的事件都自动绑定在最外层上。</p><p>在React底层，主要对合成事件做了两件事：</p><ul><li>**事件委派：**React会把所有的事件绑定到结构的最外层，使用统一的事件监听器，这个事件监听器上维持了一个映射来保存所有组件内部事件监听和处理函数。</li><li>**自动绑定：**React组件中，每个方法的上下文都会指向该组件的实例，即自动绑定this为当前组件。</li></ul><h3 id="_4-react-高阶组件、render-props、hooks-有什么区别-为什么要不断迭代" tabindex="-1">4. React 高阶组件、Render props、hooks 有什么区别，为什么要不断迭代 <a class="header-anchor" href="#_4-react-高阶组件、render-props、hooks-有什么区别-为什么要不断迭代" aria-hidden="true">#</a></h3><p>这三者是目前react解决代码复用的主要方式：</p><ul><li>高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。具体而言，高阶组件是参数为组件，返回值为新组件的函数。</li><li>render props是指一种在 React 组件之间使用一个值为函数的 prop 共享代码的简单技术，更具体的说，render prop 是一个用于告知组件需要渲染什么内容的函数 prop。</li><li>通常，render props 和高阶组件只渲染一个子节点。让 Hook 来服务这个使用场景更加简单。这两种模式仍有用武之地，（例如，一个虚拟滚动条组件或许会有一个 renderltem 属性，或是一个可见的容器组件或许会有它自己的 DOM 结构）。但在大部分场景下，Hook 足够了，并且能够帮助减少嵌套。</li></ul><p><strong>（1）HOC</strong></p><p>官方解释∶</p><blockquote><p>“</p><p>高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。</p><p>”</p></blockquote><p>简言之，HOC是一种组件的设计模式，HOC接受一个组件和额外的参数（如果需要），返回一个新的组件。HOC 是纯函数，没有副作用。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">// hoc的定义</span></span>
<span class="line"><span style="color:#A6ACCD;">function withSubscription(WrappedComponent, selectData) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  return class extends React.Component {</span></span>
<span class="line"><span style="color:#A6ACCD;">    constructor(props) {</span></span>
<span class="line"><span style="color:#A6ACCD;">      super(props);</span></span>
<span class="line"><span style="color:#A6ACCD;">      this.state = {</span></span>
<span class="line"><span style="color:#A6ACCD;">        data: selectData(DataSource, props)</span></span>
<span class="line"><span style="color:#A6ACCD;">      };</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    // 一些通用的逻辑处理</span></span>
<span class="line"><span style="color:#A6ACCD;">    render() {</span></span>
<span class="line"><span style="color:#A6ACCD;">      // ... 并使用新数据渲染被包装的组件!</span></span>
<span class="line"><span style="color:#A6ACCD;">      return &lt;WrappedComponent data={this.state.data} {...this.props} /&gt;;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">  };</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 使用</span></span>
<span class="line"><span style="color:#A6ACCD;">const BlogPostWithSubscription = withSubscription(BlogPost,</span></span>
<span class="line"><span style="color:#A6ACCD;">  (DataSource, props) =&gt; DataSource.getBlogPost(props.id));</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>HOC的优缺点∶</p><ul><li>优点∶ 逻辑服用、不影响被包裹组件的内部逻辑。</li><li>缺点∶ hoc传递给被包裹组件的props容易和被包裹后的组件重名，进而被覆盖</li></ul><p>**（2）**<strong>Render props</strong></p><p>官方解释∶</p><blockquote><p>“</p><p>&quot;render prop&quot;是指一种在 React 组件之间使用一个值为函数的 prop 共享代码的简单技术</p><p>”</p></blockquote><p>具有render prop 的组件接受一个返回React元素的函数，将render的渲染逻辑注入到组件内部。在这里，&quot;render&quot;的命名可以是任何其他有效的标识符。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">// DataProvider组件内部的渲染逻辑如下</span></span>
<span class="line"><span style="color:#A6ACCD;">class DataProvider extends React.Components {</span></span>
<span class="line"><span style="color:#A6ACCD;">     state = {</span></span>
<span class="line"><span style="color:#A6ACCD;">    name: &#39;Tom&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    render() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    return (</span></span>
<span class="line"><span style="color:#A6ACCD;">        &lt;div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">          &lt;p&gt;共享数据组件自己内部的渲染逻辑&lt;/p&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">          { this.props.render(this.state) }</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;/div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    );</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 调用方式</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;DataProvider render={data =&gt; (</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;h1&gt;Hello {data.name}&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">)}/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>由此可以看到，render props的优缺点也很明显∶</p><ul><li>优点：数据共享、代码复用，将组件内的state作为props传递给调用者，将渲染逻辑交给调用者。</li><li>缺点：无法在 return 语句外访问数据、嵌套写法不够优雅</li></ul><p>**（3）**<strong>Hooks</strong></p><p>官方解释∶</p><blockquote><p>“</p><p>Hook是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。通过自定义hook，可以复用代码逻辑。</p><p>”</p></blockquote><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">// 自定义一个获取订阅数据的hook</span></span>
<span class="line"><span style="color:#A6ACCD;">function useSubscription() {</span></span>
<span class="line"><span style="color:#A6ACCD;">  const data = DataSource.getComments();</span></span>
<span class="line"><span style="color:#A6ACCD;">  return [data];</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">// </span></span>
<span class="line"><span style="color:#A6ACCD;">function CommentList(props) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  const {data} = props;</span></span>
<span class="line"><span style="color:#A6ACCD;">  const [subData] = useSubscription();</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">// 使用</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;CommentList data=&#39;hello&#39; /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>以上可以看出，hook解决了hoc的prop覆盖的问题，同时使用的方式解决了render props的嵌套地狱的问题。hook的优点如下∶</p><ul><li>使用直观；</li><li>解决hoc的prop 重名问题；</li><li>解决render props 因共享数据 而出现嵌套地狱的问题；</li><li>能在return之外使用数据的问题。</li></ul><p>需要注意的是：hook只能在组件顶层使用，不可在分支语句中使用。</p><p><strong>总结∶</strong></p><p>Hoc、render props和hook都是为了解决代码复用的问题，但是hoc和render props都有特定的使用场景和明显的缺点。hook是react16.8更新的新的API，让组件逻辑复用更简洁明了，同时也解决了hoc和render props的一些缺点。</p><h3 id="_5-对react-fiber的理解-它解决了什么问题" tabindex="-1">5. 对React-Fiber的理解，它解决了什么问题？ <a class="header-anchor" href="#_5-对react-fiber的理解-它解决了什么问题" aria-hidden="true">#</a></h3><p>React V15 在渲染时，会递归比对 VirtualDOM 树，找出需要变动的节点，然后同步更新它们， 一气呵成。这个过程期间， React 会占据浏览器资源，这会导致用户触发的事件得不到响应，并且会导致掉帧，<strong>导致用户感觉到卡顿</strong>。</p><p>为了给用户制造一种应用很快的“假象”，不能让一个任务长期霸占着资源。可以将浏览器的渲染、布局、绘制、资源加载(例如 HTML 解析)、事件响应、脚本执行视作操作系统的“进程”，需要通过某些调度策略合理地分配 CPU 资源，从而提高浏览器的用户响应速率, 同时兼顾任务执行效率。</p><p>所以 React 通过Fiber 架构，让这个执行过程变成可被中断。“适时”地让出 CPU 执行权，除了可以让浏览器及时地响应用户的交互，还有其他好处:</p><ul><li>分批延时对DOM进行操作，避免一次性操作大量 DOM 节点，可以得到更好的用户体验；</li><li>给浏览器一点喘息的机会，它会对代码进行编译优化（JIT）及进行热代码优化，或者对 reflow 进行修正。</li></ul><p>**核心思想：**Fiber 也称协程或者纤程。它和线程并不一样，协程本身是没有并发或者并行能力的（需要配合线程），它只是一种控制流程的让出机制。让出 CPU 的执行权，让 CPU 能在这段时间执行其他的操作。渲染的过程可以被中断，可以将控制权交回浏览器，让位给高优先级的任务，浏览器空闲后再恢复渲染。</p><h3 id="_6-react-component-和-react-purecomponent-的区别" tabindex="-1">6. React.Component 和 React.PureComponent 的区别 <a class="header-anchor" href="#_6-react-component-和-react-purecomponent-的区别" aria-hidden="true">#</a></h3><p>PureComponent表示一个纯组件，可以用来优化React程序，减少render函数执行的次数，从而提高组件的性能。</p><p>在React中，当prop或者state发生变化时，可以通过在shouldComponentUpdate生命周期函数中执行return false来阻止页面的更新，从而减少不必要的render执行。React.PureComponent会自动执行 shouldComponentUpdate。</p><p>不过，pureComponent中的 shouldComponentUpdate() 进行的是<strong>浅比较</strong>，也就是说如果是引用数据类型的数据，只会比较不是同一个地址，而不会比较这个地址里面的数据是否一致。浅比较会忽略属性和或状态突变情况，其实也就是数据引用指针没有变化，而数据发生改变的时候render是不会执行的。如果需要重新渲染那么就需要重新开辟空间引用数据。PureComponent一般会用在一些纯展示组件上。</p><p>使用pureComponent的<strong>好处</strong>：当组件更新时，如果组件的props或者state都没有改变，render函数就不会触发。省去虚拟DOM的生成和对比过程，达到提升性能的目的。这是因为react自动做了一层浅比较。</p><h3 id="_7-component-element-instance-之间有什么区别和联系" tabindex="-1">7. Component, Element, Instance 之间有什么区别和联系？ <a class="header-anchor" href="#_7-component-element-instance-之间有什么区别和联系" aria-hidden="true">#</a></h3><ul><li>**元素：**一个元素<code>element</code>是一个普通对象(plain object)，描述了对于一个DOM节点或者其他组件<code>component</code>，你想让它在屏幕上呈现成什么样子。元素<code>element</code>可以在它的属性<code>props</code>中包含其他元素(译注:用于形成元素树)。创建一个React元素<code>element</code>成本很低。元素<code>element</code>创建之后是不可变的。</li><li>**组件：**一个组件<code>component</code>可以通过多种方式声明。可以是带有一个<code>render()</code>方法的类，简单点也可以定义为一个函数。这两种情况下，它都把属性<code>props</code>作为输入，把返回的一棵元素树作为输出。</li><li>**实例：**一个实例<code>instance</code>是你在所写的组件类<code>component class</code>中使用关键字<code>this</code>所指向的东西(译注:组件实例)。它用来存储本地状态和响应生命周期事件很有用。</li></ul><p>函数式组件(<code>Functional component</code>)根本没有实例<code>instance</code>。类组件(<code>Class component</code>)有实例<code>instance</code>，但是永远也不需要直接创建一个组件的实例，因为React帮我们做了这些。</p><h3 id="_8-react-createclass和extends-component的区别有哪些" tabindex="-1">8. React.createClass和extends Component的区别有哪些？ <a class="header-anchor" href="#_8-react-createclass和extends-component的区别有哪些" aria-hidden="true">#</a></h3><p>React.createClass和extends Component的bai区别主要在于：</p><p><strong>（1）语法区别</strong></p><ul><li>createClass本质上是一个工厂函数，extends的方式更加接近最新的ES6规范的class写法。两种方式在语法上的差别主要体现在方法的定义和静态属性的声明上。</li><li>createClass方式的方法定义使用逗号，隔开，因为creatClass本质上是一个函数，传递给它的是一个Object；而class的方式定义方法时务必谨记不要使用逗号隔开，这是ES6 class的语法规范。</li></ul><p><strong>（2）propType 和 getDefaultProps</strong></p><ul><li>React.createClass：通过proTypes对象和getDefaultProps()方法来设置和获取props.</li><li>React.Component：通过设置两个属性propTypes和defaultProps</li></ul><p><strong>（3）状态的区别</strong></p><ul><li>React.createClass：通过getInitialState()方法返回一个包含初始值的对象</li><li>React.Component：通过constructor设置初始状态</li></ul><p><strong>（4）this区别</strong></p><ul><li>React.createClass：会正确绑定this</li><li>React.Component：由于使用了 ES6，这里会有些微不同，属性并不会自动绑定到 React 类的实例上。</li></ul><p><strong>（5）Mixins</strong></p><ul><li>React.createClass：使用 React.createClass 的话，可以在创建组件时添加一个叫做 mixins 的属性，并将可供混合的类的集合以数组的形式赋给 mixins。</li><li>如果使用 ES6 的方式来创建组件，那么 <code>React mixins</code> 的特性将不能被使用了。</li></ul><h3 id="_9-react-高阶组件是什么-和普通组件有什么区别-适用什么场景" tabindex="-1">9. React 高阶组件是什么，和普通组件有什么区别，适用什么场景 <a class="header-anchor" href="#_9-react-高阶组件是什么-和普通组件有什么区别-适用什么场景" aria-hidden="true">#</a></h3><p>官方解释∶</p><blockquote><p>“</p><p>高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。</p><p>”</p></blockquote><p>高阶组件（HOC）就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件，它只是一种组件的设计模式，这种设计模式是由react自身的组合性质必然产生的。我们将它们称为纯组件，因为它们可以接受任何动态提供的子组件，但它们不会修改或复制其输入组件中的任何行为。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">// hoc的定义</span></span>
<span class="line"><span style="color:#A6ACCD;">function withSubscription(WrappedComponent, selectData) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  return class extends React.Component {</span></span>
<span class="line"><span style="color:#A6ACCD;">    constructor(props) {</span></span>
<span class="line"><span style="color:#A6ACCD;">      super(props);</span></span>
<span class="line"><span style="color:#A6ACCD;">      this.state = {</span></span>
<span class="line"><span style="color:#A6ACCD;">        data: selectData(DataSource, props)</span></span>
<span class="line"><span style="color:#A6ACCD;">      };</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    // 一些通用的逻辑处理</span></span>
<span class="line"><span style="color:#A6ACCD;">    render() {</span></span>
<span class="line"><span style="color:#A6ACCD;">      // ... 并使用新数据渲染被包装的组件!</span></span>
<span class="line"><span style="color:#A6ACCD;">      return &lt;WrappedComponent data={this.state.data} {...this.props} /&gt;;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">  };</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 使用</span></span>
<span class="line"><span style="color:#A6ACCD;">const BlogPostWithSubscription = withSubscription(BlogPost,</span></span>
<span class="line"><span style="color:#A6ACCD;">  (DataSource, props) =&gt; DataSource.getBlogPost(props.id));</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><strong>1）HOC的优缺点</strong></p><ul><li>优点∶ 逻辑服用、不影响被包裹组件的内部逻辑。</li><li>缺点∶hoc传递给被包裹组件的props容易和被包裹后的组件重名，进而被覆盖</li></ul><p><strong>2）适用场景</strong></p><ul><li>代码复用，逻辑抽象</li><li>渲染劫持</li><li>State 抽象和更改</li><li>Props 更改</li></ul><p><strong>3）具体应用例子</strong></p><ul><li>**权限控制：**利用高阶组件的 <strong>条件渲染</strong> 特性可以对页面进行权限控制，权限控制一般分为两个维度：页面级别和 页面元素级别</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">// HOC.js</span></span>
<span class="line"><span style="color:#A6ACCD;">function withAdminAuth(WrappedComponent) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    return class extends React.Component {</span></span>
<span class="line"><span style="color:#A6ACCD;">        state = {</span></span>
<span class="line"><span style="color:#A6ACCD;">            isAdmin: false,</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        async UNSAFE_componentWillMount() {</span></span>
<span class="line"><span style="color:#A6ACCD;">            const currentRole = await getCurrentUserRole();</span></span>
<span class="line"><span style="color:#A6ACCD;">            this.setState({</span></span>
<span class="line"><span style="color:#A6ACCD;">                isAdmin: currentRole === &#39;Admin&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">            });</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        render() {</span></span>
<span class="line"><span style="color:#A6ACCD;">            if (this.state.isAdmin) {</span></span>
<span class="line"><span style="color:#A6ACCD;">                return &lt;WrappedComponent {...this.props} /&gt;;</span></span>
<span class="line"><span style="color:#A6ACCD;">            } else {</span></span>
<span class="line"><span style="color:#A6ACCD;">                return (&lt;div&gt;您没有权限查看该页面，请联系管理员！&lt;/div&gt;);</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    };</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// pages/page-a.js</span></span>
<span class="line"><span style="color:#A6ACCD;">class PageA extends React.Component {</span></span>
<span class="line"><span style="color:#A6ACCD;">    constructor(props) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        super(props);</span></span>
<span class="line"><span style="color:#A6ACCD;">        // something here...</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    UNSAFE_componentWillMount() {</span></span>
<span class="line"><span style="color:#A6ACCD;">        // fetching data</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    render() {</span></span>
<span class="line"><span style="color:#A6ACCD;">        // render page with data</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">export default withAdminAuth(PageA);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// pages/page-b.js</span></span>
<span class="line"><span style="color:#A6ACCD;">class PageB extends React.Component {</span></span>
<span class="line"><span style="color:#A6ACCD;">    constructor(props) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        super(props);</span></span>
<span class="line"><span style="color:#A6ACCD;">    // something here...</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    UNSAFE_componentWillMount() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    // fetching data</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    render() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    // render page with data</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">export default withAdminAuth(PageB);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><ul><li>**组件渲染性能追踪：**借助父组件子组件生命周期规则捕获子组件的生命周期，可以方便的对某个组件的渲染时间进行记录∶</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">class Home extends React.Component {</span></span>
<span class="line"><span style="color:#A6ACCD;">        render() {</span></span>
<span class="line"><span style="color:#A6ACCD;">            return (&lt;h1&gt;Hello World.&lt;/h1&gt;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    function withTiming(WrappedComponent) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        return class extends WrappedComponent {</span></span>
<span class="line"><span style="color:#A6ACCD;">            constructor(props) {</span></span>
<span class="line"><span style="color:#A6ACCD;">                super(props);</span></span>
<span class="line"><span style="color:#A6ACCD;">                this.start = 0;</span></span>
<span class="line"><span style="color:#A6ACCD;">                this.end = 0;</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">            UNSAFE_componentWillMount() {</span></span>
<span class="line"><span style="color:#A6ACCD;">                super.componentWillMount &amp;&amp; super.componentWillMount();</span></span>
<span class="line"><span style="color:#A6ACCD;">                this.start = Date.now();</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">            componentDidMount() {</span></span>
<span class="line"><span style="color:#A6ACCD;">                super.componentDidMount &amp;&amp; super.componentDidMount();</span></span>
<span class="line"><span style="color:#A6ACCD;">                this.end = Date.now();</span></span>
<span class="line"><span style="color:#A6ACCD;">                console.log(\`\${WrappedComponent.name} 组件渲染时间为 \${this.end - this.start} ms\`);</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">            render() {</span></span>
<span class="line"><span style="color:#A6ACCD;">                return super.render();</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">        };</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    export default withTiming(Home);   </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>注意：withTiming 是利用 反向继承 实现的一个高阶组件，功能是计算被包裹组件（这里是 Home 组件）的渲染时间。</p><ul><li><strong>页面复用</strong></li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">const withFetching = fetching =&gt; WrappedComponent =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    return class extends React.Component {</span></span>
<span class="line"><span style="color:#A6ACCD;">        state = {</span></span>
<span class="line"><span style="color:#A6ACCD;">            data: [],</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        async UNSAFE_componentWillMount() {</span></span>
<span class="line"><span style="color:#A6ACCD;">            const data = await fetching();</span></span>
<span class="line"><span style="color:#A6ACCD;">            this.setState({</span></span>
<span class="line"><span style="color:#A6ACCD;">                data,</span></span>
<span class="line"><span style="color:#A6ACCD;">            });</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        render() {</span></span>
<span class="line"><span style="color:#A6ACCD;">            return &lt;WrappedComponent data={this.state.data} {...this.props} /&gt;;</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// pages/page-a.js</span></span>
<span class="line"><span style="color:#A6ACCD;">export default withFetching(fetching(&#39;science-fiction&#39;))(MovieList);</span></span>
<span class="line"><span style="color:#A6ACCD;">// pages/page-b.js</span></span>
<span class="line"><span style="color:#A6ACCD;">export default withFetching(fetching(&#39;action&#39;))(MovieList);</span></span>
<span class="line"><span style="color:#A6ACCD;">// pages/page-other.js</span></span>
<span class="line"><span style="color:#A6ACCD;">export default withFetching(fetching(&#39;some-other-type&#39;))(MovieList);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="_10-对componentwillreceiveprops-的理解" tabindex="-1">10. 对componentWillReceiveProps 的理解 <a class="header-anchor" href="#_10-对componentwillreceiveprops-的理解" aria-hidden="true">#</a></h3><p>该方法当<code>props</code>发生变化时执行，初始化<code>render</code>时不执行，在这个回调函数里面，你可以根据属性的变化，通过调用<code>this.setState()</code>来更新你的组件状态，旧的属性还是可以通过<code>this.props</code>来获取,这里调用更新状态是安全的，并不会触发额外的<code>render</code>调用。</p><p>**使用好处：**在这个生命周期中，可以在子组件的render函数执行前获取新的props，从而更新子组件自己的state。可以将数据请求放在这里进行执行，需要传的参数则从componentWillReceiveProps(nextProps)中获取。而不必将所有的请求都放在父组件中。于是该请求只会在该组件渲染时才会发出，从而减轻请求负担。componentWillReceiveProps在初始化render的时候不会执行，它会在Component接受到新的状态(Props)时被触发，一般用于父组件状态更新时子组件的重新渲染。</p><h3 id="_11-哪些方法会触发-react-重新渲染-重新渲染-render-会做些什么" tabindex="-1">11. 哪些方法会触发 React 重新渲染？重新渲染 render 会做些什么？ <a class="header-anchor" href="#_11-哪些方法会触发-react-重新渲染-重新渲染-render-会做些什么" aria-hidden="true">#</a></h3><p><strong>（1）哪些方法会触发 react 重新渲染?</strong></p><ul><li><strong>setState（）方法被调用</strong></li></ul><p>setState 是 React 中最常用的命令，通常情况下，执行 setState 会触发 render。但是这里有个点值得关注，执行 setState 的时候不一定会重新渲染。当 setState 传入 null 时，并不会触发 render。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">class App extends React.Component {</span></span>
<span class="line"><span style="color:#A6ACCD;">  state = {</span></span>
<span class="line"><span style="color:#A6ACCD;">    a: 1</span></span>
<span class="line"><span style="color:#A6ACCD;">  };</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  render() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(&quot;render&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">    return (</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;React.Fragement&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        &lt;p&gt;{this.state.a}&lt;/p&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        &lt;button</span></span>
<span class="line"><span style="color:#A6ACCD;">          onClick={() =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">            this.setState({ a: 1 }); // 这里并没有改变 a 的值</span></span>
<span class="line"><span style="color:#A6ACCD;">          }}</span></span>
<span class="line"><span style="color:#A6ACCD;">        &gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">          Click me</span></span>
<span class="line"><span style="color:#A6ACCD;">        &lt;/button&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        &lt;button onClick={() =&gt; this.setState(null)}&gt;setState null&lt;/button&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        &lt;Child /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;/React.Fragement&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    );</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><ul><li><strong>父组件重新渲染</strong></li></ul><p>只要父组件重新渲染了，即使传入子组件的 props 未发生变化，那么子组件也会重新渲染，进而触发 render</p><p><strong>（2）重新渲染 render 会做些什么?</strong></p><ul><li>会对新旧 VNode 进行对比，也就是我们所说的Diff算法。</li><li>对新旧两棵树进行一个深度优先遍历，这样每一个节点都会一个标记，在到深度遍历的时候，每遍历到一和个节点，就把该节点和新的节点树进行对比，如果有差异就放到一个对象里面</li><li>遍历差异对象，根据差异的类型，根据对应对规则更新VNode</li></ul><p>React 的处理 render 的基本思维模式是每次一有变动就会去重新渲染整个应用。在 Virtual DOM 没有出现之前，最简单的方法就是直接调用 innerHTML。Virtual DOM厉害的地方并不是说它比直接操作 DOM 快，而是说不管数据怎么变，都会尽量以最小的代价去更新 DOM。React 将 render 函数返回的虚拟 DOM 树与老的进行比较，从而确定 DOM 要不要更新、怎么更新。当 DOM 树很大时，遍历两棵树进行各种比对还是相当耗性能的，特别是在顶层 setState 一个微小的修改，默认会去遍历整棵树。尽管 React 使用高度优化的 Diff 算法，但是这个过程仍然会损耗性能.</p><h3 id="_12-react如何判断什么时候重新渲染组件" tabindex="-1">12. React如何判断什么时候重新渲染组件？ <a class="header-anchor" href="#_12-react如何判断什么时候重新渲染组件" aria-hidden="true">#</a></h3><p>组件状态的改变可以因为<code>props</code>的改变，或者直接通过<code>setState</code>方法改变。组件获得新的状态，然后React决定是否应该重新渲染组件。只要组件的state发生变化，React就会对组件进行重新渲染。这是因为React中的<code>shouldComponentUpdate</code>方法默认返回<code>true</code>，这就是导致每次更新都重新渲染的原因。</p><p>当React将要渲染组件时会执行<code>shouldComponentUpdate</code>方法来看它是否返回<code>true</code>（组件应该更新，也就是重新渲染）。所以需要重写<code>shouldComponentUpdate</code>方法让它根据情况返回<code>true</code>或者<code>false</code>来告诉React什么时候重新渲染什么时候跳过重新渲染。</p><h3 id="_13-react声明组件有哪几种方法-有什么不同" tabindex="-1">13. React声明组件有哪几种方法，有什么不同？ <a class="header-anchor" href="#_13-react声明组件有哪几种方法-有什么不同" aria-hidden="true">#</a></h3><p>React 声明组件的三种方式：</p><ul><li>函数式定义的<code>无状态组件</code></li><li>ES5原生方式<code>React.createClass</code>定义的组件</li><li>ES6形式的<code>extends React.Component</code>定义的组件</li></ul><p><strong>（1）无状态函数式组件</strong></p><p>它是为了创建纯展示组件，这种组件只负责根据传入的props来展示，不涉及到state状态的操作</p><p>组件不会被实例化，整体渲染性能得到提升，不能访问this对象，不能访问生命周期的方法</p><p><strong>（2）ES5 原生方式 React.createClass // RFC</strong></p><p>React.createClass会自绑定函数方法，导致不必要的性能开销，增加代码过时的可能性。</p><p><strong>（3）E6继承形式 React.Component // RCC</strong></p><p>目前极为推荐的创建有状态组件的方式，最终会取代React.createClass形式；相对于 React.createClass可以更好实现代码复用。</p><p><strong>无状态组件相对于于后者的区别：</strong></p><p>与无状态组件相比，React.createClass和React.Component都是创建有状态的组件，这些组件是要被实例化的，并且可以访问组件的生命周期方法。</p><p><strong>React.createClass与React.Component区别：</strong></p><p><strong>① 函数this自绑定</strong></p><ul><li>React.createClass创建的组件，其每一个成员函数的this都有React自动绑定，函数中的this会被正确设置。</li><li>React.Component创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象。</li></ul><p><strong>② 组件属性类型propTypes及其默认props属性defaultProps配置不同</strong></p><ul><li>React.createClass在创建组件时，有关组件props的属性类型及组件默认的属性会作为组件实例的属性来配置，其中defaultProps是使用getDefaultProps的方法来获取默认组件属性的</li><li>React.Component在创建组件时配置这两个对应信息时，他们是作为组件类的属性，不是组件实例的属性，也就是所谓的类的静态属性来配置的。</li></ul><p><strong>③ 组件初始状态state的配置不同</strong></p><ul><li>React.createClass创建的组件，其状态state是通过getInitialState方法来配置组件相关的状态；</li><li>React.Component创建的组件，其状态state是在constructor中像初始化组件属性一样声明的。</li></ul><h3 id="_14-对有状态组件和无状态组件的理解及使用场景" tabindex="-1">14. 对有状态组件和无状态组件的理解及使用场景 <a class="header-anchor" href="#_14-对有状态组件和无状态组件的理解及使用场景" aria-hidden="true">#</a></h3><p><strong>（1）有状态组件</strong></p><p><strong>特点：</strong></p><ul><li>是类组件</li><li>有继承</li><li>可以使用this</li><li>可以使用react的生命周期</li><li>使用较多，容易频繁触发生命周期钩子函数，影响性能</li><li>内部使用 state，维护自身状态的变化，有状态组件根据外部组件传入的 props 和自身的 state进行渲染。</li></ul><p><strong>使用场景：</strong></p><ul><li>需要使用到状态的。</li><li>需要使用状态操作组件的（无状态组件的也可以实现新版本react hooks也可实现）</li></ul><p><strong>总结：</strong></p><p>类组件可以维护自身的状态变量，即组件的 state ，类组件还有不同的生命周期方法，可以让开发者能够在组件的不同阶段（挂载、更新、卸载），对组件做更多的控制。类组件则既可以充当无状态组件，也可以充当有状态组件。当一个类组件不需要管理自身状态时，也可称为无状态组件。</p><p><strong>（2）无状态组件</strong></p><p><strong>特点：</strong></p><ul><li>不依赖自身的状态state</li><li>可以是类组件或者函数组件。</li><li>可以完全避免使用 this 关键字。（由于使用的是箭头函数事件无需绑定）</li><li>有更高的性能。当不需要使用生命周期钩子时，应该首先使用无状态函数组件</li><li>组件内部不维护 state ，只根据外部组件传入的 props 进行渲染的组件，当 props 改变时，组件重新渲染。</li></ul><p><strong>使用场景：</strong></p><ul><li>组件不需要管理 state，纯展示</li></ul><p><strong>优点：</strong></p><ul><li>简化代码、专注于 render</li><li>组件不需要被实例化，无生命周期，提升性能。输出（渲染）只取决于输入（属性），无副作用</li><li>视图和数据的解耦分离</li></ul><p><strong>缺点：</strong></p><ul><li>无法使用 ref</li><li>无生命周期方法</li><li>无法控制组件的重渲染，因为无法使用shouldComponentUpdate 方法，当组件接受到新的属性时则会重渲染</li></ul><p><strong>总结：</strong></p><p>组件内部状态且与外部无关的组件，可以考虑用状态组件，这样状态树就不会过于复杂，易于理解和管理。当一个组件不需要管理自身状态时，也就是无状态组件，应该优先设计为函数组件。比如自定义的 <code>&lt;Button/&gt;</code>、 <code>&lt;Input /&gt;</code> 等组件。</p><h3 id="_15-对react中fragment的理解-它的使用场景是什么" tabindex="-1">15. 对React中Fragment的理解，它的使用场景是什么？ <a class="header-anchor" href="#_15-对react中fragment的理解-它的使用场景是什么" aria-hidden="true">#</a></h3><p>在React中，组件返回的元素只能有一个根元素。为了不添加多余的DOM节点，我们可以使用Fragment标签来包裹所有的元素，Fragment标签不会渲染出任何元素。React官方对Fragment的解释：</p><blockquote><p>“</p><p>React 中的一个常见模式是一个组件返回多个元素。Fragments 允许你将子列表分组，而无需向 DOM 添加额外节点。</p><p>”</p></blockquote><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">import React, { Component, Fragment } from &#39;react&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 一般形式</span></span>
<span class="line"><span style="color:#A6ACCD;">render() {</span></span>
<span class="line"><span style="color:#A6ACCD;">  return (</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;React.Fragment&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;ChildA /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;ChildB /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;ChildC /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;/React.Fragment&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  );</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">// 也可以写成以下形式</span></span>
<span class="line"><span style="color:#A6ACCD;">render() {</span></span>
<span class="line"><span style="color:#A6ACCD;">  return (</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;ChildA /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;ChildB /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;ChildC /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  );</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="_16-react如何获取组件对应的dom元素" tabindex="-1">16. React如何获取组件对应的DOM元素？ <a class="header-anchor" href="#_16-react如何获取组件对应的dom元素" aria-hidden="true">#</a></h3><p>可以用ref来获取某个子节点的实例，然后通过当前class组件实例的一些特定属性来直接获取子节点实例。ref有三种实现方法:</p><ul><li><strong>字符串格式</strong>：字符串格式，这是React16版本之前用得最多的，例如：<code>&lt;p ref=&quot;info&quot;&gt;span&lt;/p&gt;</code></li><li><strong>函数格式</strong>：ref对应一个方法，该方法有一个参数，也就是对应的节点实例，例如：<code>&lt;p ref={ele =&gt; this.info = ele}&gt;&lt;/p&gt;</code></li><li><strong>createRef方法</strong>：React 16提供的一个API，使用React.createRef()来实现</li></ul><h3 id="_17-react中可以在render访问refs吗-为什么" tabindex="-1">17. React中可以在render访问refs吗？为什么？ <a class="header-anchor" href="#_17-react中可以在render访问refs吗-为什么" aria-hidden="true">#</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">&lt;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;span id=&quot;name&quot; ref={this.spanRef}&gt;{this.state.title}&lt;/span&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;span&gt;{</span></span>
<span class="line"><span style="color:#A6ACCD;">     this.spanRef.current ? &#39;有值&#39; : &#39;无值&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }&lt;/span&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>不可以，render 阶段 DOM 还没有生成，无法获取 DOM。DOM 的获取需要在 pre-commit 阶段和 commit 阶段：</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href="http://www.w3.org/2000/svg" target="_blank" rel="noreferrer">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href="http://www.w3.org/1999/xlink" target="_blank" rel="noreferrer">http://www.w3.org/1999/xlink</a>&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png</p><h3 id="_18-对react的插槽-portals-的理解-如何使用-有哪些使用场景" tabindex="-1">18. 对React的插槽(Portals)的理解，如何使用，有哪些使用场景 <a class="header-anchor" href="#_18-对react的插槽-portals-的理解-如何使用-有哪些使用场景" aria-hidden="true">#</a></h3><p>React 官方对 Portals 的定义：</p><blockquote><p>“</p><p>Portal 提供了一种将子节点渲染到存在于父组件以外的 DOM 节点的优秀的方案</p><p>”</p></blockquote><p>Portals 是React 16提供的官方解决方案，使得组件可以脱离父组件层级挂载在DOM树的任何位置。通俗来讲，就是我们 render 一个组件，但这个组件的 DOM 结构并不在本组件内。</p><p>Portals语法如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">ReactDOM.createPortal(child, container);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>第一个参数 child 是可渲染的 React 子项，比如元素，字符串或者片段等;</li><li>第二个参数 container 是一个 DOM 元素。</li></ul><p>一般情况下，组件的render函数返回的元素会被挂载在它的父级组件上：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">import DemoComponent from &#39;./DemoComponent&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">render() {</span></span>
<span class="line"><span style="color:#A6ACCD;">  // DemoComponent元素会被挂载在id为parent的div的元素上</span></span>
<span class="line"><span style="color:#A6ACCD;">  return (</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;div id=&quot;parent&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        &lt;DemoComponent /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;/div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  );</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>然而，有些元素需要被挂载在更高层级的位置。最典型的应用场景：当父组件具有<code>overflow: hidden</code>或者<code>z-index</code>的样式设置时，组件有可能被其他元素遮挡，这时就可以考虑要不要使用Portal使组件的挂载脱离父组件。例如：对话框，模态窗。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">import DemoComponent from &#39;./DemoComponent&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">render() {</span></span>
<span class="line"><span style="color:#A6ACCD;">  // react会将DemoComponent组件直接挂载在真实的 dom 节点 domNode 上，生命周期还和16版本之前相同。</span></span>
<span class="line"><span style="color:#A6ACCD;">  return ReactDOM.createPortal(</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;DemoComponent /&gt;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    domNode,</span></span>
<span class="line"><span style="color:#A6ACCD;">  );</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_19-在react中如何避免不必要的render" tabindex="-1">19. 在React中如何避免不必要的render？ <a class="header-anchor" href="#_19-在react中如何避免不必要的render" aria-hidden="true">#</a></h3><p>React 基于虚拟 DOM 和高效 Diff 算法的完美配合，实现了对 DOM 最小粒度的更新。大多数情况下，React 对 DOM 的渲染效率足以业务日常。但在个别复杂业务场景下，性能问题依然会困扰我们。此时需要采取一些措施来提升运行性能，其很重要的一个方向，就是避免不必要的渲染（Render）。这里提下优化的点：</p><ul><li><strong>shouldComponentUpdate 和 PureComponent</strong></li></ul><p>在 React 类组件中，可以利用 shouldComponentUpdate或者 PureComponent 来减少因父组件更新而触发子组件的 render，从而达到目的。shouldComponentUpdate 来决定是否组件是否重新渲染，如果不希望组件重新渲染，返回 false 即可。</p><ul><li><strong>利用高阶组件</strong></li></ul><p>在函数组件中，并没有 shouldComponentUpdate 这个生命周期，可以利用高阶组件，封装一个类似 PureComponet 的功能</p><ul><li><strong>使用 React.memo</strong></li></ul><p>React.memo 是 React 16.6 新的一个 API，用来缓存组件的渲染，避免不必要的更新，其实也是一个高阶组件，与 PureComponent 十分类似，但不同的是， React.memo只能用于函数组件。</p><h3 id="_20-对-react-intl-的理解-它的工作原理" tabindex="-1">20. 对 React-Intl 的理解，它的工作原理？ <a class="header-anchor" href="#_20-对-react-intl-的理解-它的工作原理" aria-hidden="true">#</a></h3><p>React-intl是雅虎的语言国际化开源项目FormatJS的一部分，通过其提供的组件和API可以与ReactJS绑定。</p><p>React-intl提供了两种使用方法，一种是引用React组件，另一种是直接调取API，官方更加推荐在React项目中使用前者，只有在无法使用React组件的地方，才应该调用框架提供的API。它提供了一系列的React组件，包括数字格式化、字符串格式化、日期格式化等。</p><p>在React-intl中，可以配置不同的语言包，他的工作原理就是根据需要，在语言包之间进行切换。</p><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-hidden="true">#</a></h2>`,177);function A(h,D,g,y,R,_){const a=t,e=p,l=r;return o(),i("div",null,[d,s(a,{readTime:"25",words:"7.6k"}),m,s(e),s(l)])}const P=c(u,[["render",A]]);export{w as __pageData,P as default};
