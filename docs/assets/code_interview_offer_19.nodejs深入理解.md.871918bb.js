import{_ as t,a as l}from"./chunks/Contributors.vue_vue_type_script_setup_true_lang.2d10c1d4.js";import{_ as i}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.63457685.js";import{_ as o,o as p,c,D as e,x as s,a as d,Q as h}from"./chunks/framework.c7127555.js";import"./chunks/commonjsHelpers.725317a4.js";const O=JSON.parse('{"title":"整理几个关键节点深入理解nodejs","description":"","frontmatter":{},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"非阻塞I/O","slug":"非阻塞i-o","link":"#非阻塞i-o","children":[]},{"level":2,"title":"nodejs的非阻塞 I/O","slug":"nodejs的非阻塞-i-o","link":"#nodejs的非阻塞-i-o","children":[]},{"level":2,"title":"事件驱动","slug":"事件驱动","link":"#事件驱动","children":[]},{"level":2,"title":"异步编程","slug":"异步编程","link":"#异步编程","children":[{"level":3,"title":"回调函数格式规范","slug":"回调函数格式规范","link":"#回调函数格式规范","children":[]},{"level":3,"title":"异步流程控制","slug":"异步流程控制","link":"#异步流程控制","children":[]},{"level":3,"title":"promise","slug":"promise","link":"#promise","children":[]},{"level":3,"title":"then & .catch","slug":"then-catch","link":"#then-catch","children":[]},{"level":3,"title":"promise解决异步流程控制","slug":"promise解决异步流程控制","link":"#promise解决异步流程控制","children":[]},{"level":3,"title":"async/await","slug":"async-await","link":"#async-await","children":[]}]},{"level":2,"title":"事件循环","slug":"事件循环","link":"#事件循环","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"Contributors","slug":"contributors","link":"#contributors","children":[]}],"relativePath":"code/interview/offer/19.nodejs深入理解.md","lastUpdated":null}'),u={name:"code/interview/offer/19.nodejs深入理解.md"},m=s("h1",{id:"整理几个关键节点深入理解nodejs",tabindex:"-1"},[d("整理几个关键节点深入理解nodejs "),s("a",{class:"header-anchor",href:"#整理几个关键节点深入理解nodejs","aria-hidden":"true"},"#")],-1),g=h('<p>更新时间：2022年07月05日 16:09:09 作者： 小p</p><p>这篇文章主要介绍了整理几个关键节点深入理解nodejs，文章围绕主题展开详细的内容介绍，需要的小伙伴可以参考一下，需要的小伙伴可以参考一下</p><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h2><p>本文是个人在实际开发和学习中对nodejs的一些理解，现整理出来方便日后查阅，如果能给您启发将不胜荣幸。</p><h2 id="非阻塞i-o" tabindex="-1">非阻塞I/O <a class="header-anchor" href="#非阻塞i-o" aria-hidden="true">#</a></h2><p><strong>I/O</strong>：即 Input / Output，一个系统的输入和输出。</p><p>一个系统可以理解为一个个体，比如说一个人，你说话就是输出，你听就是输入。</p><p>阻塞 I/O 与非阻塞 I/O 的区别就在于系统接收输入再到输出期间，能不能接收其他输入。</p><p>下面以两个例子来说明什么是阻塞 I/O 和非阻塞 I/O:</p><p><strong>打饭</strong></p><p><img src="https://img.jbzj.com/file_images/article/202207/202275160326800.png" alt="img"></p><p>首先我们要确定一个系统的范围，在这个例子中食堂阿姨和餐厅的服务生看成是一个系统，<strong>输入就是点菜，输出就是端菜</strong>。</p><p>那么在点菜和端菜之间能不能接受其他人的点菜，就可以判断是阻塞I/O还是非阻塞I/O。</p><p>对于食堂阿姨，他在点菜的时候，是不能帮其他同学点菜的，只有这个同学点完菜端菜走了之后，才能接受下一个同学的点菜，所以食堂阿姨是阻塞I/O。</p><p>对于餐厅服务员，他可以在点完菜以后，这个客人端菜之前是可以服务下一位客人的，所以服务员是非阻塞I/O。</p><p><strong>做家务</strong></p><p><img src="https://img.jbzj.com/file_images/article/202207/202275160326801.png" alt="img"></p><p>在洗衣服的时候，是不需要等着洗衣机旁边的，这个时候可以去扫地和整理书桌，当整理完书桌后衣服也洗好了，这个时候去晾衣服，那么总共只需要25分钟。</p><p>洗衣服其实就是一个非阻塞I/O，在把衣服扔进洗衣机和洗完衣服期间，你是可以干其他事情的。</p><p><strong>非阻塞I/O之所以能提升性能，是因为它可以把不必要的等待给节省掉。</strong></p><p><strong>理解非阻塞I/O的要点在于</strong>：</p><ul><li><strong>确定一个进行I/O的系统边界</strong>。这非常关键，如果把系统扩大，上面餐厅的例子，如果把系统扩大到整个餐厅，那么厨师肯定是一个阻塞 I/O。</li><li>在 I/O 过程中，能不能进行其他 I/O。</li></ul><h2 id="nodejs的非阻塞-i-o" tabindex="-1">nodejs的非阻塞 I/O <a class="header-anchor" href="#nodejs的非阻塞-i-o" aria-hidden="true">#</a></h2><p>nodejs的非阻塞 I/O 是怎么体现的呢？前面说过理解非阻塞 I/O 的一个重要点是先确定一个系统边界，nodejs的系统边界就是<strong>主线程</strong>。</p><p>如果下面的架构图按照线程的维护划分，左边虚线部分是nodejs线程，右边虚线部分是c++线程。</p><p><img src="https://img.jbzj.com/file_images/article/202207/202275160326802.png" alt="img"></p><p>现在 nodejs 线程需要去查询数据库，这是一个典型的 I/O 操作，它不会等待 I/O 的结果，而且继续处理其他的操作，它会把大量的计算能力分发到其他的c++线程去计算。</p><p>等到结果出来后返回给nodejs线程，在获得结果之前nodejs 线程还能进行其他的I/O操作，所以是非阻塞的。</p><p><strong>nodejs 线程</strong> 相当于左边部分是服务员，c++ 线程是厨师。</p><p><strong>所以，node的非阻塞I/O是通过调用c++的worker threads来完成的。</strong></p><p>那当 c++ 线程获取结果后怎么通知 nodejs 线程呢？答案是<strong>事件驱动</strong>。</p><h2 id="事件驱动" tabindex="-1">事件驱动 <a class="header-anchor" href="#事件驱动" aria-hidden="true">#</a></h2><p><strong>阻塞</strong>：I/O时进程休眠，等待I/O完成后进行下一步；</p><p><strong>非阻塞</strong>：I/O时函数立即返回，进程不等待I/O完成。</p><p>那怎么知道返回的结果，就需要用到<strong>事件驱动</strong>。</p><p>所谓<strong>事件驱动</strong>可以理解为跟前端点击事件一样，我首先写一个点击事件，但是我不知道什么时候触发，只有触发的时候就去让主线程执行事件驱动函数。</p><p>这种模式也是一种观察者模式，就是我首先先监听这个事件，等触发时我就去执行。</p><p>那怎么实现事件驱动呢？答案是<strong>异步编程</strong>。</p><h2 id="异步编程" tabindex="-1">异步编程 <a class="header-anchor" href="#异步编程" aria-hidden="true">#</a></h2><p>上面说过nodejs有大量的非阻塞I/O，那么非阻塞I/O的结果是需要通过回调函数来获取的，<strong>这种通过回调函数的方式，就是异步编程</strong>。比如下面的代码是通过回调函数获取结果的:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">glob(__dirname+``&#39;/**/*&#39;``, (err, res) =&gt; {``  ``result = res``  ``console.log(``&#39;get result&#39;``)``})</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="回调函数格式规范" tabindex="-1">回调函数格式规范 <a class="header-anchor" href="#回调函数格式规范" aria-hidden="true">#</a></h3><p><strong>nodejs的回调函数第一个参数是error，后面的参数才是结果</strong>。为什么要这么做呢？</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">try` `{`` ``interview(``function` `() {``    ``console.log(``&#39;smile&#39;``)`` ``})``} ``catch``(err) {``  ``console.log(``&#39;cry&#39;``, err)``}` `function` `interview(callback) {``  ``setTimeout(() =&gt; {``    ``if``(Math.random() &lt; 0.1) {``      ``callback(``&#39;success&#39;``)``    ``} ``else` `{``      ``throw` `new` `Error(``&#39;fail&#39;``)``    ``}``  ``}, 500)``}</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>执行之后，没有被捕获，错误被扔到了全局，导致整个nodejs程序崩溃了。</p><p><img src="https://img.jbzj.com/file_images/article/202207/202275160326803.png" alt="img"></p><p>没有被try catch捕获是因为setTimeout重新开启了事件循环，每开启一个事件循环就重新生一个调用栈context，try catch是属于上一个事件循环的调用栈的，setTimeout的回调函数执行的时候，调用栈都不一样了，在这个新的调用栈中是没有try catch，所以这个错误被扔到全局，无法捕获。具体可以参考这一篇文章<a href="https://www.jb51.net/article/254242.htm" target="_blank" rel="noreferrer">JavaScript异步队列进行try catch时的问题解决</a>。</p><p>那么怎么办呢？把错误也作为一个参数:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">function` `interview(callback) {``  ``setTimeout(() =&gt; {``    ``if``(Math.random() &lt; 0.5) {``      ``callback(``&#39;success&#39;``)``    ``} ``else` `{``      ``callback(``new` `Error(``&#39;fail&#39;``))``    ``}``  ``}, 500)``}` `interview(``function` `(res) {``  ``if` `(res ``instanceof` `Error) {``    ``console.log(``&#39;cry&#39;``)``    ``return``  ``} ``  ``console.log(``&#39;smile&#39;``)``})</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>但是这样就比较麻烦，在回调中还要判断，所以就产生一种约定成熟的规定，第一个参数是err，如果不存在表示执行成功。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">function` `interview(callback) {``  ``setTimeout(() =&gt; {``    ``if``(Math.random() &lt; 0.5) {``      ``callback(``null``, ``&#39;success&#39;``)``    ``} ``else` `{``      ``callback(``new` `Error(``&#39;fail&#39;``))``    ``}``  ``}, 500)``}` `interview(``function` `(res) {``  ``if` `(res) {``    ``return``  ``} ``  ``console.log(``&#39;smile&#39;``)``})</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="异步流程控制" tabindex="-1">异步流程控制 <a class="header-anchor" href="#异步流程控制" aria-hidden="true">#</a></h3><p>nodejs的回调写法，不仅会带来回调地域，还会带来<strong>异步流程控制</strong>的问题。</p><p>异步流程控制主要是指当并发的时候，怎么来处理并发的逻辑。还是上面的例子，如果你同事面试两家公司，只有当成功面试两家的时候，才可以不面试第三家，那么怎么写这个逻辑呢？需要全局顶一个一个变量count:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">var` `count = 0``interview((err) =&gt; {``  ``if` `(err) {``    ``return``  ``}``  ``count++``  ``if` `(count &gt;= 2) {``    ``// 处理逻辑``  ``}``})``interview((err) =&gt; {``  ``if` `(err) {``    ``return``  ``}``  ``count++``  ``if` `(count &gt;= 2) {``    ``// 处理逻辑``  ``}``})</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>像上面这种写法就非常麻烦，且难看。所以，后来就出现了promise，async/await的写法。</p><h3 id="promise" tabindex="-1">promise <a class="header-anchor" href="#promise" aria-hidden="true">#</a></h3><blockquote><p>当前事件循环得不到的结果，但未来的事件循环会给你结果。很像一个渣男说的话。</p></blockquote><p>promise不仅是一个渣男，还是一个状态机:</p><ul><li>pending</li><li>fulfilled/resolved</li><li>rejectd</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">const pro = ``new` `Promise((resolve, reject) =&gt; {``  ``setTimeout(() =&gt; {``    ``resolve(``&#39;2&#39;``)``  ``}, 200)``})``console.log(pro) ``// 打印：Promise { &lt;pending&gt; }</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="then-catch" tabindex="-1">then &amp; .catch <a class="header-anchor" href="#then-catch" aria-hidden="true">#</a></h3><ul><li>resolved 状态的 promise 会调用后面的第一个 then</li><li>rejected 状态的 promise 会调用后面的第一个 catch</li><li>任何一个 reject 状态且后面没有 .catch 的 promise，都会造成浏览器或者 node 环境的全局错误。uncaught 表示未捕获的错误。</li></ul><p><img src="https://img.jbzj.com/file_images/article/202207/202275160326804.png" alt="img"></p><p>执行then或者catch会<strong>返回一个新的promise</strong>，该promise最终状态根据then和catch的回调函数的执行结果决定:</p><ul><li>如果回调函数始终是throw new Error，该promise是rejected状态</li><li>如果回调函数始终是return，该promise是resolved状态</li><li>但如果回调函数始终是return一个promise，该<strong>promise会和回调函数return的promise状态保持一致</strong>。</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">function` `interview() {``  ``return` `new` `Promise((resolve, reject) =&gt; {``    ``setTimeout(() =&gt; {``      ``if` `(Math.random() &gt; 0.5) {``        ``resolve(``&#39;success&#39;``)``      ``} ``else` `{``        ``reject(``new` `Error(``&#39;fail&#39;``))``      ``}``    ``})``  ``})``}``var` `promise = interview()``var` `promise1 = promise.then(() =&gt; {``  ``return` `new` `Promise((resolve, reject) =&gt; {``    ``setTimeout(() =&gt; {``      ``resolve(``&#39;accept&#39;``)``    ``}, 400)``  ``})``})</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>promise1的状态是由return里面的promise的状态决定的，也就是return里面的promise执行完后的状态就是promise1的状态。这样有什么好处呢？这样可以<strong>解决回调地狱的问题</strong>。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">var` `promise = interview()``  ``.then(() =&gt; {``    ``return` `interview()``  ``})``  ``.then(() =&gt; {``    ``return` `interview()``  ``})``  ``.then(() =&gt; {``    ``return` `interview()``  ``})``  ``.``catch``(e =&gt; {``    ``console.log(e)``  ``})</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>then如果返回的promise的状态是rejected，那么会调用后面第一个catch，后面的then就不会在调用了。记住：rejected调用后面的第一个catch，resolved调用后面的第一个then。</p><h3 id="promise解决异步流程控制" tabindex="-1">promise解决异步流程控制 <a class="header-anchor" href="#promise解决异步流程控制" aria-hidden="true">#</a></h3><p>如果promise仅仅是为了解决地狱回调，太小看promise了，promise最主要的作用是解决异步流程控制问题。下面如果要同时面试两家公司:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">function` `interview() {``  ``return` `new` `Promise((resolve, reject) =&gt; {``    ``setTimeout(() =&gt; {``      ``if` `(Math.random() &gt; 0.5) {``        ``resolve(``&#39;success&#39;``)``      ``} ``else` `{``        ``reject(``new` `Error(``&#39;fail&#39;``))``      ``}``    ``})``  ``})``}``promise``  ``.all([interview(), interview()])``  ``.then(() =&gt; {``    ``console.log(``&#39;smile&#39;``)``  ``})``  ``// 如果有一家公司rejected，就catch``  ``.``catch``(() =&gt; {``    ``console.log(``&#39;cry&#39;``)``  ``})</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="async-await" tabindex="-1">async/await <a class="header-anchor" href="#async-await" aria-hidden="true">#</a></h3><p><strong>sync/await到底是什么:</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console.log(async ``function``() {``  ``return` `4``})``console.log(``function``() {``  ``return` `new` `Promise((resolve, reject) =&gt; {``    ``resolve(4)``  ``})``})</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>打印的结果一样，也就是async/await是promse的语法糖而已。</p><p>我们知道try catch捕获错误是<strong>依赖调用栈</strong>的，只能捕获到调用栈以上的错误。但是如果使用await后能捕捉到调用栈所有函数的错误。即便这个错误是在另一个事件循环的调用栈抛出的，比如setTimeout。</p><p>改造面试代码，可以看到代码精简了很多。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">try` `{``  ``await interview(1)``  ``await interview(2)``  ``await interview(2)``} ``catch``(e =&gt; {``  ``console.log(e)``})</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果是并行任务呢？</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">await Promise.all([interview(1), interview(2)])</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-hidden="true">#</a></h2><p>因为nodejs的非阻塞 I/0， 所以需要利用事件驱动的方式获取 I/O 的结果，实现事件驱动拿到结果必须使用异步编程，比如回调函数。那么如何来有序的执行这些回调函数来获取结果呢？那就需要使用事件循环。</p><p>事件循环是实现 nodejs 非阻塞 I/O 功能的关键基础，非阻塞I/O和事件循环都是属于 <code>libuv</code> 这个c++库提供的能力。</p><p><img src="https://img.jbzj.com/file_images/article/202207/202275160326805.png" alt="img"></p><p><strong>代码演示:</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">const eventloop = {``  ``queue: [],``  ``loop() {``    ``while``(``this``.queue.length) {``      ``const callback = ``this``.queue.shift()``      ``callback()``    ``}``    ``setTimeout(``this``.loop.bind(``this``), 50)``  ``},``  ``add(callback) {``    ``this``.queue.push(callback)``  ``}``}``eventloop.loop()``setTimeout(() =&gt; {``  ``eventloop.add(() =&gt; {``    ``console.log(``&#39;1&#39;``)``  ``})``}, 500)` `setTimeout(() =&gt; {``  ``eventloop.add(() =&gt; {``    ``console.log(``&#39;2&#39;``)``  ``})``}, 800)</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>setTimeout(this.loop.bind(this), 50)</code>保证了50ms就会去看队列中是否有回调，如果有就去执行。这样就形成了一个事件循环。</p><p>当然实际的事件要复杂的多，队列也不止一个，比如有一个文件操作对列，一个时间对列。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">const eventloop = {``  ``queue: [],``  ``fsQueue: [],``  ``timerQueue: [],``  ``loop() {``    ``while``(``this``.queue.length) {``      ``const callback = ``this``.queue.shift()``      ``callback()``    ``}``    ``this``.fsQueue.forEach(callback =&gt; {``      ``if` `(done) {``        ``callback()``      ``}``    ``})``    ``setTimeout(``this``.loop.bind(``this``), 50)``  ``},``  ``add(callback) {``    ``this``.queue.push(callback)``  ``}``}</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><p>首先我们弄清楚了什么是非阻塞I/O，即遇到I/O立刻跳过执行后面的任务，不会等待I/O的结果。当I/O处理好了之后就会调用我们注册的事件处理函数，这就叫事件驱动。实现事件驱动就必须要用异步编程，异步编程是nodejs中最重要的环节，它从回调函数到promise，最后到async/await(使用同步的方法写异步逻辑)。</p><p>到此这篇关于整理几个关键节点深入理解nodejs的文章就介绍到这了,更多相关深入理解nodejs内容请搜索脚本之家以前的文章或继续浏览下面的相关文章希望大家以后多多支持脚本之家！</p><p><strong>您可能感兴趣的文章:</strong></p><ul><li><a href="https://www.jb51.net/article/206743.htm" target="_blank" rel="noreferrer">NodeJS和浏览器中this关键字的不同之处</a></li><li><a href="https://www.jb51.net/article/246176.htm" target="_blank" rel="noreferrer">nodejs实现登陆验证功能</a></li><li><a href="https://www.jb51.net/article/246624.htm" target="_blank" rel="noreferrer">nodejs使用Express框架写后端接口的全过程</a></li><li><a href="https://www.jb51.net/article/247188.htm" target="_blank" rel="noreferrer">使用nodejs搭建一个简易HTTP服务的实现示例</a></li><li><a href="https://www.jb51.net/article/247635.htm" target="_blank" rel="noreferrer">jenkins+docker+nginx+nodejs持续集成部署vue前端项目</a></li><li><a href="https://www.jb51.net/article/248450.htm" target="_blank" rel="noreferrer">NodeJS实现单点登录原理解析</a></li><li><a href="https://www.jb51.net/article/248495.htm" target="_blank" rel="noreferrer">Vue+NodeJS实现大文件上传的示例代码</a></li></ul><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-hidden="true">#</a></h2>',97);function b(v,w,C,f,y,j){const n=i,a=t,r=l;return p(),c("div",null,[m,e(n,{readTime:"10",words:"3.1k"}),g,e(a),e(r)])}const x=o(u,[["render",b]]);export{O as __pageData,x as default};
