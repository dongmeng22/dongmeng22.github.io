import{_ as o,a as e}from"./chunks/Contributors.vue_vue_type_script_setup_true_lang.2d10c1d4.js";import{_ as r}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.63457685.js";import{_ as c,o as t,c as y,D as s,x as n,a as i,Q as F}from"./chunks/framework.c7127555.js";import"./chunks/commonjsHelpers.725317a4.js";const P=JSON.parse('{"title":"1. 预备知识","description":"","frontmatter":{},"headers":[{"level":2,"title":"1.1 实例对象与函数对象","slug":"_1-1-实例对象与函数对象","link":"#_1-1-实例对象与函数对象","children":[]},{"level":2,"title":"1.2 两种类型的回调函数","slug":"_1-2-两种类型的回调函数","link":"#_1-2-两种类型的回调函数","children":[{"level":3,"title":"1. 同步回调","slug":"_1-同步回调","link":"#_1-同步回调","children":[]},{"level":3,"title":"2. 异步回调","slug":"_2-异步回调","link":"#_2-异步回调","children":[]}]},{"level":2,"title":"1.3 JS中的异常error处理","slug":"_1-3-js中的异常error处理","link":"#_1-3-js中的异常error处理","children":[{"level":3,"title":"1. 错误的类型","slug":"_1-错误的类型","link":"#_1-错误的类型","children":[]},{"level":3,"title":"2. 错误处理（捕获与抛出）","slug":"_2-错误处理-捕获与抛出","link":"#_2-错误处理-捕获与抛出","children":[]},{"level":3,"title":"3. 错误对象","slug":"_3-错误对象","link":"#_3-错误对象","children":[]}]},{"level":2,"title":"2.1 Promise是什么","slug":"_2-1-promise是什么","link":"#_2-1-promise是什么","children":[{"level":3,"title":"1. 理解Promise","slug":"_1-理解promise","link":"#_1-理解promise","children":[]},{"level":3,"title":"2. Promise 的状态","slug":"_2-promise-的状态","link":"#_2-promise-的状态","children":[]},{"level":3,"title":"3. Promise对象的值","slug":"_3-promise对象的值","link":"#_3-promise对象的值","children":[]},{"level":3,"title":"4. Promise 的基本流程","slug":"_4-promise-的基本流程","link":"#_4-promise-的基本流程","children":[]},{"level":3,"title":"5. Promise 的基本使用","slug":"_5-promise-的基本使用","link":"#_5-promise-的基本使用","children":[]}]},{"level":2,"title":"2.2 为什么要用 Promise","slug":"_2-2-为什么要用-promise","link":"#_2-2-为什么要用-promise","children":[{"level":3,"title":"1.指定回调函数的方式更加灵活","slug":"_1-指定回调函数的方式更加灵活","link":"#_1-指定回调函数的方式更加灵活","children":[]},{"level":3,"title":"2.支持链式调用，可以解决回调地狱问题","slug":"_2-支持链式调用-可以解决回调地狱问题","link":"#_2-支持链式调用-可以解决回调地狱问题","children":[{"level":5,"title":"什么是回调地狱？","slug":"什么是回调地狱","link":"#什么是回调地狱","children":[]},{"level":5,"title":"回调地狱的缺点？","slug":"回调地狱的缺点","link":"#回调地狱的缺点","children":[]},{"level":5,"title":"解决方案？","slug":"解决方案","link":"#解决方案","children":[]},{"level":5,"title":"终极解决方案？","slug":"终极解决方案","link":"#终极解决方案","children":[]}]}]},{"level":2,"title":"2.3 如何使用 Promise","slug":"_2-3-如何使用-promise","link":"#_2-3-如何使用-promise","children":[{"level":3,"title":"1. Promise 构造函数：Promise(executor) {}","slug":"_1-promise-构造函数-promise-executor","link":"#_1-promise-构造函数-promise-executor","children":[]},{"level":3,"title":"2. Promise.prototype.then 方法：p.then(onResolved, onRejected)","slug":"_2-promise-prototype-then-方法-p-then-onresolved-onrejected","link":"#_2-promise-prototype-then-方法-p-then-onresolved-onrejected","children":[]},{"level":3,"title":"3. Promise.prototype.catch 方法：p.catch(onRejected)","slug":"_3-promise-prototype-catch-方法-p-catch-onrejected","link":"#_3-promise-prototype-catch-方法-p-catch-onrejected","children":[]},{"level":3,"title":"4. Promise.resolve 方法：Promise.resolve(value)","slug":"_4-promise-resolve-方法-promise-resolve-value","link":"#_4-promise-resolve-方法-promise-resolve-value","children":[]},{"level":3,"title":"5. Promise.reject 方法：Promise.resolve(reason)","slug":"_5-promise-reject-方法-promise-resolve-reason","link":"#_5-promise-reject-方法-promise-resolve-reason","children":[]},{"level":3,"title":"6. Promise.all 方法：Promise.all(iterable)","slug":"_6-promise-all-方法-promise-all-iterable","link":"#_6-promise-all-方法-promise-all-iterable","children":[]},{"level":3,"title":"7. Promise.race方法：Promise.race(iterable)","slug":"_7-promise-race方法-promise-race-iterable","link":"#_7-promise-race方法-promise-race-iterable","children":[]}]},{"level":2,"title":"1. 如何改变 promise 的状态？","slug":"_1-如何改变-promise-的状态","link":"#_1-如何改变-promise-的状态","children":[]},{"level":2,"title":"2. 一个 promise 指定多个成功/失败回调函数，都会调用吗？","slug":"_2-一个-promise-指定多个成功-失败回调函数-都会调用吗","link":"#_2-一个-promise-指定多个成功-失败回调函数-都会调用吗","children":[]},{"level":2,"title":"3. 改变 promise 状态和指定回调函数谁先谁后？","slug":"_3-改变-promise-状态和指定回调函数谁先谁后","link":"#_3-改变-promise-状态和指定回调函数谁先谁后","children":[]},{"level":2,"title":"4. promise.then() 返回的新 promise 的结果状态由什么决定？","slug":"_4-promise-then-返回的新-promise-的结果状态由什么决定","link":"#_4-promise-then-返回的新-promise-的结果状态由什么决定","children":[]},{"level":2,"title":"5.promise 如何串联多个操作任务？","slug":"_5-promise-如何串联多个操作任务","link":"#_5-promise-如何串联多个操作任务","children":[]},{"level":2,"title":"6.Promise 异常穿透(传透)？","slug":"_6-promise-异常穿透-传透","link":"#_6-promise-异常穿透-传透","children":[]},{"level":2,"title":"7.中断 promise 链？","slug":"_7-中断-promise-链","link":"#_7-中断-promise-链","children":[]},{"level":2,"title":"Contributors","slug":"contributors","link":"#contributors","children":[]}],"relativePath":"basics/asynchronous/02Promise.md","lastUpdated":1678883566000}'),D={name:"basics/asynchronous/02Promise.md"},A=n("h1",{id:"_1-预备知识",tabindex:"-1"},[i("1. 预备知识 "),n("a",{class:"header-anchor",href:"#_1-预备知识","aria-hidden":"true"},"#")],-1),C=F("",199);function b(d,m,u,h,g,v){const a=r,l=o,p=e;return t(),y("div",null,[A,s(a,{readTime:"19",words:"4.8k"}),C,s(l),s(p)])}const k=c(D,[["render",b]]);export{P as __pageData,k as default};
