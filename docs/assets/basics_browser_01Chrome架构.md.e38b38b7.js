import{_ as t,a as o}from"./chunks/Contributors.vue_vue_type_script_setup_true_lang.3dcd3b9e.js";import{_ as n}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.b6ca37c5.js";import{_ as h,o as s,c,D as e,x as i,a as d,Q as _}from"./chunks/framework.c7127555.js";import"./chunks/commonjsHelpers.725317a4.js";const V=JSON.parse('{"title":"Chrome架构","description":"","frontmatter":{},"headers":[{"level":2,"title":"进程与线程","slug":"进程与线程","link":"#进程与线程","children":[]},{"level":2,"title":"单进程浏览器","slug":"单进程浏览器","link":"#单进程浏览器","children":[]},{"level":2,"title":"多进程浏览器","slug":"多进程浏览器","link":"#多进程浏览器","children":[]},{"level":2,"title":"Chrome的多进程架构","slug":"chrome的多进程架构","link":"#chrome的多进程架构","children":[]},{"level":2,"title":"面向服务的架构","slug":"面向服务的架构","link":"#面向服务的架构","children":[]},{"level":2,"title":"Contributors","slug":"contributors","link":"#contributors","children":[]}],"relativePath":"basics/browser/01Chrome架构.md","lastUpdated":1678883566000}'),p={name:"basics/browser/01Chrome架构.md"},m=i("h1",{id:"chrome架构",tabindex:"-1"},[d("Chrome架构 "),i("a",{class:"header-anchor",href:"#chrome架构","aria-hidden":"true"},"#")],-1),u=_('<h2 id="进程与线程" tabindex="-1">进程与线程 <a class="header-anchor" href="#进程与线程" aria-hidden="true">#</a></h2><p>一个进程就是一个程序的运行实例——启动一个程序时，操作系统会为该进程创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程。</p><p>线程不能单独存在，它是由进程来启动和管理的</p><ol><li>进程中的任意一线程执行出错，都会导致整个进程的崩溃</li><li>线程之间共享进程中的数据</li><li>当一个进程关闭之后，操作系统会回收进程所占用的内存</li><li>进程之间的内容相互隔离</li></ol><h2 id="单进程浏览器" tabindex="-1">单进程浏览器 <a class="header-anchor" href="#单进程浏览器" aria-hidden="true">#</a></h2><p>早期（2007年之前）的浏览器都是单进程浏览器。 也就是说：页面渲染、页面展现、JavaScript运行环境、插件都运行在一个进程中。这导致了一些问题：不稳定、不流畅、不安全。</p><ul><li>不稳定：插件、渲染引擎模块都不稳定，意外崩溃会导致浏览器也跟着崩溃</li><li>不流畅：同一时刻只能有一个模块可以执行，独占整个线程；插件、脚本可能会导致页面的内存泄露</li><li>不安全：恶意插件、脚本可能会攻击页面</li></ul><h2 id="多进程浏览器" tabindex="-1">多进程浏览器 <a class="header-anchor" href="#多进程浏览器" aria-hidden="true">#</a></h2><p>2008年Google发布了多进程架构的浏览器Chrome</p><ul><li>浏览器主进程（下载资源、管理IPC、显示渲染进程生成的图片）</li><li>渲染进程（解析、渲染、JavaScript执行、合成网页图片）（渲染进程运行在沙箱sandbox中，不能读写硬盘上的数据，不能获取操作系统权限）</li><li>插件进程（运行插件）</li></ul><p>进程之间通过IPC进行通信</p><p>解决了哪些问题：</p><ol><li>不稳定：进程间相互隔离，一个页面或插件崩溃不会使其他页面与浏览器崩溃</li><li>不流畅：不同页面在不同渲染进程中运行</li><li>内存泄漏：关闭一个页面，对应的渲染进程也会被关闭，该进程的内容会被系统回收</li><li>不安全：安全沙箱机制</li></ol><h2 id="chrome的多进程架构" tabindex="-1">Chrome的多进程架构 <a class="header-anchor" href="#chrome的多进程架构" aria-hidden="true">#</a></h2><ul><li>浏览器主进程：负责界面显示、用户交互、子进程管理，同时提供存储等功能</li><li>GPU进程：UI页面使用GPU绘制</li><li>网络进程：负责页面的网络资源加载</li><li>渲染进程：将HTML、CSS、JavaScript转换为用户可以与之交互的网页，排版引擎Blink与JavaScript引擎V8都运行在该进程中；Chrome会为每一个Tab标签创建一个渲染进程，并且运行在沙箱模式下</li><li>插件进程：复杂插件的运行</li></ul><p>但是这也会造成一些问题：</p><ol><li>更高的资源占用</li><li>更复杂的体系架构</li></ol><h2 id="面向服务的架构" tabindex="-1">面向服务的架构 <a class="header-anchor" href="#面向服务的架构" aria-hidden="true">#</a></h2><p>2016年，Chrome团队使用面向服务的架构（SOA, Services Oriented Architecture）的思想设计了新的Chrome架构</p><p>将原来的各种模块重构为独立的服务（Services），每个服务可以在独立的进程中运行，访问服务必须使用定义好的接口，通过IPC进行通信。</p><p>Chrome最终要把UI、数据库、文件、设备、网络等模块重构为基础服务，类似操作系统底层服务。</p><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-hidden="true">#</a></h2>',22);function C(b,f,v,S,x,g){const r=n,a=t,l=o;return s(),c("div",null,[m,e(r,{readTime:"2",words:"832"}),u,e(a),e(l)])}const $=h(p,[["render",C]]);export{V as __pageData,$ as default};
