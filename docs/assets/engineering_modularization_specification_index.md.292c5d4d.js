import{_ as o,a as p}from"./chunks/Contributors.vue_vue_type_script_setup_true_lang.2d10c1d4.js";import{_ as t}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.63457685.js";import{_ as i,o as r,c,D as n,x as s,a as d,Q as y}from"./chunks/framework.c7127555.js";import"./chunks/commonjsHelpers.725317a4.js";const E=JSON.parse('{"title":"还需要改进","description":"","frontmatter":{},"headers":[{"level":2,"title":"模块化的好处","slug":"模块化的好处","link":"#模块化的好处","children":[]},{"level":2,"title":"模块化的演变过程","slug":"模块化的演变过程","link":"#模块化的演变过程","children":[]},{"level":2,"title":"3. 模块化规范产品","slug":"_3-模块化规范产品","link":"#_3-模块化规范产品","children":[]},{"level":2,"title":"模块化规范","slug":"模块化规范","link":"#模块化规范","children":[{"level":3,"title":"CommonJS","slug":"commonjs","link":"#commonjs","children":[]},{"level":3,"title":"AMD (Asynchronous Module Definition)","slug":"amd-asynchronous-module-definition","link":"#amd-asynchronous-module-definition","children":[]},{"level":3,"title":"CMD (Common Module Definition)","slug":"cmd-common-module-definition","link":"#cmd-common-module-definition","children":[]}]},{"level":2,"title":"最佳实践","slug":"最佳实践","link":"#最佳实践","children":[]},{"level":2,"title":"Contributors","slug":"contributors","link":"#contributors","children":[]}],"relativePath":"engineering/modularization/specification/index.md","lastUpdated":1678883566000}'),u={name:"engineering/modularization/specification/index.md"},D=s("blockquote",null,[s("p",null,"把单独的一个功能封装到一个模块（文件）中，模块之间相互隔离，但是可以通过特定的接口公开内部成员，也可以以来别的模块")],-1),F=s("h2",{id:"模块化的好处",tabindex:"-1"},[d("模块化的好处 "),s("a",{class:"header-anchor",href:"#模块化的好处","aria-hidden":"true"},"#")],-1),m=y(`<ol><li>防止命名冲突</li><li>代码复用，提高效率</li><li>高维护性</li></ol><h2 id="模块化的演变过程" tabindex="-1">模块化的演变过程 <a class="header-anchor" href="#模块化的演变过程" aria-hidden="true">#</a></h2><ol><li>文件划分</li></ol><p>使用<code>&lt;script&gt;&lt;/script&gt;</code>标签来使用不同的 js 文件（完全依靠约定）</p><p>缺点：</p><ul><li>污染全局作用域</li><li>命名冲突问题</li><li>无法管理模块之间的依赖关系，需要手动管理加载顺序</li></ul><ol start="2"><li>命名空间模式</li></ol><p>将每个模块包裹成全局对象的形式</p><ol start="3"><li>立即执行函数 IIFE</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)()</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_3-模块化规范产品" tabindex="-1">3. 模块化规范产品 <a class="header-anchor" href="#_3-模块化规范产品" aria-hidden="true">#</a></h2><h2 id="模块化规范" tabindex="-1">模块化规范 <a class="header-anchor" href="#模块化规范" aria-hidden="true">#</a></h2><h3 id="commonjs" tabindex="-1">CommonJS <a class="header-anchor" href="#commonjs" aria-hidden="true">#</a></h3><p>（Node 端）</p><p>以同步模式加载模块，启动时加载模块，执行时使用模块</p><ul><li>一个文件就是一个模块</li><li>每个模块都有单独的作用域</li><li>通过 module.exports 导出成员</li><li>通过 require 函数载入模块</li></ul><p>node.js/Browserify</p><ul><li>模块分为：<code>单文件模块</code> 与 <code>包</code></li><li>模块成员导出：<code>module.exports</code> 和 <code>exports</code></li><li>模块成员导入：<code>require(&#39;模块标识符&#39;)</code></li></ul><h3 id="amd-asynchronous-module-definition" tabindex="-1">AMD (Asynchronous Module Definition) <a class="header-anchor" href="#amd-asynchronous-module-definition" aria-hidden="true">#</a></h3><p>（浏览器端） Require.js</p><p>定义模块</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 模块名，依赖项，函数</span></span>
<span class="line"><span style="color:#82AAFF;">define</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">module1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">jquery</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./module2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">$</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">module2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 导出成员</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">$</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">body</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">animate</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> margin</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">200px</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">module2</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>加载模块</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">module1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">module1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">module1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>使用起来复杂</li><li>模块 js 文件请求频繁</li></ul><h3 id="cmd-common-module-definition" tabindex="-1">CMD (Common Module Definition) <a class="header-anchor" href="#cmd-common-module-definition" aria-hidden="true">#</a></h3><p>（浏览器端）</p><p>Sea.js</p><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a></h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab970a3178a04fbc96c31a218f0255d1~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h1 id="还需要改进" tabindex="-1">还需要改进 <a class="header-anchor" href="#还需要改进" aria-hidden="true">#</a></h1><ul><li>ES Modules 存在环境兼容问题</li><li>模块文件过多，网络请求频繁</li><li>所有前端资源都需要模块化</li></ul><p>这就需要打包工具了</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/408e4f88e71349eebc4527481b3d3ea9~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>打包工具解决的是前端整体的模块化，并不单指 JavaScript 模块化</p><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-hidden="true">#</a></h2>`,36);function h(b,C,A,f,_,g){const a=t,l=o,e=p;return r(),c("div",null,[D,F,n(a,{readTime:"1",words:"480"}),m,n(l),n(e)])}const S=i(u,[["render",h]]);export{E as __pageData,S as default};
