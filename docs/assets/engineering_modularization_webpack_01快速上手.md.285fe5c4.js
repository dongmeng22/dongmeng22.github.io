import{_ as o,a as i}from"./chunks/Contributors.vue_vue_type_script_setup_true_lang.3dcd3b9e.js";import{_ as l}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.358bd1c3.js";import{_ as d,o as c,c as s,D as t,x as e,a as u,Q as p}from"./chunks/framework.c7127555.js";import"./chunks/commonjsHelpers.725317a4.js";const F=JSON.parse('{"title":"1. webpack 是什么","description":"","frontmatter":{},"headers":[{"level":2,"title":"2.1 Entry 入口","slug":"_2-1-entry-入口","link":"#_2-1-entry-入口","children":[]},{"level":2,"title":"2.2 Output 输出","slug":"_2-2-output-输出","link":"#_2-2-output-输出","children":[]},{"level":2,"title":"2.3 Loader","slug":"_2-3-loader","link":"#_2-3-loader","children":[]},{"level":2,"title":"2.4 Plugins 插件","slug":"_2-4-plugins-插件","link":"#_2-4-plugins-插件","children":[]},{"level":2,"title":"2.5 Mode 模式","slug":"_2-5-mode-模式","link":"#_2-5-mode-模式","children":[]},{"level":2,"title":"Contributors","slug":"contributors","link":"#contributors","children":[]}],"relativePath":"engineering/modularization/webpack/01快速上手.md","lastUpdated":null}'),_={name:"engineering/modularization/webpack/01快速上手.md"},h=e("p",null,[e("a",{href:"https://webpack.docschina.org/",target:"_blank",rel:"noreferrer"},"官网 https://webpack.docschina.org/")],-1),b=e("h1",{id:"_1-webpack-是什么",tabindex:"-1"},[u("1. webpack 是什么 "),e("a",{class:"header-anchor",href:"#_1-webpack-是什么","aria-hidden":"true"},"#")],-1),g=p('<ul><li><p>webpack 是一种前端资源构建工具，一个静态模块打包器(module bundler)</p></li><li><p>在webpack 看来, 前端的所有资源文件(js/json/css/img/less/...)都会作为模块处理</p></li><li><p>它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源(bundle)</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20210127111257920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk3MjAwOA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="_2-webpack-五个核心概念" tabindex="-1">2. webpack 五个核心概念 <a class="header-anchor" href="#_2-webpack-五个核心概念" aria-hidden="true">#</a></h1><h2 id="_2-1-entry-入口" tabindex="-1">2.1 Entry 入口 <a class="header-anchor" href="#_2-1-entry-入口" aria-hidden="true">#</a></h2><blockquote><p>指示 webpack 以哪个文件为入口起点开始打包，分析构建内部依赖图。</p></blockquote><h2 id="_2-2-output-输出" tabindex="-1">2.2 Output 输出 <a class="header-anchor" href="#_2-2-output-输出" aria-hidden="true">#</a></h2><blockquote><p>指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名。</p></blockquote><h2 id="_2-3-loader" tabindex="-1">2.3 Loader <a class="header-anchor" href="#_2-3-loader" aria-hidden="true">#</a></h2><blockquote><p>让 webpack 能够去处理那些非 JS 的文件，比如样式文件、图片文件(webpack 自身只理解JS)</p></blockquote><h2 id="_2-4-plugins-插件" tabindex="-1">2.4 Plugins 插件 <a class="header-anchor" href="#_2-4-plugins-插件" aria-hidden="true">#</a></h2><blockquote><p>可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等</p></blockquote><h2 id="_2-5-mode-模式" tabindex="-1">2.5 Mode 模式 <a class="header-anchor" href="#_2-5-mode-模式" aria-hidden="true">#</a></h2><blockquote><p>指示 webpack 使用相应模式的配置</p></blockquote><table><thead><tr><th>选项</th><th>描述</th><th>特点</th></tr></thead><tbody><tr><td>development</td><td>会将 DefinePlugin 中 p<wbr>rocess.env.NODE_ENV 的值设置为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin</td><td>能让代码本地调试运行的环境</td></tr><tr><td>production</td><td>会将 DefinePlugin 中 p<wbr>rocess.env.NODE_ENV 的值设置为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin</td><td>能让代码优化上线运行的环境</td></tr></tbody></table><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-hidden="true">#</a></h2>',15);function k(m,f,w,P,x,N){const a=l,r=o,n=i;return c(),s("div",null,[h,b,t(a,{readTime:"1",words:"346"}),g,t(r),t(n)])}const V=d(_,[["render",k]]);export{F as __pageData,V as default};
