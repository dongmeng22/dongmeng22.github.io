import{_ as p,a as t}from"./chunks/Contributors.vue_vue_type_script_setup_true_lang.2d10c1d4.js";import{_ as o}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.63457685.js";import{_ as r,o as c,c as i,D as s,x as a,a as d,Q as y}from"./chunks/framework.c7127555.js";import"./chunks/commonjsHelpers.725317a4.js";const x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 注册事件","slug":"_1-注册事件","link":"#_1-注册事件","children":[{"level":3,"title":"1.1 注册事件概述","slug":"_1-1-注册事件概述","link":"#_1-1-注册事件概述","children":[{"level":4,"title":"传统注册方式","slug":"传统注册方式","link":"#传统注册方式","children":[]},{"level":4,"title":"方法监听注册方式","slug":"方法监听注册方式","link":"#方法监听注册方式","children":[]}]},{"level":3,"title":"1.2 addEventListener 事件监听方式","slug":"_1-2-addeventlistener-事件监听方式","link":"#_1-2-addeventlistener-事件监听方式","children":[]},{"level":3,"title":"1.3 attachEvent 事件监听方式 IE8-","slug":"_1-3-attachevent-事件监听方式-ie8","link":"#_1-3-attachevent-事件监听方式-ie8","children":[]},{"level":3,"title":"1.4 注册事件兼容性解决方案","slug":"_1-4-注册事件兼容性解决方案","link":"#_1-4-注册事件兼容性解决方案","children":[]}]},{"level":2,"title":"2. 删除事件（解绑事件）","slug":"_2-删除事件-解绑事件","link":"#_2-删除事件-解绑事件","children":[{"level":3,"title":"2.1 删除事件的方式","slug":"_2-1-删除事件的方式","link":"#_2-1-删除事件的方式","children":[{"level":4,"title":"2.1.1 传统注册方式","slug":"_2-1-1-传统注册方式","link":"#_2-1-1-传统注册方式","children":[]},{"level":4,"title":"2.1.2 方法监听注册方式","slug":"_2-1-2-方法监听注册方式","link":"#_2-1-2-方法监听注册方式","children":[]}]},{"level":3,"title":"2.2 删除事件兼容性解决方案","slug":"_2-2-删除事件兼容性解决方案","link":"#_2-2-删除事件兼容性解决方案","children":[]}]},{"level":2,"title":"3. DOM事件流","slug":"_3-dom事件流","link":"#_3-dom事件流","children":[{"level":3,"title":"3.1 DOM 事件流分为3个阶段：","slug":"_3-1-dom-事件流分为3个阶段","link":"#_3-1-dom-事件流分为3个阶段","children":[]},{"level":3,"title":"3.2 注意","slug":"_3-2-注意","link":"#_3-2-注意","children":[]}]},{"level":2,"title":"4. 事件对象","slug":"_4-事件对象","link":"#_4-事件对象","children":[{"level":3,"title":"4.1 什么是事件对象","slug":"_4-1-什么是事件对象","link":"#_4-1-什么是事件对象","children":[]},{"level":3,"title":"4.2 事件对象的使用语法","slug":"_4-2-事件对象的使用语法","link":"#_4-2-事件对象的使用语法","children":[]},{"level":3,"title":"4.3 事件对象的兼容性方案","slug":"_4-3-事件对象的兼容性方案","link":"#_4-3-事件对象的兼容性方案","children":[]},{"level":3,"title":"4.4 事件对象的常见属性和方法","slug":"_4-4-事件对象的常见属性和方法","link":"#_4-4-事件对象的常见属性和方法","children":[]}]},{"level":2,"title":"5. 阻止事件冒泡","slug":"_5-阻止事件冒泡","link":"#_5-阻止事件冒泡","children":[{"level":3,"title":"5.1 阻止事件冒泡的两种方式","slug":"_5-1-阻止事件冒泡的两种方式","link":"#_5-1-阻止事件冒泡的两种方式","children":[]},{"level":3,"title":"5.2 阻止事件冒泡的兼容性解决方案","slug":"_5-2-阻止事件冒泡的兼容性解决方案","link":"#_5-2-阻止事件冒泡的兼容性解决方案","children":[]}]},{"level":2,"title":"6. 事件委托（代理、委派）","slug":"_6-事件委托-代理、委派","link":"#_6-事件委托-代理、委派","children":[{"level":3,"title":"事件委托","slug":"事件委托","link":"#事件委托","children":[]},{"level":3,"title":"事件委托的原理","slug":"事件委托的原理","link":"#事件委托的原理","children":[]},{"level":3,"title":"事件委托的作用","slug":"事件委托的作用","link":"#事件委托的作用","children":[]}]},{"level":2,"title":"7. 常用的鼠标事件","slug":"_7-常用的鼠标事件","link":"#_7-常用的鼠标事件","children":[{"level":3,"title":"7.1 常用的鼠标事件","slug":"_7-1-常用的鼠标事件","link":"#_7-1-常用的鼠标事件","children":[{"level":4,"title":"7.1.1 禁止鼠标右键菜单","slug":"_7-1-1-禁止鼠标右键菜单","link":"#_7-1-1-禁止鼠标右键菜单","children":[]},{"level":4,"title":"7.1.2 禁止鼠标选中（selectstart 开始选中）","slug":"_7-1-2-禁止鼠标选中-selectstart-开始选中","link":"#_7-1-2-禁止鼠标选中-selectstart-开始选中","children":[]}]},{"level":3,"title":"7.2 鼠标事件对象","slug":"_7-2-鼠标事件对象","link":"#_7-2-鼠标事件对象","children":[]}]},{"level":2,"title":"8. 常用的键盘事件","slug":"_8-常用的键盘事件","link":"#_8-常用的键盘事件","children":[{"level":3,"title":"8.1 常用键盘事件","slug":"_8-1-常用键盘事件","link":"#_8-1-常用键盘事件","children":[]},{"level":3,"title":"8.2 键盘事件对象","slug":"_8-2-键盘事件对象","link":"#_8-2-键盘事件对象","children":[]}]},{"level":2,"title":"Contributors","slug":"contributors","link":"#contributors","children":[]}],"relativePath":"basics/javascript/08DOM-2.md","lastUpdated":1678883566000}'),D={name:"basics/javascript/08DOM-2.md"},F=a("h2",{id:"_1-注册事件",tabindex:"-1"},[d("1. 注册事件 "),a("a",{class:"header-anchor",href:"#_1-注册事件","aria-hidden":"true"},"#")],-1),h=y(`<h3 id="_1-1-注册事件概述" tabindex="-1">1.1 注册事件概述 <a class="header-anchor" href="#_1-1-注册事件概述" aria-hidden="true">#</a></h3><p>给元素添加事件，称为注册事件或者绑定事件。 注册事件有两种方式：传统方式和方法监听注册方式</p><h4 id="传统注册方式" tabindex="-1">传统注册方式 <a class="header-anchor" href="#传统注册方式" aria-hidden="true">#</a></h4><ul><li>利用 on 开头的事件 onclick</li><li><code>&lt;button onclick=“alert(&#39;hi~&#39;)”&gt;&lt;/button&gt;</code></li><li><code>btn.onclick = function() {} </code></li><li>特点： 注册事件的唯一性</li><li>同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</li></ul><h4 id="方法监听注册方式" tabindex="-1">方法监听注册方式 <a class="header-anchor" href="#方法监听注册方式" aria-hidden="true">#</a></h4><ul><li>w3c 标准 推荐方式</li><li>addEventListener() 它是一个方法</li><li>IE9 之前的 IE 不支持此方法，可使用 attachEvent() 代替</li><li>特点：同一个元素同一个事件可以注册多个监听器</li><li>按注册顺序依次执行</li></ul><h3 id="_1-2-addeventlistener-事件监听方式" tabindex="-1">1.2 addEventListener 事件监听方式 <a class="header-anchor" href="#_1-2-addeventlistener-事件监听方式" aria-hidden="true">#</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> eventTarget</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(type</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> listener[</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> useCapture])  </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>eventTarget.addEventListener()方法将指定的监听器注册到 eventTarget（目标对象）上，当该对象触发指定的事件时，就会执行事件处理函数。</li><li>该方法接收三个参数：</li></ul><ol><li>type：事件类型<strong>字符串</strong>，比如 click 、mouseover ，注意这里不要带 on</li><li>listener：事件处理函数，事件发生时，会调用该监听函数</li><li>useCapture：可选参数，是一个布尔值，默认是 false。学完 DOM 事件流后，我们再进一步学习</li></ol><ul><li>同一个元素 同一个事件可以添加多个侦听器（事件处理程序）</li></ul><h3 id="_1-3-attachevent-事件监听方式-ie8" tabindex="-1">1.3 attachEvent 事件监听方式 IE8- <a class="header-anchor" href="#_1-3-attachevent-事件监听方式-ie8" aria-hidden="true">#</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> eventTarget</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">attachEvent</span><span style="color:#A6ACCD;">(eventNameWithOn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback) </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>eventTarget.attachEvent()方法将指定的监听器注册到 eventTarget（目标对象） 上，当该对象触发指定的事件时，指定的回调函数就会被执行。</li><li>该方法接收两个参数：</li></ul><ol><li>eventNameWithOn：事件类型字符串，比如 onclick 、onmouseover ，这里要带 on</li><li>callback： 事件处理函数，当目标触发事件时回调函数被调用</li></ol><ul><li>注意：IE8 及早期版本支持</li></ul><h3 id="_1-4-注册事件兼容性解决方案" tabindex="-1">1.4 注册事件兼容性解决方案 <a class="header-anchor" href="#_1-4-注册事件兼容性解决方案" aria-hidden="true">#</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">addEventListener</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">element</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">eventName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">fn</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 判断当前浏览器是否支持 addEventListener 方法</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">addEventListener</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">eventName</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">// 第三个参数 默认是false</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">attachEvent</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">attachEvent</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">on</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">eventName</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 相当于 element.onclick = fn;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">element</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">on</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">eventName</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>兼容性处理的原则： 首先照顾大多数浏览器，再处理特殊浏览器</li></ul><h2 id="_2-删除事件-解绑事件" tabindex="-1">2. 删除事件（解绑事件） <a class="header-anchor" href="#_2-删除事件-解绑事件" aria-hidden="true">#</a></h2><h3 id="_2-1-删除事件的方式" tabindex="-1">2.1 删除事件的方式 <a class="header-anchor" href="#_2-1-删除事件的方式" aria-hidden="true">#</a></h3><h4 id="_2-1-1-传统注册方式" tabindex="-1">2.1.1 传统注册方式 <a class="header-anchor" href="#_2-1-1-传统注册方式" aria-hidden="true">#</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">eventTarget</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">onclick </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_2-1-2-方法监听注册方式" tabindex="-1">2.1.2 方法监听注册方式 <a class="header-anchor" href="#_2-1-2-方法监听注册方式" aria-hidden="true">#</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">eventTarget</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeEventListener</span><span style="color:#A6ACCD;">(type</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> listener[</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> useCapture])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">eventTarget</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">detachEvent</span><span style="color:#A6ACCD;">(eventNameWithOn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-2-删除事件兼容性解决方案" tabindex="-1">2.2 删除事件兼容性解决方案 <a class="header-anchor" href="#_2-2-删除事件兼容性解决方案" aria-hidden="true">#</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">removeEventListener</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">element</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">eventName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">fn</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 判断当前浏览器是否支持 removeEventListener 方法</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">removeEventListener</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeEventListener</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">eventName</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">// 第三个参数 默认是false</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">detachEvent</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">detachEvent</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">on</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">eventName</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">element</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">on</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">eventName</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="_3-dom事件流" tabindex="-1">3. DOM事件流 <a class="header-anchor" href="#_3-dom事件流" aria-hidden="true">#</a></h2><ul><li>事件流描述的是从页面中接收事件的顺序。</li><li>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即 DOM 事件流。</li><li>比如我们给一个div 注册了点击事件：</li></ul><h3 id="_3-1-dom-事件流分为3个阶段" tabindex="-1">3.1 DOM 事件流分为3个阶段： <a class="header-anchor" href="#_3-1-dom-事件流分为3个阶段" aria-hidden="true">#</a></h3><ol><li>捕获阶段</li><li>当前目标阶段</li><li>冒泡阶段 <img src="https://img-blog.csdnimg.cn/img_convert/f0b44260621f0f25a1c7006e324a5353.png" alt="image"></li></ol><ul><li><p>事件冒泡： IE 最早提出，事件开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点的过程。</p></li><li><p>事件捕获： 网景最早提出，由 DOM 最顶层节点开始，然后逐级向下传播到到最具体的元素接收的过程。</p></li><li><p>我们向水里面扔一块石头，首先它会有一个下降的过程，这个过程就可以理解为从最顶层向事件发生的最具体元素（目标点）的捕获过程；之后会产生泡泡，会在最低点（ 最具体元素）之后漂浮到水面上，这个过程相当于事件冒泡。</p></li><li><p>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即 DOM 事件流。</p></li></ul><h3 id="_3-2-注意" tabindex="-1">3.2 注意 <a class="header-anchor" href="#_3-2-注意" aria-hidden="true">#</a></h3><ol><li>JS 代码中只能执行捕获或者冒泡其中的一个阶段。</li><li>onclick 和 attachEvent 只能得到冒泡阶段。</li><li>addEventListener(type, listener[, useCapture])第三个参数如果是 true，表示在事件捕获阶段调用事件处理程序；如果是 false（不写默认就是false），表示在事件冒泡阶段调用事件处理程序。</li><li>实际开发中我们很少使用事件捕获，我们更关注事件冒泡。</li><li>有些事件是没有冒泡的，比如 onblur、onfocus、onmouseenter、onmouseleave</li><li>事件冒泡有时候会带来麻烦，有时候又会帮助很巧妙的做某些事件，我们后面讲解。</li></ol><h2 id="_4-事件对象" tabindex="-1">4. 事件对象 <a class="header-anchor" href="#_4-事件对象" aria-hidden="true">#</a></h2><h3 id="_4-1-什么是事件对象" tabindex="-1">4.1 什么是事件对象 <a class="header-anchor" href="#_4-1-什么是事件对象" aria-hidden="true">#</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">  eventTarget</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onclick</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  eventTarget</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">）</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 这个 event 就是事件对象，我们还喜欢的写成 e 或者 evt </span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>官方解释：event 对象代表事件的状态，比如键盘按键的状态、鼠标的位置、鼠标按钮的状态。</li><li>简单理解：事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面，这个对象就是事件对象 event，它有很多属性和方法。</li><li>比如：</li></ul><ol><li>谁绑定了这个事件。</li><li>鼠标触发事件的话，会得到鼠标的相关信息，如鼠标位置。</li><li>键盘触发事件的话，会得到键盘的相关信息，如按了哪个键。</li></ol><h3 id="_4-2-事件对象的使用语法" tabindex="-1">4.2 事件对象的使用语法 <a class="header-anchor" href="#_4-2-事件对象的使用语法" aria-hidden="true">#</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">  eventTarget</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onclick</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">// 这个 event 就是事件对象，我们还喜欢的写成 e 或者 evt </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  eventTarget</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 这个 event 就是事件对象，我们还喜欢的写成 e 或者 evt </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">）</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>这个 event 是个形参，系统帮我们设定为事件对象，不需要传递实参过去。</li><li>当我们注册事件时， event 对象就会被系统自动创建，并依次传递给事件监听器（事件处理函数）。</li></ul><h3 id="_4-3-事件对象的兼容性方案" tabindex="-1">4.3 事件对象的兼容性方案 <a class="header-anchor" href="#_4-3-事件对象的兼容性方案" aria-hidden="true">#</a></h3><ul><li>事件对象本身的获取存在兼容问题：</li></ul><ol><li>标准浏览器中是浏览器给方法传递的参数，只需要定义形参 e 就可以获取到。</li><li>在 IE6~8 中，浏览器不会给方法传递参数，如果需要的话，需要到 window.event 中获取查找。</li></ol><ul><li>解决: e = e || window.event;</li></ul><h3 id="_4-4-事件对象的常见属性和方法" tabindex="-1">4.4 事件对象的常见属性和方法 <a class="header-anchor" href="#_4-4-事件对象的常见属性和方法" aria-hidden="true">#</a></h3><table><thead><tr><th>事件对象属性方法</th><th>说明</th></tr></thead><tbody><tr><td>e.target</td><td>返回触发事件的对象（标准）</td></tr><tr><td>e.srcElement</td><td>返回触发事件的对象（非标准 ie678）</td></tr><tr><td>e.type</td><td>返回事件的类型</td></tr><tr><td>e.cancelBubble</td><td>该属性组织冒泡（非标准 ie678）</td></tr><tr><td>e.returnValue</td><td>该属性阻止默认事件（默认行为） 非标准</td></tr><tr><td>e.preventDefault()</td><td>该属性阻止默认事件（默认行为） 标准</td></tr><tr><td>e.stopPropagation()</td><td>阻止冒泡 标准</td></tr></tbody></table><ul><li>e.target 和 this 的区别：</li><li>this 是事件绑定的元素， 这个函数的调用者（绑定这个事件的元素）</li><li>e.target 是事件触发的元素。</li></ul><h2 id="_5-阻止事件冒泡" tabindex="-1">5. 阻止事件冒泡 <a class="header-anchor" href="#_5-阻止事件冒泡" aria-hidden="true">#</a></h2><h3 id="_5-1-阻止事件冒泡的两种方式" tabindex="-1">5.1 阻止事件冒泡的两种方式 <a class="header-anchor" href="#_5-1-阻止事件冒泡的两种方式" aria-hidden="true">#</a></h3><ul><li><p>事件冒泡：开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点。</p></li><li><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处，需要我们灵活掌握。</p></li><li><p>阻止事件冒泡</p></li><li><p>标准写法：利用事件对象里面的 stopPropagation()方法</p></li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stopPropagation</span><span style="color:#A6ACCD;">() </span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>非标准写法：IE 6-8 利用事件对象 cancelBubble 属性</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cancelBubble </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_5-2-阻止事件冒泡的兼容性解决方案" tabindex="-1">5.2 阻止事件冒泡的兼容性解决方案 <a class="header-anchor" href="#_5-2-阻止事件冒泡的兼容性解决方案" aria-hidden="true">#</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(e </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">stopPropagation)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stopPropagation</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cancelBubble</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_6-事件委托-代理、委派" tabindex="-1">6. 事件委托（代理、委派） <a class="header-anchor" href="#_6-事件委托-代理、委派" aria-hidden="true">#</a></h2><ul><li><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处，需要我们灵活掌握。</p></li><li><p>生活中有如下场景：</p></li><li><p>咱们班有100个学生， 快递员有100个快递，如果一个个的送花费时间较长。同时每个学生领取的时候，也需要排队领取，也花费时间较长，何如？</p></li><li><p>解决方案： 快递员把100个快递，委托给班主任，班主任把这些快递放到办公室，同学们下课自行领取即可。</p></li><li><p>优势： 快递员省事，委托给班主任就可以走了。 同学们领取也方便，因为相信班主任。</p></li></ul><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">知否知否，应该有弹框在手</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">知否知否，应该有弹框在手</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">知否知否，应该有弹框在手</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">知否知否，应该有弹框在手</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">知否知否，应该有弹框在手</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>点击每个 li 都会弹出对话框，以前需要给每个 li 注册事件，是非常辛苦的，而且访问 DOM 的次数越多，这就会延长整个页面的交互就绪时间。</li></ul><h3 id="事件委托" tabindex="-1">事件委托 <a class="header-anchor" href="#事件委托" aria-hidden="true">#</a></h3><ul><li>事件委托也称为事件代理， 在 jQuery 里面称为事件委派。</li></ul><h3 id="事件委托的原理" tabindex="-1">事件委托的原理 <a class="header-anchor" href="#事件委托的原理" aria-hidden="true">#</a></h3><p>不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点。</p><ul><li>以上案例：给 ul 注册点击事件，然后利用事件对象的 target 来找到当前点击的 li，因为点击 li，事件会冒泡到 ul 上， ul 有注册事件，就会触发事件监听器。</li></ul><h3 id="事件委托的作用" tabindex="-1">事件委托的作用 <a class="header-anchor" href="#事件委托的作用" aria-hidden="true">#</a></h3><p>我们只操作了一次 DOM ，提高了程序的性能。</p><h2 id="_7-常用的鼠标事件" tabindex="-1">7. 常用的鼠标事件 <a class="header-anchor" href="#_7-常用的鼠标事件" aria-hidden="true">#</a></h2><h3 id="_7-1-常用的鼠标事件" tabindex="-1">7.1 常用的鼠标事件 <a class="header-anchor" href="#_7-1-常用的鼠标事件" aria-hidden="true">#</a></h3><table><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmoouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedowm</td><td>鼠标按下触发</td></tr></tbody></table><h4 id="_7-1-1-禁止鼠标右键菜单" tabindex="-1">7.1.1 禁止鼠标右键菜单 <a class="header-anchor" href="#_7-1-1-禁止鼠标右键菜单" aria-hidden="true">#</a></h4><ul><li>contextmenu主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">contextmenu</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">preventDefault</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_7-1-2-禁止鼠标选中-selectstart-开始选中" tabindex="-1">7.1.2 禁止鼠标选中（selectstart 开始选中） <a class="header-anchor" href="#_7-1-2-禁止鼠标选中-selectstart-开始选中" aria-hidden="true">#</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">   document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">selectstart</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">preventDefault</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_7-2-鼠标事件对象" tabindex="-1">7.2 鼠标事件对象 <a class="header-anchor" href="#_7-2-鼠标事件对象" aria-hidden="true">#</a></h3><ul><li>event对象代表事件的状态，跟事件相关的一系列信息的集合。</li><li>现阶段我们主要是用鼠标事件对象 MouseEvent 和键盘事件对象 KeyboardEvent。</li></ul><table><thead><tr><th>鼠标事件对象</th><th>说明</th></tr></thead><tbody><tr><td>e.clientX</td><td>返回鼠标相对于浏览器窗口可视区的X坐标</td></tr><tr><td>e.clientY</td><td>返回鼠标相对于浏览器窗口可视区的Y坐标</td></tr><tr><td>e.pageX</td><td>返回鼠标相对于文档页面的X坐标 IE9+</td></tr><tr><td>e.pageY</td><td>返回鼠标相对于文档页面的Y坐标 IE9+</td></tr><tr><td>e.screenX</td><td>返回鼠标相对于电脑屏幕的X坐标</td></tr><tr><td>e.screenY</td><td>返回鼠标相对于电脑屏幕的Y坐标</td></tr></tbody></table><h2 id="_8-常用的键盘事件" tabindex="-1">8. 常用的键盘事件 <a class="header-anchor" href="#_8-常用的键盘事件" aria-hidden="true">#</a></h2><h3 id="_8-1-常用键盘事件" tabindex="-1">8.1 常用键盘事件 <a class="header-anchor" href="#_8-1-常用键盘事件" aria-hidden="true">#</a></h3><ul><li>事件除了使用鼠标触发，还可以使用键盘触发。</li></ul><table><thead><tr><th>键盘事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onkeyup</td><td>某个键盘按键被松开时触发</td></tr><tr><td>onkeydown</td><td>某个键盘按键被按下时触发</td></tr><tr><td>onkeypress</td><td>某个键盘按键被按下时触发（不识别功能键:ctrl，shift，箭头等）</td></tr></tbody></table><ul><li>注意</li></ul><ol><li>如果使用addEventListener 不需要加 on</li><li>onkeypress 和前面2个的区别是，它不识别功能键，比如左右箭头，shift 等。</li><li>三个事件的执行顺序是： keydown -- keypress --- keyup</li></ol><h3 id="_8-2-键盘事件对象" tabindex="-1">8.2 键盘事件对象 <a class="header-anchor" href="#_8-2-键盘事件对象" aria-hidden="true">#</a></h3><ul><li><p>KeyCode 返回该键的ASCII值</p></li><li><p>onkeydown 和 onkeyup 不区分字母大小写，onkeypress 区分字母大小写。</p></li><li><p>在我们实际开发中，我们更多的使用keydown和keyup， 它能识别所有的键（包括功能键）</p></li><li><p>Keypress 不识别功能键，但是keyCode属性能区分大小写，返回不同的ASCII值</p></li></ul><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-hidden="true">#</a></h2>`,88);function u(C,A,b,v,m,_){const n=o,l=p,e=t;return c(),i("div",null,[F,s(n,{readTime:"9",words:"2.9k"}),h,s(l),s(e)])}const j=r(D,[["render",u]]);export{x as __pageData,j as default};
