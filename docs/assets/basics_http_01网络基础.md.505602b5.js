import{_ as c,a as p}from"./chunks/Contributors.vue_vue_type_script_setup_true_lang.3dcd3b9e.js";import{_ as d}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.b6ca37c5.js";import{_ as h,o as u,c as _,D as i,z as t,x as e,a as n,Q as a,B as b}from"./chunks/framework.c7127555.js";import"./chunks/commonjsHelpers.725317a4.js";const L=JSON.parse('{"title":"1. 使用HTTP协议访问Web","description":"","frontmatter":{},"headers":[{"level":2,"title":"2.1 规划","slug":"_2-1-规划","link":"#_2-1-规划","children":[]},{"level":2,"title":"2.2 成长","slug":"_2-2-成长","link":"#_2-2-成长","children":[]},{"level":2,"title":"3.1 TCP/IP协议族","slug":"_3-1-tcp-ip协议族","link":"#_3-1-tcp-ip协议族","children":[]},{"level":2,"title":"3.2 TCP/IP的分层管理","slug":"_3-2-tcp-ip的分层管理","link":"#_3-2-tcp-ip的分层管理","children":[{"level":3,"title":"3.2.1 应用层","slug":"_3-2-1-应用层","link":"#_3-2-1-应用层","children":[]},{"level":3,"title":"3.2.2 传输层","slug":"_3-2-2-传输层","link":"#_3-2-2-传输层","children":[]},{"level":3,"title":"3.2.3 网络层（网络互连层）","slug":"_3-2-3-网络层-网络互连层","link":"#_3-2-3-网络层-网络互连层","children":[]},{"level":3,"title":"3.2.4 链路层（数据链路层、网络接口层）","slug":"_3-2-4-链路层-数据链路层、网络接口层","link":"#_3-2-4-链路层-数据链路层、网络接口层","children":[]}]},{"level":2,"title":"3.3 TCP/IP通信传输流","slug":"_3-3-tcp-ip通信传输流","link":"#_3-3-tcp-ip通信传输流","children":[]},{"level":2,"title":"4.1 负责传输的 IP(Internet Protocol) 协议","slug":"_4-1-负责传输的-ip-internet-protocol-协议","link":"#_4-1-负责传输的-ip-internet-protocol-协议","children":[]},{"level":2,"title":"4.2 确保可靠性的 TCP 协议","slug":"_4-2-确保可靠性的-tcp-协议","link":"#_4-2-确保可靠性的-tcp-协议","children":[]},{"level":2,"title":"4.3 负责域名解析的DNS服务","slug":"_4-3-负责域名解析的dns服务","link":"#_4-3-负责域名解析的dns服务","children":[]},{"level":2,"title":"6.1 URI统一资源标识符Uniform Resource Identifier","slug":"_6-1-uri统一资源标识符uniform-resource-identifier","link":"#_6-1-uri统一资源标识符uniform-resource-identifier","children":[{"level":3,"title":"6.1.1 Uniform","slug":"_6-1-1-uniform","link":"#_6-1-1-uniform","children":[]},{"level":3,"title":"6.1.2 Resource","slug":"_6-1-2-resource","link":"#_6-1-2-resource","children":[]},{"level":3,"title":"6.1.3 Identifier","slug":"_6-1-3-identifier","link":"#_6-1-3-identifier","children":[]}]},{"level":2,"title":"6.2 URI格式","slug":"_6-2-uri格式","link":"#_6-2-uri格式","children":[{"level":3,"title":"6.2.1 登录信息（认证）","slug":"_6-2-1-登录信息-认证","link":"#_6-2-1-登录信息-认证","children":[]},{"level":3,"title":"6.2.2 服务器地址","slug":"_6-2-2-服务器地址","link":"#_6-2-2-服务器地址","children":[]},{"level":3,"title":"6.2.3 服务器端口号","slug":"_6-2-3-服务器端口号","link":"#_6-2-3-服务器端口号","children":[]},{"level":3,"title":"6.2.4 带层次的文件路径","slug":"_6-2-4-带层次的文件路径","link":"#_6-2-4-带层次的文件路径","children":[]},{"level":3,"title":"6.2.5 查询字符串","slug":"_6-2-5-查询字符串","link":"#_6-2-5-查询字符串","children":[]},{"level":3,"title":"6.2.6 片段标识符","slug":"_6-2-6-片段标识符","link":"#_6-2-6-片段标识符","children":[]}]},{"level":2,"title":"Contributors","slug":"contributors","link":"#contributors","children":[]}],"relativePath":"basics/http/01网络基础.md","lastUpdated":1678883566000}'),g={name:"basics/http/01网络基础.md"},m=e("p",null,[e("img",{src:"https://img-blog.csdnimg.cn/img_convert/2a4860b52bb7dbc0d0a0f204a01464d6.png",alt:"image"})],-1),f=e("h1",{id:"_1-使用http协议访问web",tabindex:"-1"},[n("1. 使用HTTP协议访问Web "),e("a",{class:"header-anchor",href:"#_1-使用http协议访问web","aria-hidden":"true"},"#")],-1),P=e("p",null,"【问】当我们在网页浏览器（Web browser）的地址栏中输入URL时，Web页面是如何呈现的？",-1),T=e("p",null,"【答】根据Web浏览器地址栏中指定的URL,Web浏览器从Web服务器端获取文件资源（resource）等信息，从而显示出Web页面",-1),k=e("p",null,[e("img",{src:"https://img-blog.csdnimg.cn/img_convert/4d8e463c666539577af76abeb0ccbe0d.png",alt:"image"})],-1),C=e("ul",null,[e("li",null,"Web使用一种名为HTTP（HyperText Transfer Protocol，超文本传输协议）的协议作为规范，完成从客户端到服务器端等一系列运作流程。而协议是指规则的约定。")],-1),I=e("strong",null,"可以说，Web是建立在HTTP协议上通信的",-1),A=a('<h1 id="_2-http的诞生" tabindex="-1">2. HTTP的诞生 <a class="header-anchor" href="#_2-http的诞生" aria-hidden="true">#</a></h1><h2 id="_2-1-规划" tabindex="-1">2.1 规划 <a class="header-anchor" href="#_2-1-规划" aria-hidden="true">#</a></h2><ul><li>最初设想的基本理念是:</li></ul><blockquote><p>借助多文档之间相互关联形成的超文本（HyperText），连成可相互参阅的WWW（World Wide Web，万维网）</p></blockquote><ul><li>现在已提出了3项WWW构建技术，分别是：</li></ul><ol><li>把SGML（Standard Generalized Markup Language，标准通用标记语言）作为页面的文本标记语言的<strong>HTML</strong>（HyperText Markup Language，超文本标记语言）</li><li>作为文档传递协议的<strong>HTTP</strong></li><li>指定文档所在地址的<strong>URL</strong>（Uniform Resource Locator，统一资源定位符）</li></ol><h2 id="_2-2-成长" tabindex="-1">2.2 成长 <a class="header-anchor" href="#_2-2-成长" aria-hidden="true">#</a></h2><ul><li>HTTP/0.9 1990年</li><li>HTTP/1.0 1996年5月</li><li>HTTP/1.1 1997年1月 是目前主流的HTTP协议版本</li></ul><h1 id="_3-网络基础tcp-ip" tabindex="-1">3. 网络基础TCP/IP <a class="header-anchor" href="#_3-网络基础tcp-ip" aria-hidden="true">#</a></h1><blockquote><p>通常使用的网络（包括互联网）是在TCP/IP协议族的基础上运作的。而HTTP属于它内部的一个子集</p></blockquote><h2 id="_3-1-tcp-ip协议族" tabindex="-1">3.1 TCP/IP协议族 <a class="header-anchor" href="#_3-1-tcp-ip协议族" aria-hidden="true">#</a></h2>',11),v=a(`<p><img src="https://img-blog.csdnimg.cn/img_convert/54d2bfdb16e778920cfa8be6408dce85.png" alt="image"></p><h2 id="_3-2-tcp-ip的分层管理" tabindex="-1">3.2 TCP/IP的分层管理 <a class="header-anchor" href="#_3-2-tcp-ip的分层管理" aria-hidden="true">#</a></h2><blockquote><p>TCP/IP协议族按层次分别分为以下4层：应用层、传输层、网络层和数据链路层</p></blockquote><p>好处：把各层之间的接口部分规划好之后，每个层次内部的设计就能够自由改动了</p><h3 id="_3-2-1-应用层" tabindex="-1">3.2.1 应用层 <a class="header-anchor" href="#_3-2-1-应用层" aria-hidden="true">#</a></h3><blockquote><p>应用层决定了向用户提供应用服务时通信的活动</p></blockquote><p>TCP/IP协议族内预存了各类通用的应用服务</p><p>比如，<strong>FTP</strong>（File Transfer Protocol，文件传输协议）和<strong>DNS</strong>（Domain Name System，域名系统）服务就是其中两类。</p><p>HTTP协议也处于该层</p><h3 id="_3-2-2-传输层" tabindex="-1">3.2.2 传输层 <a class="header-anchor" href="#_3-2-2-传输层" aria-hidden="true">#</a></h3><blockquote><p>传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输</p></blockquote><p>在传输层有两个性质不同的协议：<strong>TCP</strong>（Transmission Control Protocol，传输控制协议）和<strong>UDP</strong>（User Data Protocol，用户数据报协议）</p><h3 id="_3-2-3-网络层-网络互连层" tabindex="-1">3.2.3 网络层（网络互连层） <a class="header-anchor" href="#_3-2-3-网络层-网络互连层" aria-hidden="true">#</a></h3><blockquote><p>网络层用来处理在网络上流动的数据包</p></blockquote><p>数据包是网络传输的最小数据单位。该层规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方</p><p>与对方计算机之间通过多台计算机或网络设备进行传输时，网络层所起的作用就是在众多的选项内选择一条传输路线</p><h3 id="_3-2-4-链路层-数据链路层、网络接口层" tabindex="-1">3.2.4 链路层（数据链路层、网络接口层） <a class="header-anchor" href="#_3-2-4-链路层-数据链路层、网络接口层" aria-hidden="true">#</a></h3><blockquote><p>用来处理连接网络的硬件部分</p></blockquote><p>包括控制操作系统、硬件的设备驱动、NIC（Network Interface Card，网络适配器，即网卡），及光纤等物理可见部分（还包括连接器等一切传输媒介）</p><p>硬件上的范畴均在链路层的作用范围之内</p><h2 id="_3-3-tcp-ip通信传输流" tabindex="-1">3.3 TCP/IP通信传输流 <a class="header-anchor" href="#_3-3-tcp-ip通信传输流" aria-hidden="true">#</a></h2><p><img src="https://img-blog.csdnimg.cn/img_convert/126f9c07d0d7ecd5b759b89fee96f183.png" alt="image"></p><ul><li>用HTTP举例来说明</li></ul><ol><li>首先作为发送端的<strong>客户端</strong>在==应用层==（HTTP协议）<strong>发出</strong>一个想看某个Web页面的HTTP<strong>请求</strong></li><li>为了传输方便，在==传输层==（TCP协议）把从应用层处收到的数据（HTTP请求报文）进行<strong>分割</strong>，并在各个报文上打上<strong>标记序号</strong>及<strong>端口号</strong>后<strong>转发</strong>给==网络层==。</li><li>在==网络层==（IP协议），增加作为通信目的地的<strong>MAC地址</strong>后转发给==链路层==</li><li>接收端的<strong>服务器</strong>在==链路层==接收到数据，按序往上层发送，一直到==应用层==</li><li>当传输到==应用层==，才能算真正接收到由客户端发送过来的HTTP请求</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/08093055e69cac443eb8827527eddc35.png" alt="image"></p><ul><li>发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该层所属的<strong>首部信息</strong></li><li>反之，接收端在层与层传输数据时，每经过一层时会把对应的首部消去</li></ul><blockquote><p>这种把数据信息包装起来的做法称为<strong>封装</strong>（encapsulate）</p></blockquote><h1 id="_4-与http关系密切的协议-ip、tcp、dns" tabindex="-1">4. 与HTTP关系密切的协议：IP、TCP、DNS <a class="header-anchor" href="#_4-与http关系密切的协议-ip、tcp、dns" aria-hidden="true">#</a></h1><h2 id="_4-1-负责传输的-ip-internet-protocol-协议" tabindex="-1">4.1 负责传输的 IP(Internet Protocol) 协议 <a class="header-anchor" href="#_4-1-负责传输的-ip-internet-protocol-协议" aria-hidden="true">#</a></h2><p>按层次分，IP（Internet Protocol）网际协议位于==网络层==</p><blockquote><p>IP协议的作用是把各种数据包传送给对方。而要保证确实传送到对方那里，则需要满足各类条件。其中两个重要的条件是<strong>IP地址</strong>和<strong>MAC地址</strong>（Media Access Control Address）</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/ec33bdc4811619beaac9ec7decfaebaf.png" alt="image"></p><ul><li>IP与MAC</li></ul><ol><li>IP地址指明了节点被分配到的地址，MAC地址是指网卡所属的固定地址</li><li>IP地址可以和MAC地址进行配对</li><li>IP地址可变换，但MAC地址基本上不会更改</li></ol><blockquote><p>使用ARP协议凭借MAC地址进行通信</p></blockquote><ul><li>IP间的通信依赖MAC地址</li><li>在网络上进行中转时，会利用下一站中转设备的MAC地址来搜索下一个中转目标</li><li>会采用ARP协议（Address Resolution Protocol）</li><li>ARP是一种用以解析地址的协议，根据通信方的IP地址就可以反查出对应的MAC地址</li></ul><blockquote><p>没有人能够全面掌握互联网中的传输状况</p></blockquote><p>在到达通信目标前的中转过程中，那些计算机和路由器等网络设备只能获悉很粗略的传输路线。这种机制称为路由选择（routing）</p><h2 id="_4-2-确保可靠性的-tcp-协议" tabindex="-1">4.2 确保可靠性的 TCP 协议 <a class="header-anchor" href="#_4-2-确保可靠性的-tcp-协议" aria-hidden="true">#</a></h2><p>按层次分，TCP位于==传输层==，提供<strong>可靠</strong>的<strong>字节流</strong>服务</p><blockquote><p>字节流服务（Byte Stream Service）是指为了方便传输，将大块数据分割成以报文段（segment）为单位的数据包进行管理。而可靠的传输服务是指，能够把数据准确可靠地传给对方。</p></blockquote><p>TCP协议为了更容易传送大数据才把数据分割，而且TCP协议能够确认数据最终是否送达到对方</p><p>确保数据能到达目标——==三次握手==</p><blockquote><p>为了准确无误地将数据送达目标处，TCP协议采用了三次握手（three-way handshaking）策略</p></blockquote><ul><li>用TCP协议把数据包送出去后，TCP不会对传送后的情况置之不理，它一定会向对方确认是否成功送达</li><li>握手过程中使用了TCP的标志（flag）——SYN（synchronize）和ACK（acknowledgement）</li></ul><ol><li>发送端首先发送一个带SYN标志的数据包给对方</li><li>接收端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息</li><li>最后，发送端再回传一个带ACK标志的数据包，代表“握手”结束</li></ol><ul><li>若在握手过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/bd4f3c03838a1175f488ae9ad54e228c.png" alt="image"></p><ul><li>除了上述三次握手，TCP协议还有其他各种手段来保证通信的可靠性</li></ul><h2 id="_4-3-负责域名解析的dns服务" tabindex="-1">4.3 负责域名解析的DNS服务 <a class="header-anchor" href="#_4-3-负责域名解析的dns服务" aria-hidden="true">#</a></h2><blockquote><p>DNS（Domain Name System）服务是和HTTP协议一样位于应用层的协议。它提供域名到IP地址之间的解析服务。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/3881efdb0cf6a8bbec22ae8a00f82bcc.png" alt="image"></p><ul><li>计算机既可以被赋予IP地址，也可以被赋予主机名和域名</li><li>用户通常使用主机名或域名来访问对方的计算机，而不是直接通过IP地址访问</li></ul><blockquote><p>DNS协议提供通过域名查找IP地址，或逆向从IP地址反查域名的服务</p></blockquote><h1 id="_5-各种协议与http协议的关系" tabindex="-1">5. 各种协议与HTTP协议的关系 <a class="header-anchor" href="#_5-各种协议与http协议的关系" aria-hidden="true">#</a></h1><p><img src="https://img-blog.csdnimg.cn/img_convert/b09cdef447b3b07e29c9b3bcb9e7c799.png" alt="image"></p><h1 id="_6-uri和url" tabindex="-1">6. URI和URL <a class="header-anchor" href="#_6-uri和url" aria-hidden="true">#</a></h1><p>URL（Uniform Resource Locator，统一资源定位符)是使用Web浏览器等访问Web页面时需要输入的网页地址</p><h2 id="_6-1-uri统一资源标识符uniform-resource-identifier" tabindex="-1">6.1 URI统一资源标识符Uniform Resource Identifier <a class="header-anchor" href="#_6-1-uri统一资源标识符uniform-resource-identifier" aria-hidden="true">#</a></h2><h3 id="_6-1-1-uniform" tabindex="-1">6.1.1 Uniform <a class="header-anchor" href="#_6-1-1-uniform" aria-hidden="true">#</a></h3><ul><li>规定统一的格式可方便处理多种不同类型的资源，而不用根据上下文环境来识别资源指定的访问方式</li><li>另外，加入新增的协议方案（如http：或ftp:）也更容易</li></ul><h3 id="_6-1-2-resource" tabindex="-1">6.1.2 Resource <a class="header-anchor" href="#_6-1-2-resource" aria-hidden="true">#</a></h3><ul><li>资源的定义是“可标识的任何东西”。</li><li>不仅是文档文件，图像或服务（例如当天的天气预报）等能够区别于其他类型的，全都可作为资源。</li><li>另外，资源不仅可以是单一的，也可以是多数的集合体</li></ul><h3 id="_6-1-3-identifier" tabindex="-1">6.1.3 Identifier <a class="header-anchor" href="#_6-1-3-identifier" aria-hidden="true">#</a></h3><p>表示可标识的对象(也称为标识符)</p><ul><li>综上所述，URI就是由某个协议方案表示的资源的定位标识符。</li><li>协议方案是指访问资源所使用的协议类型名称。</li></ul><blockquote><p>采用HTTP协议时，协议方案就是http</p></blockquote><p>除此之外，还有ftp、mailto、telnet、file等。标准的URI协议方案有30种左右，由隶属于国际互联网资源管理的非营利社团<strong>ICANN</strong>（InternetCorporation for Assigned Names and Numbers，互联网名称与数字地址分配机构）的<strong>IANA</strong>（Internet AssignedNumbers Authority，互联网号码分配局）管理颁布</p><ul><li>URI用字符串标识某一互联网资源，而URL表示资源的地点（互联网上所处的位置）。可见URL是URI的子集。</li><li>通用语法的几个例子</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">ftp://ftp.is.co.za/rfc/rfc1808./txt</span></span>
<span class="line"><span style="color:#A6ACCD;">http://www.iwtf.org/rfc/rfc2396.txt</span></span>
<span class="line"><span style="color:#A6ACCD;">ldap://[2001:db8::7]/c=GB?objectClass?one</span></span>
<span class="line"><span style="color:#A6ACCD;">mailto:yk1123@vip.163.com</span></span>
<span class="line"><span style="color:#A6ACCD;">news:comp.infosystems.www.servers.unix</span></span>
<span class="line"><span style="color:#A6ACCD;">tel:+1-816-555-1212</span></span>
<span class="line"><span style="color:#A6ACCD;">telnet://192.0.2.16:80/</span></span>
<span class="line"><span style="color:#A6ACCD;">urn:oasis:names:spacification:docbook:dtd:xml:4.1.2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="_6-2-uri格式" tabindex="-1">6.2 URI格式 <a class="header-anchor" href="#_6-2-uri格式" aria-hidden="true">#</a></h2><blockquote><p>表示指定的URI，要使用涵盖全部必要信息的绝对URI、绝对URL以及相对URL</p></blockquote><p>相对URL，是指从浏览器中基本URI处指定的URL</p><ul><li>先来了解一下绝对URI的格式</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/e65242a4ba4f1a70c65a8eabeb9cd3bf.png" alt="image"></p><ul><li>使用http：或https：等协议方案名获取访问资源时要指定协议类型</li><li>不区分字母大小写，最后附一个冒号（:）</li><li>也可使用data：或javascript：这类指定数据或脚本程序的方案名</li></ul><h3 id="_6-2-1-登录信息-认证" tabindex="-1">6.2.1 登录信息（认证） <a class="header-anchor" href="#_6-2-1-登录信息-认证" aria-hidden="true">#</a></h3><blockquote><p>指定用户名和密码作为从服务器端获取资源时必要的登录信息（身份认证）</p></blockquote><p>此项是可选项</p><h3 id="_6-2-2-服务器地址" tabindex="-1">6.2.2 服务器地址 <a class="header-anchor" href="#_6-2-2-服务器地址" aria-hidden="true">#</a></h3><blockquote><p>使用绝对URI必须指定待访问的服务器地址</p></blockquote><p>地址可以是类似hackr.jp这种DNS可解析的名称，或是192.168.1.1这类IPv4地址名，还可以是[0:0:0:0:0:0:0:1]这样用方括号括起来的IPv6地址名</p><h3 id="_6-2-3-服务器端口号" tabindex="-1">6.2.3 服务器端口号 <a class="header-anchor" href="#_6-2-3-服务器端口号" aria-hidden="true">#</a></h3><blockquote><p>指定服务器连接的网络端口号</p></blockquote><p>此项也是可选项，若用户省略则自动使用默认端口号</p><h3 id="_6-2-4-带层次的文件路径" tabindex="-1">6.2.4 带层次的文件路径 <a class="header-anchor" href="#_6-2-4-带层次的文件路径" aria-hidden="true">#</a></h3><blockquote><p>指定服务器上的文件路径来定位特指的资源</p></blockquote><p>这与UNIX系统的文件目录结构相似。</p><h3 id="_6-2-5-查询字符串" tabindex="-1">6.2.5 查询字符串 <a class="header-anchor" href="#_6-2-5-查询字符串" aria-hidden="true">#</a></h3><blockquote><p>针对已指定的文件路径内的资源，可以使用查询字符串传入任意参数</p></blockquote><p>此项可选</p><h3 id="_6-2-6-片段标识符" tabindex="-1">6.2.6 片段标识符 <a class="header-anchor" href="#_6-2-6-片段标识符" aria-hidden="true">#</a></h3><blockquote><p>使用片段标识符通常可标记出已获取资源中的子资源（文档内的某个位置）</p></blockquote><p>但在RFC中并没有明确规定其使用方法。该项也为可选项</p><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-hidden="true">#</a></h2>`,95);function q(x,R,U,N,H,D){const r=d,l=b("center"),s=c,o=p;return u(),_("div",null,[m,f,i(r,{readTime:"9",words:"2.9k"}),P,T,k,C,i(l,null,{default:t(()=>[I]),_:1}),A,i(l,null,{default:t(()=>[n("TCP/IP是互联网相关的各类协议族的总称")]),_:1}),v,i(s),i(o)])}const M=h(g,[["render",q]]);export{L as __pageData,M as default};
