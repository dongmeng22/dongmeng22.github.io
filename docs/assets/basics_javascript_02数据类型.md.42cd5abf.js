import{_ as i,a as r}from"./chunks/Contributors.vue_vue_type_script_setup_true_lang.3dcd3b9e.js";import{_ as t}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.358bd1c3.js";import{_ as p,o,c as d,D as a,x as e,a as c,Q as u}from"./chunks/framework.c7127555.js";import"./chunks/commonjsHelpers.725317a4.js";const S=JSON.parse('{"title":"JS数据类型","description":"","frontmatter":{},"headers":[{"level":2,"title":"8.1 转换为String","slug":"_8-1-转换为string","link":"#_8-1-转换为string","children":[{"level":3,"title":"方式一（强制类型转换）调用被转换数据的toString()方法","slug":"方式一-强制类型转换-调用被转换数据的tostring-方法","link":"#方式一-强制类型转换-调用被转换数据的tostring-方法","children":[]},{"level":3,"title":"方式二（强制类型转换）调用String()函数","slug":"方式二-强制类型转换-调用string-函数","link":"#方式二-强制类型转换-调用string-函数","children":[]},{"level":3,"title":"方式三（隐式的类型转换）为任意的数据类型 +””","slug":"方式三-隐式的类型转换-为任意的数据类型","link":"#方式三-隐式的类型转换-为任意的数据类型","children":[]}]},{"level":2,"title":"8.2 转换为Number","slug":"_8-2-转换为number","link":"#_8-2-转换为number","children":[{"level":3,"title":"方式一（强制类型转换）调用Number()函数","slug":"方式一-强制类型转换-调用number-函数","link":"#方式一-强制类型转换-调用number-函数","children":[]},{"level":3,"title":"转换的情况","slug":"转换的情况","link":"#转换的情况","children":[]},{"level":3,"title":"方式二（强制类型转换）调用parseInt()或parseFloat()","slug":"方式二-强制类型转换-调用parseint-或parsefloat","link":"#方式二-强制类型转换-调用parseint-或parsefloat","children":[]},{"level":3,"title":"方式三（隐式的类型转换）使用一元的+来进行隐式的类型转换(或二元的-*/)","slug":"方式三-隐式的类型转换-使用一元的-来进行隐式的类型转换-或二元的","link":"#方式三-隐式的类型转换-使用一元的-来进行隐式的类型转换-或二元的","children":[]}]},{"level":2,"title":"8.3 转换为布尔值","slug":"_8-3-转换为布尔值","link":"#_8-3-转换为布尔值","children":[{"level":3,"title":"方式一（强制类型转换）使用Boolean()函数","slug":"方式一-强制类型转换-使用boolean-函数","link":"#方式一-强制类型转换-使用boolean-函数","children":[]},{"level":3,"title":"转换的情况","slug":"转换的情况-1","link":"#转换的情况-1","children":[]},{"level":3,"title":"方式二（隐式类型转换）为任意的数据类型做两次非运算，即可将其转换为布尔值","slug":"方式二-隐式类型转换-为任意的数据类型做两次非运算-即可将其转换为布尔值","link":"#方式二-隐式类型转换-为任意的数据类型做两次非运算-即可将其转换为布尔值","children":[]}]},{"level":2,"title":"9.1 typeof","slug":"_9-1-typeof","link":"#_9-1-typeof","children":[]},{"level":2,"title":"9.2 instanceof","slug":"_9-2-instanceof","link":"#_9-2-instanceof","children":[]},{"level":2,"title":"9.3 ===","slug":"_9-3","link":"#_9-3","children":[]},{"level":2,"title":"Contributors","slug":"contributors","link":"#contributors","children":[]}],"relativePath":"basics/javascript/02数据类型.md","lastUpdated":null}'),h={name:"basics/javascript/02数据类型.md"},b=e("h1",{id:"js数据类型",tabindex:"-1"},[c("JS数据类型 "),e("a",{class:"header-anchor",href:"#js数据类型","aria-hidden":"true"},"#")],-1),m=u(`<h1 id="_1-六种数据类型" tabindex="-1">1. 六种数据类型 <a class="header-anchor" href="#_1-六种数据类型" aria-hidden="true">#</a></h1><ul><li>JS中一共分成六种数据类型 5个基本数据类型+Object</li></ul><ol><li>String 字符串</li><li>Number 数值</li><li>Boolean 布尔值</li><li>Null 空值</li><li>Undefined 未定义</li><li>Object 对象</li></ol><ul><li>typeof运算符检查数据类型</li></ul><h1 id="_2-string-字符串" tabindex="-1">2. String 字符串 <a class="header-anchor" href="#_2-string-字符串" aria-hidden="true">#</a></h1><ul><li>JS中的字符串需要使用引号引起来双引号或单引号都行</li><li>在字符串中使用\\作为转义字符</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">\\&#39;  ==&gt; &#39;  </span></span>
<span class="line"><span style="color:#A6ACCD;">\\&quot;  ==&gt; &quot;  </span></span>
<span class="line"><span style="color:#A6ACCD;">\\n  ==&gt; 换行  </span></span>
<span class="line"><span style="color:#A6ACCD;">\\t  ==&gt; 制表符  </span></span>
<span class="line"><span style="color:#A6ACCD;">\\\\  ==&gt; \\</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>使用typeof运算符检查字符串时，会返回”string”</li></ul><h1 id="_3-number-数值" tabindex="-1">3. Number 数值 <a class="header-anchor" href="#_3-number-数值" aria-hidden="true">#</a></h1><ol><li><p>JS中所有的整数和浮点数都是Number类型</p></li><li><p>最大能表示的值：Number.MAX_VALUE= 1.7976931348623157e+308</p></li><li><p>特殊的数字：能赋值给变量</p></li></ol><ul><li>Infinity 正无穷 a = Infinity ,能赋值</li><li>-Infinity 负无穷</li><li>NaN 非法数字（Not A Number）</li></ul><ol start="4"><li>其他进制的数字的表示：</li></ol><ul><li>0b 开头表示二进制，但是不是所有的浏览器都支持</li><li>0 开头表示八进制</li><li>0x 开头表示十六进制</li></ul><ol start="5"><li>使用typeof检查一个Number类型的数据时，会返回”number”（包括NaN 和 Infinity）</li></ol><h1 id="_4-boolean-布尔值" tabindex="-1">4. Boolean 布尔值 <a class="header-anchor" href="#_4-boolean-布尔值" aria-hidden="true">#</a></h1><ol><li>布尔值主要用来进行逻辑判断，布尔值只有两个</li></ol><ul><li>true 逻辑的真</li><li>false 逻辑的假</li></ul><ol start="2"><li>使用typeof检查一个布尔值时，会返回”boolean”</li></ol><h1 id="_5-null-空值" tabindex="-1">5. Null 空值 <a class="header-anchor" href="#_5-null-空值" aria-hidden="true">#</a></h1><ol><li>空值专门用来表示为空的对象，Null类型的值只有一个</li></ol><ul><li>null</li></ul><ol start="2"><li>使用typeof检查一个Null类型的值时会返回”object”</li></ol><h1 id="_6-undefined-未定义" tabindex="-1">6. Undefined 未定义 <a class="header-anchor" href="#_6-undefined-未定义" aria-hidden="true">#</a></h1><ul><li>如果==声明==一个变量==但是没有==为变量==赋值==此时变量的值就是undefined</li><li>该类型的值只有一个 undefined</li><li>使用typeof检查一个Undefined类型的值时，会返回”undefined”</li></ul><h1 id="_7-引用数据类型" tabindex="-1">7. 引用数据类型 <a class="header-anchor" href="#_7-引用数据类型" aria-hidden="true">#</a></h1><p>Object 对象</p><h1 id="_8-类型转换" tabindex="-1">8. 类型转换 <a class="header-anchor" href="#_8-类型转换" aria-hidden="true">#</a></h1><ul><li>类型转换就是指将其他的数据类型，转换为String Number 或 Boolean</li></ul><h2 id="_8-1-转换为string" tabindex="-1">8.1 转换为String <a class="header-anchor" href="#_8-1-转换为string" aria-hidden="true">#</a></h2><h3 id="方式一-强制类型转换-调用被转换数据的tostring-方法" tabindex="-1">方式一（强制类型转换）调用被转换数据的toString()方法 <a class="header-anchor" href="#方式一-强制类型转换-调用被转换数据的tostring-方法" aria-hidden="true">#</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">var a = 123;</span></span>
<span class="line"><span style="color:#A6ACCD;">a = a.toString();</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>注意：这个方法不适用于null和undefined</li><li>由于这两个类型的数据中没有方法，所以调用toString()时会报错</li></ul><h3 id="方式二-强制类型转换-调用string-函数" tabindex="-1">方式二（强制类型转换）调用String()函数 <a class="header-anchor" href="#方式二-强制类型转换-调用string-函数" aria-hidden="true">#</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">var a = 123;  </span></span>
<span class="line"><span style="color:#A6ACCD;">a = String(a);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>原理：</li><li>对于Number，Boolean，String都会调用他们的toString()方法来将其转换为字符串</li><li>对于null值，直接转换为字符串”null”</li><li>对于undefined直接转换为字符串”undefined”</li></ul><h3 id="方式三-隐式的类型转换-为任意的数据类型" tabindex="-1">方式三（隐式的类型转换）为任意的数据类型 +”” <a class="header-anchor" href="#方式三-隐式的类型转换-为任意的数据类型" aria-hidden="true">#</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">var a = true;  </span></span>
<span class="line"><span style="color:#A6ACCD;">a = a + &quot;&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>原理：和String()函数一样</li></ul><h2 id="_8-2-转换为number" tabindex="-1">8.2 转换为Number <a class="header-anchor" href="#_8-2-转换为number" aria-hidden="true">#</a></h2><h3 id="方式一-强制类型转换-调用number-函数" tabindex="-1">方式一（强制类型转换）调用Number()函数 <a class="header-anchor" href="#方式一-强制类型转换-调用number-函数" aria-hidden="true">#</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">var s = &quot;123&quot;;  </span></span>
<span class="line"><span style="color:#A6ACCD;">s = Number(s);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="转换的情况" tabindex="-1">转换的情况 <a class="header-anchor" href="#转换的情况" aria-hidden="true">#</a></h3><ol><li>字符串 &gt; 数字</li></ol><ul><li>如果字符串是一个合法的数字，则直接转换为对应的数字</li><li>如果字符串是一个非法的数字，则转换为NaN</li><li>如果是一个空串或纯空格的字符串，则转换为0</li></ul><ol start="2"><li>布尔值 &gt; 数字</li></ol><ul><li>true转换为1</li><li>false转换为0</li></ul><ol start="3"><li>空值 &gt; 数字</li></ol><ul><li>null转换为0</li></ul><ol start="4"><li>未定义 &gt; 数字</li></ol><ul><li>undefined 转换为NaN</li></ul><h3 id="方式二-强制类型转换-调用parseint-或parsefloat" tabindex="-1">方式二（强制类型转换）调用parseInt()或parseFloat() <a class="header-anchor" href="#方式二-强制类型转换-调用parseint-或parsefloat" aria-hidden="true">#</a></h3><ul><li><p>这两个函数专门用来将一个字符串转换为数字的</p></li><li><p>如果对非String使用parseInt()或parseFloat()，它会先将其转换为String然后在操作 parseInt()</p></li><li><p>可以将一个字符串中的有效的整数位提取出来，并转换为Number</p></li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">var a = &quot;123.456px&quot;;  </span></span>
<span class="line"><span style="color:#A6ACCD;">a = parseInt(a); //123</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>如果需要可以在parseInt()中指定一个第二个参数，来指定进制</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">a = parseInt(a, 10) /*转换*/</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>parseFloat()可以将一个字符串中的有效的小数位提取出来，并转换为Number</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">var a = &quot;123.456px&quot;;  </span></span>
<span class="line"><span style="color:#A6ACCD;">a = parseFloat(a); //123.456</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="方式三-隐式的类型转换-使用一元的-来进行隐式的类型转换-或二元的" tabindex="-1">方式三（隐式的类型转换）使用一元的+来进行隐式的类型转换(或二元的-*/) <a class="header-anchor" href="#方式三-隐式的类型转换-使用一元的-来进行隐式的类型转换-或二元的" aria-hidden="true">#</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">var a = &quot;123&quot;;  </span></span>
<span class="line"><span style="color:#A6ACCD;">a = +a;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>原理：和Number()函数一样</li></ul><h2 id="_8-3-转换为布尔值" tabindex="-1">8.3 转换为布尔值 <a class="header-anchor" href="#_8-3-转换为布尔值" aria-hidden="true">#</a></h2><h3 id="方式一-强制类型转换-使用boolean-函数" tabindex="-1">方式一（强制类型转换）使用Boolean()函数 <a class="header-anchor" href="#方式一-强制类型转换-使用boolean-函数" aria-hidden="true">#</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">var s = &quot;false&quot;;  </span></span>
<span class="line"><span style="color:#A6ACCD;">s = Boolean(s); //true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="转换的情况-1" tabindex="-1">转换的情况 <a class="header-anchor" href="#转换的情况-1" aria-hidden="true">#</a></h3><ol><li>字符串 &gt; 布尔</li></ol><ul><li>除了空串其余全是true</li></ul><ol start="2"><li>数值 &gt; 布尔</li></ol><ul><li>除了0和NaN其余的全是true</li></ul><ol start="3"><li>null、undefined &gt; 布尔</li></ol><ul><li>都是false</li></ul><ol start="4"><li>对象 &gt; 布尔</li></ol><ul><li>都是true</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/2eab87340f256001f65e6dbb8247a80e.png" alt="image"></p><h3 id="方式二-隐式类型转换-为任意的数据类型做两次非运算-即可将其转换为布尔值" tabindex="-1">方式二（隐式类型转换）为任意的数据类型做两次非运算，即可将其转换为布尔值 <a class="header-anchor" href="#方式二-隐式类型转换-为任意的数据类型做两次非运算-即可将其转换为布尔值" aria-hidden="true">#</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">var a = &quot;hello&quot;;  </span></span>
<span class="line"><span style="color:#A6ACCD;">a = !!a; //true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h1 id="_9-数据类型的判断" tabindex="-1">9. 数据类型的判断 <a class="header-anchor" href="#_9-数据类型的判断" aria-hidden="true">#</a></h1><h2 id="_9-1-typeof" tabindex="-1">9.1 typeof <a class="header-anchor" href="#_9-1-typeof" aria-hidden="true">#</a></h2><ul><li>是运算符不是函数</li><li>返回数据类型的字符串表达</li><li>可以判断：undefined / 数值 / 字符串 /布尔值 / function</li><li>不能判断：null与object / object和array(都返回object) typeof null ----&gt; object</li></ul><h2 id="_9-2-instanceof" tabindex="-1">9.2 instanceof <a class="header-anchor" href="#_9-2-instanceof" aria-hidden="true">#</a></h2><ul><li>判断对象的具体类型</li></ul><h2 id="_9-3" tabindex="-1">9.3 === <a class="header-anchor" href="#_9-3" aria-hidden="true">#</a></h2><ul><li>可以判断：undefined / null</li></ul><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-hidden="true">#</a></h2>`,83);function g(C,_,f,y,A,v){const l=t,n=i,s=r;return o(),d("div",null,[b,a(l,{readTime:"4",words:"1.2k"}),m,a(n),a(s)])}const q=p(h,[["render",g]]);export{S as __pageData,q as default};
