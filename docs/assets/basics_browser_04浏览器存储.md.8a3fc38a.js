import{_ as s,a as r}from"./chunks/Contributors.vue_vue_type_script_setup_true_lang.2d10c1d4.js";import{_ as n}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.63457685.js";import{_ as t,o as c,c as d,D as e,x as a,a as p,Q as h}from"./chunks/framework.c7127555.js";import"./chunks/commonjsHelpers.725317a4.js";const v=JSON.parse('{"title":"1. 前言","description":"","frontmatter":{},"headers":[{"level":2,"title":"2.1 Cookie","slug":"_2-1-cookie","link":"#_2-1-cookie","children":[{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"典型应用场景","slug":"典型应用场景","link":"#典型应用场景","children":[]},{"level":3,"title":"Cookie 的构成","slug":"cookie-的构成","link":"#cookie-的构成","children":[]},{"level":3,"title":"生成方式","slug":"生成方式","link":"#生成方式","children":[]},{"level":3,"title":"Cookie 的优缺点","slug":"cookie-的优缺点","link":"#cookie-的优缺点","children":[]}]},{"level":2,"title":"2.2 localStorage","slug":"_2-2-localstorage","link":"#_2-2-localstorage","children":[{"level":3,"title":"特点","slug":"特点-1","link":"#特点-1","children":[]},{"level":3,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]}]},{"level":2,"title":"2.3 sessionStorage","slug":"_2-3-sessionstorage","link":"#_2-3-sessionstorage","children":[{"level":3,"title":"特点","slug":"特点-2","link":"#特点-2","children":[]},{"level":3,"title":"使用场景","slug":"使用场景-1","link":"#使用场景-1","children":[]}]},{"level":2,"title":"2.4 IndexDB","slug":"_2-4-indexdb","link":"#_2-4-indexdb","children":[{"level":3,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":3,"title":"特点","slug":"特点-3","link":"#特点-3","children":[]},{"level":3,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]}]},{"level":2,"title":"3.1 缓存的好处","slug":"_3-1-缓存的好处","link":"#_3-1-缓存的好处","children":[]},{"level":2,"title":"3.2 分类","slug":"_3-2-分类","link":"#_3-2-分类","children":[{"level":3,"title":"3.2.1 Cache Storage","slug":"_3-2-1-cache-storage","link":"#_3-2-1-cache-storage","children":[]},{"level":3,"title":"3.2.2 Application Cache","slug":"_3-2-2-application-cache","link":"#_3-2-2-application-cache","children":[]}]},{"level":2,"title":"3.3 缓存方案","slug":"_3-3-缓存方案","link":"#_3-3-缓存方案","children":[]},{"level":2,"title":"3.4 强缓存与协商缓存的区别","slug":"_3-4-强缓存与协商缓存的区别","link":"#_3-4-强缓存与协商缓存的区别","children":[]},{"level":2,"title":"3.5 刷新对于强缓存和协商缓存的影响","slug":"_3-5-刷新对于强缓存和协商缓存的影响","link":"#_3-5-刷新对于强缓存和协商缓存的影响","children":[]},{"level":2,"title":"Contributors","slug":"contributors","link":"#contributors","children":[]}],"relativePath":"basics/browser/04浏览器存储.md","lastUpdated":1678883566000}'),_={name:"basics/browser/04浏览器存储.md"},g=a("h1",{id:"_1-前言",tabindex:"-1"},[p("1. 前言 "),a("a",{class:"header-anchor",href:"#_1-前言","aria-hidden":"true"},"#")],-1),u=h(`<p>打开浏览器的控制台，在Application中可以看到Storage与Cache中有很多内容，今天来学习学习这些浏览器存储&amp;缓存吧~ <img src="https://img-blog.csdnimg.cn/20210622113045578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk3MjAwOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>对浏览器存储进行分类</p><ol><li><p><code>Cookie</code>：浏览器普遍支持的基于 HTTP 协议的存储方式，但容量只有 <code>4 KB</code></p></li><li><p>Web存储 （Web Storage）：HTML 5 中提出的存储方式，容量有 <code>5 M</code>。</p><ul><li><code>localStorage</code></li><li><code>sessionStorage</code></li></ul></li><li><p>数据库存储：</p><ul><li><code>IndexDB</code></li><li><code>Web SQL</code></li></ul></li></ol><p>对浏览器缓存进行分类</p><p><code>Cache Storage</code>: 在 Service Worker 的规范中提出，一般配合 Service Worker 进行离线缓存。 <code>Application Cache</code>： 在 HTML5.1提出的缓存方式，可用来构建离线应用。</p><h1 id="_2-浏览器存储" tabindex="-1">2. 浏览器存储 <a class="header-anchor" href="#_2-浏览器存储" aria-hidden="true">#</a></h1><h2 id="_2-1-cookie" tabindex="-1">2.1 Cookie <a class="header-anchor" href="#_2-1-cookie" aria-hidden="true">#</a></h2><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-hidden="true">#</a></h3><p>【Cookie基于HTTP规范，用来识别用户】 Cookie 的本职工作并非本地存储，而是“<strong>维持状态</strong>”。 因为HTTP协议是无状态的，HTTP协议自身不对请求和响应之间的通信状态进行保存，通俗来说，服务器不知道用户上一次做了什么，这严重阻碍了交互式Web应用程序的实现。</p><p>服务器可以设置或读取Cookies中包含信息，借此维护用户跟服务器会话中的状态。</p><p>【服务端生成，客户端进行维护和存储】 浏览器在本地按照一定规则存储一些文本字符串，每当浏览器像服务器发送请求时(附着在 【HTTP 请求】上)带这些字符串。服务器根据cookie判定浏览器的状态比如：登录、订单、皮肤 (携带用户信息)。服务器就可以根据不同的cookie识别出不同的用户信息。 【Cookie 以键值对的形式存在】 <img src="https://img-blog.csdnimg.cn/20210622143712381.png" alt="在这里插入图片描述"></p><h3 id="典型应用场景" tabindex="-1">典型应用场景 <a class="header-anchor" href="#典型应用场景" aria-hidden="true">#</a></h3><ol><li>记住密码，下次自动登录</li><li>购物车功能</li><li>记录用户浏览数据，进行商品（广告）推荐</li></ol><h3 id="cookie-的构成" tabindex="-1">Cookie 的构成 <a class="header-anchor" href="#cookie-的构成" aria-hidden="true">#</a></h3><ul><li>名称（Name）</li><li>值（Value）</li><li>域（Domain）</li><li>路径（Path）</li><li>失效时间 （Expiers/Max-Age）</li><li>大小（Size）</li><li>是否为 HTTP请求（HttpOnly）</li><li>安全性（Secure） 提示：域、路径、失效时间和安全性都是服务器给浏览器的指示，它们不会随着请求发送给服务器，发送给服务器的只有【名称与值】对。</li></ul><h3 id="生成方式" tabindex="-1">生成方式 <a class="header-anchor" href="#生成方式" aria-hidden="true">#</a></h3><p>生成方式一：<code>http response header</code>中的<code>set-cookie</code> 我们可以通过响应头里的 Set-Cookie 指定要存储的 Cookie 值。默认情况下，domain 被设置为设置 Cookie 页面的主机名，我们也可以手动设置 domain 的值。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Set</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Cookie</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> id</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">a3fWa</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> Expires</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">Wed</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">21</span><span style="color:#A6ACCD;"> Oct </span><span style="color:#F78C6C;">2021</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">07</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">28</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">00</span><span style="color:#A6ACCD;"> GMT</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//可以指定一个特定的过期时间（Expires）或有效期（Max-Age）</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>当Cookie的过期时间被设定时，设定的日期和时间只与客户端相关，而不是服务端。</p><p>生成方式二：js中可以通过<code>document.cookie</code>可以读写cookie，以键值对的形式展示</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cookie</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">userName=yk</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://img-blog.csdnimg.cn/20210622151704890.png" alt="在这里插入图片描述"></p><h3 id="cookie-的优缺点" tabindex="-1">Cookie 的优缺点 <a class="header-anchor" href="#cookie-的优缺点" aria-hidden="true">#</a></h3><p>【Cookie 的限制性】 如果设定了 Cookie 的过期时间，那么 Cookie 会在到期时自动失效。 如果没有设定过期时间，那么 Cookie 就是 session 级别的，即浏览器关闭时 Cookie 自动消失。</p><p>优点：</p><ul><li>可以控制过期时间，不会永久有效，有一定的安全保障。</li><li>可进行扩展，可<strong>跨域</strong>共享。</li><li>通过加密与安全传输技术 （SSL） ，可以减少 Cookie 被破解的可能性。</li><li>有较高的兼容性。</li></ul><p>缺点：</p><ul><li>有一定的数量与长度限制，每个 Cookie 长度不能超过 4 KB ，否则超出部分会被截掉。</li><li>请求头上的数据容易被拦截攻击。</li></ul><h2 id="_2-2-localstorage" tabindex="-1">2.2 localStorage <a class="header-anchor" href="#_2-2-localstorage" aria-hidden="true">#</a></h2><h3 id="特点-1" tabindex="-1">特点 <a class="header-anchor" href="#特点-1" aria-hidden="true">#</a></h3><ol><li>【同源策略】：要访问同一个 localStorage 页面必须来自同一个域名，同种协议，同种端口。</li><li>保存的数据【长期存在】，下一次访问该网站的时候，网页可以直接读取以前保存的数据。</li><li>大小为5M左右</li><li>仅在客户端使用，不和服务端进行通信</li><li>接口封装较好</li></ol><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-hidden="true">#</a></h3><p>LocalStorage在存储方面没有什么特别的限制，理论上 Cookie 无法胜任的、可以用简单的键值对来存取的数据存储任务，都可以交给 LocalStorage 来做。 LocalStorage可以作为浏览器本地缓存方案，用来提升网页首屏渲染速度(根据第一请求返回时，将一些【不变信息】直接存储在本地)。比如图片内容丰富的电商网站会用它来存储 Base64 格式的图片字符串</p><h2 id="_2-3-sessionstorage" tabindex="-1">2.3 sessionStorage <a class="header-anchor" href="#_2-3-sessionstorage" aria-hidden="true">#</a></h2><h3 id="特点-2" tabindex="-1">特点 <a class="header-anchor" href="#特点-2" aria-hidden="true">#</a></h3><ol><li>同源策略： sessionStorage 访问限制更高，只有当前设定了 sessionStorage 的域下才能访问。</li><li>单标签页： 两个相同域下的标签页不能互通。【会话级别的浏览器存储】在关闭标签页或者新开的标签页下都不能访问之前写下的 sessionStorage,刷新标签页依然可以访问 sessionStorage</li><li>大小为5M左右</li><li>仅在客户端使用，不和服务端进行通信</li><li>接口封装较好</li></ol><h3 id="使用场景-1" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景-1" aria-hidden="true">#</a></h3><p>主要针对【会话级】的【小数据】的存储。 存储一些在当前页面刷新仍然需要存储，但是关闭后不需要留下的信息。 很适合单页应用的使用，可以用来存储【登录态信息】【表单信息】等，刷新后不丢失 微博的 sessionStorage就主要是存储你本次会话的浏览足迹</p><h2 id="_2-4-indexdb" tabindex="-1">2.4 IndexDB <a class="header-anchor" href="#_2-4-indexdb" aria-hidden="true">#</a></h2><h3 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-hidden="true">#</a></h3><p>虽然web存储机制对于存储较少量的数据非常便捷好用，但对于存储更大量的结构化数据来说，这种方法就不太满足开发者们的需求了。 IndexedDB就是为了应对这个需求而产生的，它是由HTML5所提供的一种本地存储，用于在浏览器中储存较大数据结构的 Web API，并提供索引功能以实现高性能查找。 它一般用于保存大量用户数据并要求数据之间有搜索需要的场景，当网络断开时，用户就可以做一些离线的操作。 它较之SQL更为方便，不需要写一些特定的语法对数据进行操作，数据格式是JSON。 IndexDB 不属于关系型数据库（不支持 SQL 查询语句），更接近 NoSQL 数据库。</p><ul><li>访问：indexDB 和 Web SQL 和 Web Storage 一样，均是只能在创建数据库的域名下才能访问【同源策略】。</li><li>存储时间：存储时间为【永久】，除非用户清除数据，他可用作长期的存储。</li><li>大小限制：二者其实没有强制限制。只是 indexDB 在数据超过 50 M 之后会从浏览器弹出一个框让你确认。</li><li>性能： indexDB 查询速度会相对较慢，而 Web SQL 的性能相对较快。</li></ul><h3 id="特点-3" tabindex="-1">特点 <a class="header-anchor" href="#特点-3" aria-hidden="true">#</a></h3><ol><li><p>键值对储存 IndexedDB 内部采用对象仓库 object store 存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以「键值对」的形式保存，每一个数据记录都有对应的主键。 主键是独一无二的，不能有重复，否则会抛出一个错误。</p></li><li><p>属于异步操作 IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，因为后者是同步操作。 异步设计是为了防止大量数据的读写，拖慢网页的表现。</p></li><li><p>支持事务 IndexedDB 支持事务 transaction，这意味着一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况。</p></li><li><p>同源限制 IndexedDB 受到同源限制，每一个数据库对应创建它的域名。 网页只能访问自身域名下的数据库，而不能访问跨域的数据库。</p></li><li><p>储存空间大 IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限。</p></li><li><p>支持二进制储存 IndexedDB 不仅可以储存字符串，还可以储存二进制数据 ArrayBuffer 对象和 Blob 对象。</p></li></ol><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-hidden="true">#</a></h3><ol><li>你的用户通过浏览器访问您的应用程序（浏览器）支持 IndexedDB API 吗 ?</li><li>你需要存储大量的数据在客户端？</li><li>你需要在一个大型的数据集合中快速定位单个数据点吗？</li><li>你的架构在客户端需要事务支持吗？</li></ol><p><img src="https://img-blog.csdnimg.cn/20210622152222408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk3MjAwOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="_3-浏览器缓存" tabindex="-1">3. 浏览器缓存 <a class="header-anchor" href="#_3-浏览器缓存" aria-hidden="true">#</a></h1><h2 id="_3-1-缓存的好处" tabindex="-1">3.1 缓存的好处 <a class="header-anchor" href="#_3-1-缓存的好处" aria-hidden="true">#</a></h2><ol><li>缓解服务器压力，不用每次都去请求某些数据了</li><li>提升性能，打开本地资源肯定会比请求服务器来的快</li><li>减少带宽消耗，当我们使用缓存时，只会产生很小的网络消耗</li></ol><p>所谓浏览器缓存其实就是指在本地使用的计算机中开辟一个内存区，同时也开辟一个硬盘区作为数据传输的缓冲区，然后用这个缓冲区来暂时保存用户以前访问过的信息。 浏览器缓存过程： 强缓存，协商缓存。 浏览器缓存位置一般分为四类： Service Worker--&gt;Memory Cache--&gt;Disk Cache--&gt;Push Cache</p><h2 id="_3-2-分类" tabindex="-1">3.2 分类 <a class="header-anchor" href="#_3-2-分类" aria-hidden="true">#</a></h2><h3 id="_3-2-1-cache-storage" tabindex="-1">3.2.1 Cache Storage <a class="header-anchor" href="#_3-2-1-cache-storage" aria-hidden="true">#</a></h3><p>Cache Storage 是用来存储 Response 对象 ，也就是对 HTTP 响应进行缓存。 Cache Storage 是多个 cache 的集合，每个 cache 可以存储多个响应对象。它基于 Promise。</p><h3 id="_3-2-2-application-cache" tabindex="-1">3.2.2 Application Cache <a class="header-anchor" href="#_3-2-2-application-cache" aria-hidden="true">#</a></h3><p>它是 HTML5 中新引入的应用程序换粗技术，它的出现意味着 web 应用可以通过缓存，在没有网络的环境下运行，构建离线应用。</p><p>优点:</p><ul><li>离线浏览</li><li>提升页面的载入速度</li><li>降低服务器的压力</li></ul><h2 id="_3-3-缓存方案" tabindex="-1">3.3 缓存方案 <a class="header-anchor" href="#_3-3-缓存方案" aria-hidden="true">#</a></h2><p>目前的项目大多使用这种缓存方案的：</p><p>HTML: 协商缓存；</p><p>css、js、图片：强缓存，文件名带上hash。</p><h2 id="_3-4-强缓存与协商缓存的区别" tabindex="-1">3.4 强缓存与协商缓存的区别 <a class="header-anchor" href="#_3-4-强缓存与协商缓存的区别" aria-hidden="true">#</a></h2><p>两者的主要区别是使用本地缓存的时候，是否需要向服务器验证本地缓存是否依旧有效。 顾名思义，协商缓存，就是需要和服务器进行协商，最终确定是否使用本地缓存。 <img src="https://img-blog.csdnimg.cn/20210626123917328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk3MjAwOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>强缓存不发请求到服务器，所以有时候资源更新了浏览器还不知道，但是协商缓存会发请求到服务器，所以资源是否更新，服务器肯定知道。</li><li>大部分web服务器都默认开启协商缓存。</li></ol><h2 id="_3-5-刷新对于强缓存和协商缓存的影响" tabindex="-1">3.5 刷新对于强缓存和协商缓存的影响 <a class="header-anchor" href="#_3-5-刷新对于强缓存和协商缓存的影响" aria-hidden="true">#</a></h2><ol><li>当ctrl+f5强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存。</li><li>当f5刷新网页时，跳过强缓存，但是会检查协商缓存。</li><li>浏览器地址栏中写入URL，回车 浏览器发现缓存中有这个文件了，不用继续请求了，直接去缓存拿。（最快）</li></ol><h1 id="_4-参考" tabindex="-1">4. 参考 <a class="header-anchor" href="#_4-参考" aria-hidden="true">#</a></h1><p><a href="https://juejin.cn/post/6950265675159978021" target="_blank" rel="noreferrer">浏览器储存（cookie、localStorage、sessionStorage和IndexDB）</a></p><p><a href="https://juejin.cn/post/6844903812092674061" target="_blank" rel="noreferrer">深入了解浏览器存储--从cookie到WebStorage、IndexedDB</a></p><p><a href="http://www.ruanyifeng.com/blog/2018/07/indexeddb.html" target="_blank" rel="noreferrer">浏览器数据库 IndexedDB 入门教程</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API" target="_blank" rel="noreferrer">MDN-IndexedDB</a></p><p><a href="https://juejin.cn/post/6947936223126093861" target="_blank" rel="noreferrer">前端浏览器缓存知识梳理</a></p><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-hidden="true">#</a></h2>`,74);function b(k,C,m,x,D,f){const l=n,i=s,o=r;return c(),d("div",null,[g,e(l,{readTime:"9",words:"2.9k"}),u,e(i),e(o)])}const B=t(_,[["render",b]]);export{v as __pageData,B as default};
