import{_ as i,a as c}from"./chunks/Contributors.vue_vue_type_script_setup_true_lang.2d10c1d4.js";import{_ as o}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.63457685.js";import{_ as t,o as r,c as d,D as a,x as e,t as u,a as h,Q as s}from"./chunks/framework.c7127555.js";import"./chunks/commonjsHelpers.725317a4.js";const S=JSON.parse('{"title":"小程序面试题","description":"","frontmatter":{},"headers":[{"level":2,"title":"微信小程序面试题","slug":"微信小程序面试题","link":"#微信小程序面试题","children":[{"level":3,"title":"1.  小程序有几个文件？","slug":"_1-小程序有几个文件","link":"#_1-小程序有几个文件","children":[]},{"level":3,"title":"2.小程序怎么跟随事件传值","slug":"_2-小程序怎么跟随事件传值","link":"#_2-小程序怎么跟随事件传值","children":[]},{"level":3,"title":"3. 小程序 WXSS 与 CSS 的区别","slug":"_3-小程序-wxss-与-css-的区别","link":"#_3-小程序-wxss-与-css-的区别","children":[]},{"level":3,"title":"4. 小程序的双向绑定和Vue哪里不一样。","slug":"_4-小程序的双向绑定和vue哪里不一样。","link":"#_4-小程序的双向绑定和vue哪里不一样。","children":[]},{"level":3,"title":"5. 小程序的生命周期函数","slug":"_5-小程序的生命周期函数","link":"#_5-小程序的生命周期函数","children":[]},{"level":3,"title":"6. 小程序怎么实现下拉刷新","slug":"_6-小程序怎么实现下拉刷新","link":"#_6-小程序怎么实现下拉刷新","children":[]},{"level":3,"title":"7.  bindtap 和  catchtap 区别","slug":"_7-bindtap-和-catchtap-区别","link":"#_7-bindtap-和-catchtap-区别","children":[]},{"level":3,"title":"8. 小程序有哪些传递数据的方法","slug":"_8-小程序有哪些传递数据的方法","link":"#_8-小程序有哪些传递数据的方法","children":[]},{"level":3,"title":"9. 简述下 wx.navigateTo(), wx.redirectTo(), wx.switchTab(), wx.navigateBack(), wx.reLaunch() 区别","slug":"_9-简述下-wx-navigateto-wx-redirectto-wx-switchtab-wx-navigateback-wx-relaunch-区别","link":"#_9-简述下-wx-navigateto-wx-redirectto-wx-switchtab-wx-navigateback-wx-relaunch-区别","children":[]},{"level":3,"title":"10.  小程序 wx:if  和  hidden 的区别","slug":"_10-小程序-wx-if-和-hidden-的区别","link":"#_10-小程序-wx-if-和-hidden-的区别","children":[]},{"level":3,"title":"11. app.json 全局配置文件描述","slug":"_11-app-json-全局配置文件描述","link":"#_11-app-json-全局配置文件描述","children":[]},{"level":3,"title":"12. 如何封装小程序请求","slug":"_12-如何封装小程序请求","link":"#_12-如何封装小程序请求","children":[{"level":4,"title":"wx.request 封装","slug":"wx-request-封装","link":"#wx-request-封装","children":[]},{"level":4,"title":"组件使用 封装好的请求","slug":"组件使用-封装好的请求","link":"#组件使用-封装好的请求","children":[]}]},{"level":3,"title":"13. 小程序运行机制","slug":"_13-小程序运行机制","link":"#_13-小程序运行机制","children":[]},{"level":3,"title":"14. 小程序什么时候会主动销毁？","slug":"_14-小程序什么时候会主动销毁","link":"#_14-小程序什么时候会主动销毁","children":[]},{"level":3,"title":"15. 微信授权流程","slug":"_15-微信授权流程","link":"#_15-微信授权流程","children":[]}]},{"level":2,"title":"Contributors","slug":"contributors","link":"#contributors","children":[]}],"relativePath":"code/interview/offer/17.小程序面试题.md","lastUpdated":null}'),b={name:"code/interview/offer/17.小程序面试题.md"},m=e("h1",{id:"小程序面试题",tabindex:"-1"},[h("小程序面试题 "),e("a",{class:"header-anchor",href:"#小程序面试题","aria-hidden":"true"},"#")],-1),C=s("<p>1.请谈谈微信小程序主要目录和文件的作用？</p><p>project.config.json：项目配置文件，用的最多的就是配置是否开启https校验</p><p>App.js：设置一些全局的基础数据等</p><p>App.json：底部tab，标题栏和路由等设置</p><p>App.wxss：公共样式，引入iconfont等</p><p>pages：里面包含一个个具体的页面</p><p>index.json：配置当前页面标题和引入组件</p><p>index.wxml：页面结构</p><p>index.wxss：页面样式表</p><p>index.js：页面的逻辑，请求和数据处理</p><p>2.请谈谈wxml与标准的html的异同？</p><p>都是用来描述页面的结构</p><p>都由标签，属性等构成</p><p>标签名字不一样，且小程序标签更少，单一标签更多</p>",14),A=s(`<p>WXML仅能在微信小程序开发者工具中预览，而HTML可以在浏览器内预览</p><p>组件封装不同，WXML对组件进行了重新封装</p><p>小程序运行在JS Core内，没有DOM树和windiw对象，小程序中无法使用window对象和document对象。</p><p>3.请谈谈WXSS和CSS的异同？</p><p>都是用来描述页面的样子</p><p>WXSS具有CSS大部分的特性，也做了一些扩充和修改</p><p>WXSS新增了尺寸单位，WXSS在底层支持新的尺寸单位rpx</p><p>WXSS仅支持部分CSS选择器</p><p>WXSS提供全局样式与局部样式</p><p>4.你是怎么封装微信小程序的数据请求的？</p><p>在根目录下创建util目录及api.js文件和apiConfig.js文件</p><p>在apiConfig.js封装基础的get，post和put，upload等请求方法，设置请求体，带上token和异常处理等</p><p>在api中引入apiConfig.js封装好的请求方法.根据页面数据请求的urls，设置对应的方法并导出</p><p>在具体的页面中导入</p><p>或</p><p>将所有的接口放在统一的js文件中并导出</p><p>在app.js中创建封装请求数据的方法</p><p>在子页面中调用封装的请求数据</p><p>5.小程序页面之间有哪些（传值）传递数据的方法？</p><p>使用全局遍历实现数据传递</p><p>页面跳转或重定向时，使用url带参数传递数据</p><p>使用组件模板 template传递参数</p><p>使用缓存传递参数</p><p>使用数据库传递参数</p><p>或</p><p>给html元素添加data-*属性来传递值，然后通过e.currentTarget.dataset或onload的param参数获取（data- 名称不能有大写字母，不可以存放对象）</p><p>设置id 的方法标识来传值，通过e.currentTarget.id获取设置的id值，然后通过设置全局对象的方式来传递数据</p><p>在navigator中添加参数数值</p><p>6.请谈谈小程序的双向绑定和vue的异同？</p><p>大体相同，但小程序之间this.data的属性是不可以同步到视图的，必须调用this.setData()方法</p><p>7.请谈谈小程序的生命周期函数</p><p>onLoad()页面加载时触发，只会调用一次，可获取当前页面路径中的参数</p><p>onShow()页面显示/切入前台时候触发，一般用来发送数据请求</p><p>onReady()页面初次渲染完成时触发，只会调用一次，代表页面已可和视图层进行交互</p><p>onHide()页面隐藏/切入后台时触发，如底部tab切换到其他页面或小程序切入后台等</p><p>onUnload()页面卸载时触发，如redirectTO或navigateBack到其他页面时</p><p>8.简述微信小程序原理</p><p>小程序本质就是一个单页面应用，所有的页面渲染和事件处理，都在一个页面内进行，但又可以通过微信客户端调用原生的各种接口；</p><p>它的架构，是数据驱动的架构模式，它的UI和数据是分离的，所有的页面更新，都需要通过对数据的更改来实现；</p><p>它从技术讲和现有的前端开发差不多，采用JavaScript、WXML、WXSS三种技术进行开发；</p><p>功能可分为webview和APPService两个部分，webview主要用来展示UI，appservice用来处理业务逻辑，数据及接口调用，它们在两个进程中进行，通过系统层JSBridge实现通信，实现UI的渲染，事件处理；</p><p>webview用来展现UI，appService有来处理业务逻辑、数据及接口调用；</p><p>两个部分在两个进程中运行，通过系统层JSBridge实现通信，实现UI的渲染、事件的处理等。</p><p>javaScript的代码是运行在微信App中的，因此一些h5技术的应用需要微信APP提供对应的API支持</p><p>wxml 微信自己基于xml语法开发的，因此在开发时只能使用微信提供的现有标签，html的标签是无法使用的</p><p>wxss具有css的大部分特性，但并不是所有都支持，没有详细文档（wxss的图片引入需要使用外链地址，没有body，样式可以使用import导入）</p><p>9.请谈谈原生开发小程序，wepy，mpvue的对比？</p><p>个人认为，如果是新项目，且没有旧的 h5 项目迁移，则考虑用小程序原生开发，好处是相比于第三方框架，坑少。</p><p>而如果有 老的 h5 项目是 vue 开发 或者 也有 h5 项目也需要小程序开发，则比较适合 wepy 或者 mpvue 来做迁移或者开发，近期看wepy几乎不更新了，所以推荐美团的mpvue。</p><p>而如果如果团队前端强大，自己做一套框架也没问题。</p><p>10.简单描述下微信小程序的 相关文件类型</p><p>\\1. wxml 模板文件，是框架设计的一套标签预言，结合基础组件，事件系统，可以构建出页面的结构</p><p>wxss 样式文件，是一套样式语言，用于描述WXML的组件样式</p><p>js脚本逻辑文件。逻辑处理网络请求</p><p>json配置文件，小程序设置，如页面注册，页面标题及tabBar</p><p>\\2. app.json 整个小程序的全局配置，包括：</p><p>pages:[所有页面路径]</p><p>网络设置（网络超时事件）</p><p>页面表现（页面注册）</p><p>window：（背景色，导航样式，默认标题）</p><p>底部tab等</p><p>\\3. app.js 监听并处理小程序的生命周期函数，声明全局变量</p><p>\\4. app.wxss 全局配置的样式文件</p><p>11.那些方法来提高微信小程序的应用速度？</p><ul><li>提高页面的加载速度</li><li>用户行为预测</li><li>减少默认的data的大小</li><li>组件化方案</li></ul><p>12.分析微信小程序的优劣势？</p><p>优势：</p><p>容易上手，基础组件库比较全，基本不需要考虑兼容问题</p><p>开发文档比较完善，开发社区比较活跃，支持插件式开发</p><p>良好的用户体验，无需下载，通过搜索和扫一扫就可以打开，打开速度快，安卓上可以添加到桌面，与原生APP差不多</p><p>开发成本比APP要低</p><p>为用户提供良好的保障（小程序发布，严格是审查流程）</p><p>劣势：</p><p>限制较多，页面大小不能超过1M，不能打开超过5个层级的页面</p><p>样式单一，部分组件已经是成型的，样式不可修改，例如：幻灯片，导航</p><p>推广面窄，不能分享朋友圈，只能通过分享给朋友，附加小程序推广</p><p>依托与微信，无法开发后台管理功能</p><p>后台调试麻烦，因为api接口必须https请求且公网地址</p><p>真机测试，个别安卓和苹果表现迥异，例如安卓的定位功能加载很慢</p><p>13.微信小程序和H5的区别？</p><p>运行环境不同（小程序在微信运行，h5在浏览器运行）</p><p>开发成本不同（h5需要兼容不同的浏览器）</p><p>获取系统权限不同（系统级权限可以和小程序无缝衔接）</p><p>应用在生成环境的运行速度流程（h5需不断对项目优化来提高用户体验）</p><p>14.怎么解决微信小程序的异步请求问题？</p><p>在回调函数中调用下一个组件的函数</p><ul><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    app.js         success:function(info){                 that.apirtnCallback(info)         }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>index.js</p><ul><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">onLoad:function(){                 app.apirtnCallback = res =&gt;{                         console.log(res)                 }         }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>15.小程序关联微信公众号如何确定用户的唯一性？</p><p>使用wx.getUserlnfo方法 withCredentials为true时，可获取encryptedData，里面有union_id，后端需要进行对称解密</p><p>16.使用webview直接加载要注意那些事项？</p><p>必须要在小程序后台使用管理员添加业务域名</p><p>h5页面跳转至小程序的脚步必须是1.3.1以上</p><p>微信分享只可以是小程序的主名称，如要自定义分享内容，需小程序版本在1.7.1以上</p><p>h5的支付不可以是微信公众号的appid，必须是小程序的appid，而且用户的openid也必须是用户和小程序的</p><p>17.小程序调用后台接口遇到那些问题？</p><p>数据的大小限制，超过范围会直接导致整个小程序崩溃，除非重启小程序</p><p>小程序不可以直接渲染文章内容这类型的html文本，显示需要借助插件</p><p>注：插件渲染会导致页面加载变慢，建议在后台对文章内容的html进行过滤，后台直接处理批量替换p标签div标签为view标签，然后其他的标签让插件来做</p><p>18.微信小程序如何实现下拉刷新？</p><p>用view代替scroll-view，设置onPullDownRefresh函数实现</p><p>19.webview中的页面怎么跳转回小程序?</p><ul><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">   wx.miniProgram.navigateTo({        url:&#39;pages/login/login&#39;+&#39;$params&#39;    })    //跳转到小程序导航页面    wx.miniProgram.switchTab({        url:&#39;/pages/index/index&#39;    })</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>20.bindtap和catchtap的区别？</p><p>bind事件绑定不会阻止冒泡事件向上冒泡</p><p>catch事件绑定可以阻止冒泡事件向上冒泡</p><p>21.简述wx.navigateTo(),wx.redirectTo(),wx.switchTab(),wx.navigateBack(),wx.reLaunch()的区别？</p><p>在wxml页面中：跳转新页面，在当前页打开，切换到首页Tab</p><p>在js页面中：分为应用内的页面，和tabBar页面</p><p>如果上述跳转遇到跳转失败或者无效的问题，请访问：wx.navigateTo/wx.redirectTo无效</p><p>22.小程序和Vue写法的区别？</p><p>遍历的时候：小程序wx:for=&quot;list&quot;,而Vue是v-for=&quot;item in list&quot;</p><p>调用data模型（赋值）的时候：</p><p>小程序：this.data.item // 调用，this.setDate({item:1})//赋值</p><p>Vue：this.item //调用，this.item=1 //赋值</p><p>23.小程序与原生App那个好？</p><p>各有各自的优点，都又有缺点</p><p>小程序的优点：</p><p>基于微信平台开发，享受微信自带的流量，这个优点最大</p><p>无需安装，只要打开微信就能用，不占手机内存，体验好</p><p>开发周期段，一般最多一个月就可以上线完成</p><p>开发所需的资金少，所需资金是开发原生APP的一半不到</p><p>小程序名称是唯一的，在微信的搜索里权重很高</p><p>容易上手，只要之前有HTML+CSS+JS基础知识，写小程序基本没有大问题</p><p>基本不需要考虑兼容性问题，只要微信可以正常运行的机器，就可以运行小程序</p><p>发布，审核高效，基本上午发布审核，下午就审核通过，升级简单，支持灰度发布</p><p>开发文档完善，社区活跃</p><p>支持插件式开发，一些基本功能可以开发成插件，供多个小程序使用</p><p>缺点：</p><p>局限性很强（比如页面大小不能超过1M，不能打开超过5个层级的页面，样式单一，小程序的部分组件已经是成型的了，样式不能修改，比如幻灯片，导航）只能依赖于微信依托与微信，无法开发后台管理功能</p><p>不利于推广，推广面窄，不能分享朋友圈，只能分享给朋友，附近小程序推广，其中附加小程序也收到微信限制</p><p>后台调试麻烦，因为API接口必须https请求，且公网地址，也就是说后台代码必须发布到远程服务器上；当然我们可以修改host进行dns映射把远程服务器转到本地，或者开启tomcat远程调试；不管怎么说终归调试比较麻烦</p><p>前台测试有诸多坑，最头疼莫过于模拟器与真机显示不一致</p><p>js引用只能使用绝对路径，不能操作DOM</p><p>原生App优点：</p><p>原生的相应速度快</p><p>对于有无网络操作时，譬如离线操作基本选用原生开发</p><p>需要调用系统硬件的功能（摄像头，拨号，短信蓝牙..）</p><p>在无网络或者弱网情况下体验好</p><p>原生App缺点：</p><p>开发周期长，开发成本高，需要下载</p><p>24.小程序的发布流程（开发流程）</p><p>参考：<a href="https://www.cnblogs.com/ssrstm/p/6855572.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/ssrstm/p/6855572.html</a></p><p>注册微信小程序账号</p><p>获取微信小程序的AppID</p><p>下载微信小程序开发者工具</p><p>创建demo项目</p><p>去微信公众号配置域名</p><p>手机浏览</p><p>代码上传</p><p>提交审核</p><p>小程序发布</p><p>25.webview中的页面怎么跳回小程序中？</p><p>首先，需要在你的html页面中引用一个js文件</p><ul><li></li><li></li><li></li><li></li><li></li><li></li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">&lt;script type=&quot;text/javascript&quot; src=&quot;https://res.wx.qq.com/open/js/jweixin-1.3.0.js&quot;&gt;&lt;/script&gt;//然后为你的按钮标签注册一个点击事件$(&quot;.kaiqi&quot;).click(function(){        wx.miniProgram.redirectTo({url: &#39;/pages/indexTwo/indexTwo&#39;})});// 这里的redirectTo跟小程序的wx.redirectTo()跳转页面是一样的，会关闭当前跳转到页面，换成navigateTo，跳转页面就不会关闭当前页面</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>26.小程序授权登录流程</p><p>（授权，微信登录获取code，微信登录，获取 iv , encryptedData 传到服务器后台，如果没有注册，需要注册。）</p><p>27.小程序支付如何实现？</p><p>小程序注册，要以公司的身份去注册一个小程序，才有微信支付权限</p><p>绑定商户号</p><p>在小程序填写合法域</p><p>调用wx.login()获取appid</p><p>调用</p><ul><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">wx.requestPayment({    &#39;timeStamp&#39;: &#39;&#39;,//时间戳从1970年1月1日00:00:00至今的秒数,即当前的时间    &#39;nonceStr&#39;: &#39;&#39;,//随机字符串，长度为32个字符以下。    &#39;package&#39;: &#39;&#39;,//统一下单接口返回的 prepay_id 参数值，提交格式如：prepay_id=*    &#39;signType&#39;: &#39;MD5&#39;,//签名类型，默认为MD5，支持HMAC-SHA256和MD5。注意此处需与统一下单的签名类型一致    &#39;paySign&#39;: &#39;&#39;,//签名,具体签名方案参见微信公众号支付帮助文档;    &#39;success&#39;:function(res){},//成功回调    &#39;fail&#39;:function(res){},//失败    &#39;complete&#39;:function(res){}//接口调用结束的回调函数（调用成功、失败都会执行）})</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/dC7uicz39nZXxjeOLjosSkZu7XJ6l2XAw11Lewg5ichX8oErrSFG4VPw2etUhTRFBU5zAS1fT7B6zxIhN2KAMszQ/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>28.小程序还有那些功能？</p><p>客服功能，录音，视频，音频，地图，定位，拍照，动画，canvas</p><p>常见问题：</p><ol><li>rpx：小程序的尺寸单位，规定屏幕为750rpx，可适配不同分辨率屏幕</li><li>本地资源无法通过wxss获取：background-image：可以使用网络图片，或者base64，或者使用标签</li><li>wx.navigateTo无法打开页面：一个应用同时只能打开5个页面，请避免多层级的交互方式，或使用wx.redirectTo</li><li>tabBar设置不显示：</li></ol><ul><li>tabBar的数量少于2项或超过5项都不会显示。</li><li>tabBar写法错误导致不会显示。</li><li>tabBar没有写pagePath字段（程序启动后显示的第一个页面）</li></ul><h1 id="小程序面试题2" tabindex="-1">小程序面试题2 <a class="header-anchor" href="#小程序面试题2" aria-hidden="true">#</a></h1><h2 id="微信小程序面试题" tabindex="-1">微信小程序面试题 <a class="header-anchor" href="#微信小程序面试题" aria-hidden="true">#</a></h2><h3 id="_1-小程序有几个文件" tabindex="-1">1. 小程序有几个文件？ <a class="header-anchor" href="#_1-小程序有几个文件" aria-hidden="true">#</a></h3><blockquote><ul><li><code>WXML</code>：微信自己定义的一套组件</li><li><code>WXSS</code> : 用于描述 <code>WXML</code> 的组件样式</li><li><code>js</code> : 逻辑处理</li><li><code>json</code> : 小程序页面配置</li></ul></blockquote><h3 id="_2-小程序怎么跟随事件传值" tabindex="-1">2.小程序怎么跟随事件传值 <a class="header-anchor" href="#_2-小程序怎么跟随事件传值" aria-hidden="true">#</a></h3><blockquote><p>在 页面标签上通过 绑定 <code>dataset-key = value</code> ， 然后绑定点击通过<code>e.currentTarget.dataset.key</code> 来获取标签上绑定的值。</p></blockquote><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">&lt;button bindtap=&quot;get&quot;  data-name=&quot;测试&quot;&gt; 拿到传值&lt;/button&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">get(e){</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(e.currentTarget.dataset.name)</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_3-小程序-wxss-与-css-的区别" tabindex="-1">3. 小程序 <code>WXSS</code> 与 <code>CSS</code> 的区别 <a class="header-anchor" href="#_3-小程序-wxss-与-css-的区别" aria-hidden="true">#</a></h3><blockquote><h4 id="wxss" tabindex="-1"><code>WXSS</code> <a class="header-anchor" href="#wxss" aria-hidden="true">#</a></h4><ul><li><code>wxss</code> 背景图片只能引入外链，不能使用本地图片</li><li>小程序样式使用 <code>@import</code> 引入 外联样式文件，地址为相对路径。</li><li>尺寸单位为 <code>rpx</code> , <code>rpx</code> 是响应式像素,可以根据屏幕宽度进行自适应。</li></ul></blockquote><h3 id="_4-小程序的双向绑定和vue哪里不一样。" tabindex="-1">4. 小程序的双向绑定和Vue哪里不一样。 <a class="header-anchor" href="#_4-小程序的双向绑定和vue哪里不一样。" aria-hidden="true">#</a></h3><blockquote><p>小程序 直接使用<code>this.data.key = value</code> 是 不能更新到视图当中的。</p><p>必须使用 <code>this.setData({ key ：value })</code> 来更新值。</p></blockquote><h3 id="_5-小程序的生命周期函数" tabindex="-1">5. 小程序的生命周期函数 <a class="header-anchor" href="#_5-小程序的生命周期函数" aria-hidden="true">#</a></h3><blockquote><ul><li><code>onLoad</code> : 页面加载时触发。一个页面只会调用一次，可以在 <code>onLoad</code>的参数中获取打开当前页面路径中的参数</li><li><code>onShow</code> : 页面显示 / 切入前台时触发调用。</li><li><code>onReady</code> : 页面初次渲染完成时触发,一个页面只会调用一次。</li><li><code>onHide</code> : 页面隐藏 / 切入后台时触发，如 <code>navigateTo</code> 或底部<code>tab</code>切换到其他页面，小程序切入后台等</li><li><code>onUnload</code> : 页面卸载时触发。如 <code>redirectTo</code>或 <code>navigateBack</code> 到其他页面时.</li></ul></blockquote><h3 id="_6-小程序怎么实现下拉刷新" tabindex="-1">6. 小程序怎么实现下拉刷新 <a class="header-anchor" href="#_6-小程序怎么实现下拉刷新" aria-hidden="true">#</a></h3><blockquote><h4 id="两种方案" tabindex="-1">两种方案 <a class="header-anchor" href="#两种方案" aria-hidden="true">#</a></h4><h5 id="方案-一" tabindex="-1">方案 一 ： <a class="header-anchor" href="#方案-一" aria-hidden="true">#</a></h5><ul><li>通过在 <code>app.json</code> 中， 将 <code>&quot;enablePullDownRefresh&quot;: true,</code> 开启全局下拉刷新。</li><li>或者通过在 <code>组件 .json</code> ， 将 <code>&quot;enablePullDownRefresh&quot;: true,</code> 单组件下拉刷新。</li></ul><h5 id="方案二" tabindex="-1">方案二： <a class="header-anchor" href="#方案二" aria-hidden="true">#</a></h5><ul><li><code>scroll-view</code> ：使用该滚动组件 自定义刷新，通过 <code>bindscrolltoupper</code> 属性， 当滚动到顶部/左边，会触发 <code>scrolltoupper</code>事件，所以我们可以利用这个属性，来实现下拉刷新功能。</li></ul></blockquote><h3 id="_7-bindtap-和-catchtap-区别" tabindex="-1">7. <code>bindtap</code> 和 <code>catchtap</code> 区别 <a class="header-anchor" href="#_7-bindtap-和-catchtap-区别" aria-hidden="true">#</a></h3><blockquote><p>相同点： <code>都是点击事件</code></p><p>不同点： <code>bindtap</code> 不会阻止冒泡， <code>catchtap</code> 可以阻止冒泡。</p></blockquote><h3 id="_8-小程序有哪些传递数据的方法" tabindex="-1">8. 小程序有哪些传递数据的方法 <a class="header-anchor" href="#_8-小程序有哪些传递数据的方法" aria-hidden="true">#</a></h3><blockquote><h4 id="_1-使用全局变量" tabindex="-1">1. 使用全局变量 <a class="header-anchor" href="#_1-使用全局变量" aria-hidden="true">#</a></h4><ul><li>在 <code>app.js</code> 中的 <code>this.globalData = { }</code> 中放入要存储的数据。</li><li>在<code>组件.js</code> 中， 头部 引入 <code>const app = getApp();</code> 获取到全局变量</li><li>直接使用 <code>app.globalData.key</code> 来进行赋值和获取值。</li></ul><h4 id="_2-使用-路由" tabindex="-1">2. 使用 路由 <a class="header-anchor" href="#_2-使用-路由" aria-hidden="true">#</a></h4><ul><li><code>wx.navigateTo</code> 和 <code>wx.redirectTo</code> 时，可以通过在 <code>url</code> 后 拼接 + 变量， 然后在 <code>目标页面</code> 通过在 <code>onLoad</code> 周期中，通过参数来获取传递过来的值。</li></ul><h4 id="_3-使用本地缓存" tabindex="-1">3. 使用本地缓存 <a class="header-anchor" href="#_3-使用本地缓存" aria-hidden="true">#</a></h4></blockquote><h3 id="_9-简述下-wx-navigateto-wx-redirectto-wx-switchtab-wx-navigateback-wx-relaunch-区别" tabindex="-1">9. 简述下 <code>wx.navigateTo()</code>, <code>wx.redirectTo()</code>, <code>wx.switchTab()</code>, <code>wx.navigateBack()</code>, <code>wx.reLaunch()</code> 区别 <a class="header-anchor" href="#_9-简述下-wx-navigateto-wx-redirectto-wx-switchtab-wx-navigateback-wx-relaunch-区别" aria-hidden="true">#</a></h3><blockquote><ul><li><code>wx.navigateTo()</code> : 保留当前页面，跳转到应用内的某个页面。但是不能跳到 <code>tabbar</code> 页面</li><li><code>wx.redirectTo()</code> : 关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 <code>tabbar</code> 页面</li><li><code>wx.switchTab()</code> : 跳转到 <code>TabBar</code> 页面，并关闭其他所有非 <code>tabBar</code> 页面</li><li><code>wx.navigateBack()</code> : 关闭当前页面，返回上一页面或多级页面。可通过<code>getCurrentPages()</code> 获取当前的页面栈，决定需要返回几层</li><li><code>wx.reLaunch()</code> : 关闭所有页面，打开到应用的某个页面。</li></ul></blockquote><h3 id="_10-小程序-wx-if-和-hidden-的区别" tabindex="-1">10. 小程序 <code>wx:if</code> 和 <code>hidden</code> 的区别 <a class="header-anchor" href="#_10-小程序-wx-if-和-hidden-的区别" aria-hidden="true">#</a></h3><blockquote><ul><li><code>wx:if</code> : 有更高的切换消耗。</li><li><code>hidden</code> : 有更高的初始渲染消耗。</li></ul><h4 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-hidden="true">#</a></h4><ul><li>频繁切换使用 <code>hidden</code>, 运行时条件变化使用<code>wx: if</code></li></ul></blockquote><h3 id="_11-app-json-全局配置文件描述" tabindex="-1">11. <code>app.json</code> 全局配置文件描述 <a class="header-anchor" href="#_11-app-json-全局配置文件描述" aria-hidden="true">#</a></h3><blockquote><ul><li><code>pages</code> : 用于存放当前小程序的所有页面路径</li><li><code>window</code> : 小程序所有页面的顶部背景颜色，文字颜色配置。</li><li><code>tabBar</code> : 小程序底部的<code>Tab</code> ,最多5个，最少2个。</li></ul></blockquote><h3 id="_12-如何封装小程序请求" tabindex="-1">12. 如何封装小程序请求 <a class="header-anchor" href="#_12-如何封装小程序请求" aria-hidden="true">#</a></h3><blockquote><ul><li></li><li><ol><li>封装 <code>wx.request</code> 请求传递需要的参数( <code>url</code> , <code>data</code> , <code>method</code> , <code>success 成功回调</code> ， <code>fail 失败回调</code> ) , 封装常用方法 <code>POST</code> , <code>GET</code> , <code>DELETE</code> , <code>PUT</code> .... 最后导出这些方法</li></ol></li><li></li><li><ol><li>然后新建一个 <code>api.js</code> 文件，导入封装好的方法，然后调取相应的方法，传递数据。</li></ol></li></ul></blockquote><h4 id="wx-request-封装" tabindex="-1"><code>wx.request 封装</code> <a class="header-anchor" href="#wx-request-封装" aria-hidden="true">#</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">var app = getApp(); //获取小程序全局唯一app实例</span></span>
<span class="line"><span style="color:#A6ACCD;">var host = &#39;******************&#39;; //接口地址</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">//POST请求</span></span>
<span class="line"><span style="color:#A6ACCD;">function post(url, data, success,fail) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  request(url, postData, &quot;POST&quot;, doSuccess, doFail);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">//GET请求</span></span>
<span class="line"><span style="color:#A6ACCD;">function get(url, data, success, fail) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  request(url, postData, &quot;GET&quot;, doSuccess, doFail);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">function request(url, data, method, success, fail) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  wx.showLoading({</span></span>
<span class="line"><span style="color:#A6ACCD;">    title: &quot;正在加载中...&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  })</span></span>
<span class="line"><span style="color:#A6ACCD;">  wx.request({</span></span>
<span class="line"><span style="color:#A6ACCD;">    url: host + url, //请求地址</span></span>
<span class="line"><span style="color:#A6ACCD;">    method: method, //请求方法</span></span>
<span class="line"><span style="color:#A6ACCD;">    header: { //请求头</span></span>
<span class="line"><span style="color:#A6ACCD;">      &quot;Content-Type&quot;: &quot;application/json;charset=UTF-8&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    },</span></span>
<span class="line"><span style="color:#A6ACCD;">    data: data, //请求参数    </span></span>
<span class="line"><span style="color:#A6ACCD;">    dataType: &#39;json&#39;, //返回数据格式</span></span>
<span class="line"><span style="color:#A6ACCD;">    responseType: &#39;text&#39;, //响应的数据类型</span></span>
<span class="line"><span style="color:#A6ACCD;">    success: function(res) {</span></span>
<span class="line"><span style="color:#A6ACCD;">      wx.hideLoading();</span></span>
<span class="line"><span style="color:#A6ACCD;">      //成功执行方法，参数值为res.data,直接将返回的数据传入</span></span>
<span class="line"><span style="color:#A6ACCD;">      success(res.data);</span></span>
<span class="line"><span style="color:#A6ACCD;">    },</span></span>
<span class="line"><span style="color:#A6ACCD;">    fail: function() {</span></span>
<span class="line"><span style="color:#A6ACCD;">      //失败执行方法</span></span>
<span class="line"><span style="color:#A6ACCD;">      fail();</span></span>
<span class="line"><span style="color:#A6ACCD;">    },</span></span>
<span class="line"><span style="color:#A6ACCD;">  })</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">module.exports = {</span></span>
<span class="line"><span style="color:#A6ACCD;">  postRequest: post,</span></span>
<span class="line"><span style="color:#A6ACCD;">  getRequest: get,</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h4 id="组件使用-封装好的请求" tabindex="-1"><code>组件使用 封装好的请求</code> <a class="header-anchor" href="#组件使用-封装好的请求" aria-hidden="true">#</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">var http = require(&#39;../../utils/request.js&#39;); //相对路径</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">var params = {//请求参数</span></span>
<span class="line"><span style="color:#A6ACCD;">  id:this.data.userId</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">http.postRequest(&quot;user/delUser&quot;, params, function(res) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(&quot;修改成功！&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">}, function(res) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(&quot;修改失败！！！&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="_13-小程序运行机制" tabindex="-1">13. 小程序运行机制 <a class="header-anchor" href="#_13-小程序运行机制" aria-hidden="true">#</a></h3><blockquote><ul><li><code>热启动</code> ：假如用户已经打开了某个小程序，在一定时间内再次打开小程序的话，这个时候我们就不再需要重新启动了，这需要把我们的后台打开的小程序切换到前台来使用。</li><li><code>冷启动</code>：用户首次打开小程序或被微信主动销毁再次打开的情况，此时小程序需要重新加载启动。</li></ul></blockquote><h3 id="_14-小程序什么时候会主动销毁" tabindex="-1">14. 小程序什么时候会主动销毁？ <a class="header-anchor" href="#_14-小程序什么时候会主动销毁" aria-hidden="true">#</a></h3><blockquote><p>小程序在进入后台之后，客户端会帮我们在一定时间内维持我们的一个状态，超过五分钟后，会被微信主动销毁.</p><h4 id="官方也没有明确说明-什么时候销毁-在不同机型表现也不一样" tabindex="-1">官方也没有明确说明 什么时候销毁， 在不同机型表现也不一样， <a class="header-anchor" href="#官方也没有明确说明-什么时候销毁-在不同机型表现也不一样" aria-hidden="true">#</a></h4><p>2019年开发时：时间官方文档没有说明，但是经过询问一般指5分钟内</p><p>2020年开发时：时间官方文档没有说明，实测安卓没有固定时间，内存足够情况下，有时候一天了还在，有时候几分钟就没了。</p></blockquote><h3 id="_15-微信授权流程" tabindex="-1">15. 微信授权流程 <a class="header-anchor" href="#_15-微信授权流程" aria-hidden="true">#</a></h3><p><img src="https://mmbiz.qpic.cn/mmbiz_png/TRiapJU3MMsaQhEcneBjgXlYRugEiaz8biarGyGM0bDbRQib7JgicXcVhCicjP4abnMt4ibUGoQwt5P66S1D18XXt9pdQ/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-hidden="true">#</a></h2>`,214);function w(x,g,_,v,y,D){const n=o,p=i,l=c;return r(),d("div",null,[m,a(n,{readTime:"17",words:"5.5k"}),C,e("p",null,"多了一些 wx:if 这样的属性以及"+u()+" 这样的表达式",1),A,a(p),a(l)])}const j=t(b,[["render",w]]);export{S as __pageData,j as default};
