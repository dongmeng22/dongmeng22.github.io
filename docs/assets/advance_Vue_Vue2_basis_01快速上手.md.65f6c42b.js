import{_ as c,a as i}from"./chunks/Contributors.vue_vue_type_script_setup_true_lang.3dcd3b9e.js";import{_ as D}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.b6ca37c5.js";import{_ as d,o as y,c as F,D as a,x as s,t as e,a as p,Q as n}from"./chunks/framework.c7127555.js";import"./chunks/commonjsHelpers.725317a4.js";const $=JSON.parse('{"title":"0. 基本认识","description":"","frontmatter":{},"headers":[{"level":2,"title":"0.1 特点","slug":"_0-1-特点","link":"#_0-1-特点","children":[]},{"level":2,"title":"0.2 与其他前端 JS 框架的关联","slug":"_0-2-与其他前端-js-框架的关联","link":"#_0-2-与其他前端-js-框架的关联","children":[]},{"level":2,"title":"0.3 Vue 扩展插件","slug":"_0-3-vue-扩展插件","link":"#_0-3-vue-扩展插件","children":[]},{"level":2,"title":"2.1 el","slug":"_2-1-el","link":"#_2-1-el","children":[]},{"level":2,"title":"2.2 data","slug":"_2-2-data","link":"#_2-2-data","children":[]},{"level":2,"title":"关于el和data的两种写法","slug":"关于el和data的两种写法","link":"#关于el和data的两种写法","children":[]},{"level":2,"title":"例子","slug":"例子","link":"#例子","children":[]},{"level":2,"title":"M","slug":"m","link":"#m","children":[]},{"level":2,"title":"V","slug":"v","link":"#v","children":[]},{"level":2,"title":"VM","slug":"vm","link":"#vm","children":[]},{"level":2,"title":"MVVM","slug":"mvvm","link":"#mvvm","children":[]},{"level":2,"title":"Contributors","slug":"contributors","link":"#contributors","children":[]}],"relativePath":"advance/Vue/Vue2_basis/01快速上手.md","lastUpdated":1678883566000}'),u={name:"advance/Vue/Vue2_basis/01快速上手.md"},b=s("blockquote",null,[s("p",null,"今天学习Vue基础知识...从头开始学，学的还是Vue2, Vue3之前博文里介绍过了，其实本文是我刚学Vue时的笔记，参考的是B站尚硅谷的视频....")],-1),h=s("h1",{id:"_0-基本认识",tabindex:"-1"},[p("0. 基本认识 "),s("a",{class:"header-anchor",href:"#_0-基本认识","aria-hidden":"true"},"#")],-1),m=n('<blockquote><p>渐进式 JavaScript 框架，用来动态构建用户界面</p></blockquote><p><a href="https://cn.vuejs.org/" target="_blank" rel="noreferrer">https://cn.vuejs.org/</a></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/11199982790f45d49495f177e3776a65~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p><h2 id="_0-1-特点" tabindex="-1">0.1 特点 <a class="header-anchor" href="#_0-1-特点" aria-hidden="true">#</a></h2><ol><li>遵循 MVVM 模式</li><li>编码简洁，体积小，运行效率高，适合 移动/PC 端开发</li><li>它本身只关注 UI，可以轻松引入 vue 插件或其它第三方库开发项目</li><li>采用<strong>组件化</strong>模式，提高代码复用率、且让代码更好维护</li><li><strong>声明式</strong>编码，让编码人员无需直接操作DOM，提高开发效率</li><li>使用<strong>虚拟DOM</strong>和<strong>Diff算法</strong>，尽量复用DOM节点</li></ol><h2 id="_0-2-与其他前端-js-框架的关联" tabindex="-1">0.2 与其他前端 JS 框架的关联 <a class="header-anchor" href="#_0-2-与其他前端-js-框架的关联" aria-hidden="true">#</a></h2><ul><li>借鉴 angular 的 <strong>模板</strong> 和 <strong>数据绑定</strong> 技术</li><li>借鉴 react 的 <strong>组件化</strong> 和 <strong>虚拟DOM</strong> 技术</li></ul><h2 id="_0-3-vue-扩展插件" tabindex="-1">0.3 Vue 扩展插件 <a class="header-anchor" href="#_0-3-vue-扩展插件" aria-hidden="true">#</a></h2><ul><li>vue-cli：vue 脚手架</li><li>vue-resource(axios)：ajax 请求</li><li>vue-router：路由</li><li>vuex：状态管理（它是 vue 的插件但是没有用 vue-xxx 的命名规则）</li><li>vue-lazyload：图片懒加载</li><li>vue-scroller：页面滑动相关</li><li>mint-ui：基于 vue 的 UI 组件库（移动端）</li><li>element-ui：基于 vue 的 UI 组件库（PC 端）</li></ul><h1 id="_1-引入vue-js" tabindex="-1">1. 引入Vue.js <a class="header-anchor" href="#_1-引入vue-js" aria-hidden="true">#</a></h1><p>本地引入 CDN引入</p><h1 id="_2-创建vue对象" tabindex="-1">2. 创建Vue对象 <a class="header-anchor" href="#_2-创建vue对象" aria-hidden="true">#</a></h1>',12),C=s("li",null,"想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；",-1),A=s("li",null,"root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；",-1),_=s("li",null,"root容器里的代码被称为【Vue模板】；",-1),v=s("li",null,"Vue实例和容器是一一对应的；",-1),g=s("li",null,"真实开发中只有一个Vue实例，并且会配合着组件一起使用；",-1),f=s("li",null,"一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；",-1),V=n(`<div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">//创建Vue实例</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">el</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#root</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串。</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">YK菌</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">address</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">合肥</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>注意区分：js表达式 和 js代码(语句)</p><ol><li><p>表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方： (1). <code>a</code> (2). <code>a+b</code> (3). <code>demo(1)</code> (4). <code>x === y ? &#39;a&#39; : &#39;b&#39;</code></p></li><li><p>js代码(语句) (1). <code>if(){}</code> (2). <code>for(){}</code></p></li></ol><h2 id="_2-1-el" tabindex="-1">2.1 el <a class="header-anchor" href="#_2-1-el" aria-hidden="true">#</a></h2><p>指定根element(选择器)</p><h2 id="_2-2-data" tabindex="-1">2.2 data <a class="header-anchor" href="#_2-2-data" aria-hidden="true">#</a></h2><p>初始化数据(页面可以访问)</p><h2 id="关于el和data的两种写法" tabindex="-1">关于el和data的两种写法 <a class="header-anchor" href="#关于el和data的两种写法" aria-hidden="true">#</a></h2><ol><li>el有2种写法</li></ol><p>(1) new Vue时候配置el属性。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> v </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">el</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#root</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//第一种写法</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">YK菌</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>(2) 先创建Vue实例，随后再通过vm.$mount(&#39;#root&#39;)指定el的值。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> v </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">YK菌</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$mount</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#root</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">//第二种写法 */</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="2"><li>data有2种写法</li></ol><p>(1) 对象式</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">data</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">YK菌</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>(2) 函数式</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">data</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@@@</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,this</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">//此处的this是Vue实例对象</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">YK菌</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如何选择：目前哪种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错。</p><ol start="3"><li>一个重要的原则</li></ol><p>由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了。</p>`,21),x={id:"_3-双向数据绑定-v-model-显示数据-xxx-插值语法",tabindex:"-1"},E=s("a",{class:"header-anchor",href:"#_3-双向数据绑定-v-model-显示数据-xxx-插值语法","aria-hidden":"true"},"#",-1),k=n(`<h2 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-hidden="true">#</a></h2><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">&lt;!--view--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-model</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">msg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;</span><span style="color:#F07178;">br</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;">&lt;!--指令--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Hello {{msg}}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;">&lt;!--大括号表达式--&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../js/vue.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> vm </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 配置对象 options </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 配置选项(option)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">el</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// element: 指定用vue来管理页面中的哪个标签区域</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 数据（model）</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">World</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e68bf479324e4db99d6f568a1de206b3~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p><h1 id="_4-理解vue的mvvm实现" tabindex="-1">4. 理解Vue的MVVM实现 <a class="header-anchor" href="#_4-理解vue的mvvm实现" aria-hidden="true">#</a></h1><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2cfaef66bd3b4b67b032b225ffa34483~tplv-k3u1fbpfcp-zoom-1.image" alt="image"></p><h2 id="m" tabindex="-1">M <a class="header-anchor" href="#m" aria-hidden="true">#</a></h2><p>模型(Model) ：data中的数据</p><h2 id="v" tabindex="-1">V <a class="header-anchor" href="#v" aria-hidden="true">#</a></h2><p>视图(View) ：模板代码（不是静态页面） （两个语法：指令，大括号表达式）</p><h2 id="vm" tabindex="-1">VM <a class="header-anchor" href="#vm" aria-hidden="true">#</a></h2><p>viewModel: 视图模型（Vue的实例）</p><ul><li>Dom Listeners （Dom 监听）</li><li>Data Bindings （数据绑定）</li></ul><hr><ol><li>data中所有的属性，最后都出现在了vm身上。</li><li>vm身上所有的属性 及 Vue原型上所有属性，在Vue模板中都可以直接使用。</li></ol><hr><h2 id="mvvm" tabindex="-1">MVVM <a class="header-anchor" href="#mvvm" aria-hidden="true">#</a></h2><p>MVVM 本质上是 MVC （Model-View- Controller）的改进版。即模型-视图-视图模型。</p><p><code>模型</code>model指的是后端传递的数据，<code>视图</code>view指的是所看到的页面。</p><p><code>视图模型</code>viewModel是 mvvm 模式的核心，它是连接 view 和 model 的桥梁。它有两个方向：</p><p>将<code>模型</code>转化成<code>视图</code>，即将后端传递的数据转化成所看到的页面。实现的方式是：<strong>数据绑定</strong> 将<code>视图</code>转化成<code>模型</code>，即将所看到的页面转化成后端的数据。实现的方式是：<strong>DOM 事件监听</strong></p><p>这两个方向都实现的，我们称之为<strong>数据的双向绑定</strong></p><blockquote><p>最后，欢迎关注我的专栏，和<strong>YK菌</strong>做好朋友</p></blockquote><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-hidden="true">#</a></h2>`,23);function j(l,M,T,w,S,q){const o=D,t=c,r=i;return y(),F("div",null,[b,h,a(o,{readTime:"4",words:"1.3k"}),m,s("ol",null,[C,A,_,v,g,s("li",null,e(l.xxx)+"中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性；",1),f]),V,s("h1",x,[p("3. 双向数据绑定 : v-model & 显示数据 : "+e(l.xxx)+" 插值语法 ",1),E]),k,a(t),a(r)])}const K=d(u,[["render",j]]);export{$ as __pageData,K as default};
