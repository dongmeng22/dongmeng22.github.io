import{_ as p,a as o}from"./chunks/Contributors.vue_vue_type_script_setup_true_lang.2d10c1d4.js";import{_ as i}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.63457685.js";import{_ as t,o as r,c,D as s,x as a,a as y,Q as d}from"./chunks/framework.c7127555.js";import"./chunks/commonjsHelpers.725317a4.js";const w=JSON.parse('{"title":"1. 函数（Function）","description":"","frontmatter":{},"headers":[{"level":3,"title":"1.1 创建函数","slug":"_1-1-创建函数","link":"#_1-1-创建函数","children":[]},{"level":3,"title":"1.2 遍历对象","slug":"_1-2-遍历对象","link":"#_1-2-遍历对象","children":[]},{"level":3,"title":"1.3 形参和实参","slug":"_1-3-形参和实参","link":"#_1-3-形参和实参","children":[]},{"level":3,"title":"1.4 返回值，就是函数执行的结果。","slug":"_1-4-返回值-就是函数执行的结果。","link":"#_1-4-返回值-就是函数执行的结果。","children":[]},{"level":3,"title":"1.5 参数，函数的实参也可以是任意的数据类型","slug":"_1-5-参数-函数的实参也可以是任意的数据类型","link":"#_1-5-参数-函数的实参也可以是任意的数据类型","children":[]},{"level":3,"title":"1.6 方法（method）","slug":"_1-6-方法-method","link":"#_1-6-方法-method","children":[]},{"level":3,"title":"call()、apply()","slug":"call-、apply","link":"#call-、apply","children":[]},{"level":3,"title":"arguments","slug":"arguments","link":"#arguments","children":[]},{"level":3,"title":"this（调用函数的那个对象）","slug":"this-调用函数的那个对象","link":"#this-调用函数的那个对象","children":[]},{"level":3,"title":"3.1 全局作用域","slug":"_3-1-全局作用域","link":"#_3-1-全局作用域","children":[]},{"level":3,"title":"3.2 函数作用域","slug":"_3-2-函数作用域","link":"#_3-2-函数作用域","children":[]},{"level":3,"title":"3.3 变量的声明提前","slug":"_3-3-变量的声明提前","link":"#_3-3-变量的声明提前","children":[]},{"level":3,"title":"3.4 函数的声明提前","slug":"_3-4-函数的声明提前","link":"#_3-4-函数的声明提前","children":[]},{"level":3,"title":"3.5 this（上下文对象）","slug":"_3-5-this-上下文对象","link":"#_3-5-this-上下文对象","children":[]},{"level":3,"title":"构造函数的执行流程：","slug":"构造函数的执行流程","link":"#构造函数的执行流程","children":[]},{"level":3,"title":"instanceof 用来检查一个对象是否是一个类的实例","slug":"instanceof-用来检查一个对象是否是一个类的实例","link":"#instanceof-用来检查一个对象是否是一个类的实例","children":[]},{"level":3,"title":"枚举对象中的属性","slug":"枚举对象中的属性","link":"#枚举对象中的属性","children":[]},{"level":3,"title":"hasOwnProperty()","slug":"hasownproperty","link":"#hasownproperty","children":[]},{"level":2,"title":"Contributors","slug":"contributors","link":"#contributors","children":[]}],"relativePath":"basics/javascript/05函数.md","lastUpdated":1678883566000}'),F={name:"basics/javascript/05函数.md"},h=a("h1",{id:"_1-函数-function",tabindex:"-1"},[y("1. 函数（Function） "),a("a",{class:"header-anchor",href:"#_1-函数-function","aria-hidden":"true"},"#")],-1),D=d(`<ul><li>函数也是一个对象，也具有普通对象的功能（能有属性）</li><li>函数中可以封装一些代码，在需要的时候可以去调用函数来执行这些代码</li><li>使用typeof检查一个函数时会返回function</li></ul><h3 id="_1-1-创建函数" tabindex="-1">1.1 创建函数 <a class="header-anchor" href="#_1-1-创建函数" aria-hidden="true">#</a></h3><ul><li>函数声明</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">函数名</span><span style="color:#89DDFF;">([</span><span style="color:#A6ACCD;font-style:italic;">形参1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">形参2</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;font-style:italic;">形参N</span><span style="color:#89DDFF;">]){</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">语句</span><span style="color:#89DDFF;">...</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>函数表达式</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> 函数名 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">([</span><span style="color:#A6ACCD;font-style:italic;">形参1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">形参2</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;font-style:italic;">形参N</span><span style="color:#89DDFF;">]){</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">语句</span><span style="color:#89DDFF;">...</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>调用函数</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">函数对象</span><span style="color:#A6ACCD;">([实参1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">实参2…实参N])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">fun</span><span style="color:#A6ACCD;">() </span><span style="color:#82AAFF;">sum</span><span style="color:#A6ACCD;">() </span><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">() </span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">() </span><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><p>当我们调用函数时，函数中封装的代码会按照编写的顺序执行</p></li><li><p>立即执行函数 函数定义完，立即被调用，这种函数叫做立即执行函数 立即执行函数往往只会执行一次</p></li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">){</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">b = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)(</span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">456</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_1-2-遍历对象" tabindex="-1">1.2 遍历对象 <a class="header-anchor" href="#_1-2-遍历对象" aria-hidden="true">#</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> v </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> obj)</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">property：name =</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">v</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;br/&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> )</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_1-3-形参和实参" tabindex="-1">1.3 形参和实参 <a class="header-anchor" href="#_1-3-形参和实参" aria-hidden="true">#</a></h3><ul><li>形参：形式参数</li></ul><ol><li>定义函数时，可以在()中定义一个或多个形参，形参之间使用,隔开</li><li>定义形参就相当于在函数内声明了对应的变量但是并不赋值，</li><li>形参会在调用时才赋值。</li></ol><ul><li>实参：实际参数</li></ul><ol><li>调用函数时，可以在()传递实参，传递的实参会赋值给对应的形参,</li><li>调用函数时JS解析器不会检查实参的类型和个数，可以传递任意数据类型的值。</li><li>如果实参的数量大于形参，多余实参将不会赋值，</li><li>如果实参的数量小于形参，则没有对应实参的形参将会赋值undefined</li></ol><h3 id="_1-4-返回值-就是函数执行的结果。" tabindex="-1">1.4 返回值，就是函数执行的结果。 <a class="header-anchor" href="#_1-4-返回值-就是函数执行的结果。" aria-hidden="true">#</a></h3><ul><li>使用return 来设置函数的返回值。</li></ul><ol><li>语法：return 值;</li><li>该值就会成为函数的返回值，可以通过一个变量来接收返回值</li><li>return后边的代码都不会执行，一旦执行到return语句时，函数将会立刻退出。</li><li>return后可以跟任意类型的值，可以是基本数据类型，也可以是一个对象。</li><li>如果return后不跟值，或者是不写return则函数默认返回undefined。</li></ol><ul><li>break、continue和return</li></ul><ol><li>break 退出循环</li><li>continue 跳过当次循环</li><li>return 退出函数</li></ol><h3 id="_1-5-参数-函数的实参也可以是任意的数据类型" tabindex="-1">1.5 参数，函数的实参也可以是任意的数据类型 <a class="header-anchor" href="#_1-5-参数-函数的实参也可以是任意的数据类型" aria-hidden="true">#</a></h3><h3 id="_1-6-方法-method" tabindex="-1">1.6 方法（method） <a class="header-anchor" href="#_1-6-方法-method" aria-hidden="true">#</a></h3><ul><li>可以将一个函数设置为一个对象的属性，</li><li>当一个对象的属性是一个函数时，</li><li>我们称这个函数是该对象的方法。</li><li>对象.方法名();</li><li>函数名()</li></ul><h1 id="_2-函数的属性和方法" tabindex="-1">2. 函数的属性和方法 <a class="header-anchor" href="#_2-函数的属性和方法" aria-hidden="true">#</a></h1><h3 id="call-、apply" tabindex="-1">call()、apply() <a class="header-anchor" href="#call-、apply" aria-hidden="true">#</a></h3><ul><li>这两个方法都是函数对象的方法需要通过函数对象来调用</li><li>通过两个方法可以直接调用函数，并且可以通过第一个实参来指定函数中this</li><li>不同的是call是直接传递函数的实参而apply需要将实参封装到一个数组中传递</li></ul><h3 id="arguments" tabindex="-1">arguments <a class="header-anchor" href="#arguments" aria-hidden="true">#</a></h3><ul><li>arguments和this类似，都是函数中的隐含的参数</li><li>arguments是一个类数组元素，它用来封装函数执行过程中的实参</li><li>所以即使不定义形参，也可以通过arguments来使用实参</li><li>arguments中有一个属性callee表示当前执行的函数对象</li></ul><h3 id="this-调用函数的那个对象" tabindex="-1">this（调用函数的那个对象） <a class="header-anchor" href="#this-调用函数的那个对象" aria-hidden="true">#</a></h3><p>this是函数的上下文对象，根据函数的调用方式不同会执向不同的对象 1.以函数的形式调用时，this是window 2.以方法的形式调用时，this是调用方法的对象 3.以构造函数的形式调用时，this是新建的那个对象 4.使用call和apply调用时，this是指定的那个对象 5.在全局作用域中this代表window</p><h1 id="_3-作用域" tabindex="-1">3. 作用域 <a class="header-anchor" href="#_3-作用域" aria-hidden="true">#</a></h1><p>作用域简单来说就是一个变量的作用范围。 在JS中作用域分成两种：</p><h3 id="_3-1-全局作用域" tabindex="-1">3.1 全局作用域 <a class="header-anchor" href="#_3-1-全局作用域" aria-hidden="true">#</a></h3><ul><li>直接在script标签中编写的代码都运行在全局作用域中</li><li>全局作用域在打开页面时创建，在页面关闭时销毁。</li><li>全局作用域中有一个全局对象window，window对象由浏览器提供，</li><li>可以在页面中直接使用，它代表的是整个的浏览器的窗口。</li><li>在全局作用域中创建的变量都会作为window对象的属性保存</li><li>在全局作用域中创建的函数都会作为window对象的方法保存</li><li>在全局作用域中创建的变量和函数可以在页面的任意位置访问。</li><li>在函数作用域中也可以访问到全局作用域的变量。</li><li>尽量不要在全局中创建变量</li></ul><h3 id="_3-2-函数作用域" tabindex="-1">3.2 函数作用域 <a class="header-anchor" href="#_3-2-函数作用域" aria-hidden="true">#</a></h3><ul><li>函数作用域是函数执行时创建的作用域，每次调用函数都会创建一个新的函数作用域。</li><li>函数作用域在函数执行时创建，在函数执行结束时销毁。</li><li>在函数作用域中创建的变量，不能在全局中访问。</li><li>当在函数作用域中使用一个变量时，它会先在自身作用域中寻找，</li><li>如果找到了则直接使用，如果没有找到则到上一级作用域中寻找，</li><li>如果找到了则使用，找不到则继续向上找，一直会</li></ul><h3 id="_3-3-变量的声明提前" tabindex="-1">3.3 变量的声明提前 <a class="header-anchor" href="#_3-3-变量的声明提前" aria-hidden="true">#</a></h3><p>在全局作用域中，使用var关键字声明的变量会在所有的代码执行之前被声明，但是不会赋值。 所以我们可以在变量声明前使用变量。但是不使用var关键字声明的变量不会被声明提前。 在函数作用域中，也具有该特性，使用var关键字声明的变量会在函数所有的代码执行前被声明， 如果没有使用var关键字声明变量，则变量会变成全局变量</p><h3 id="_3-4-函数的声明提前" tabindex="-1">3.4 函数的声明提前 <a class="header-anchor" href="#_3-4-函数的声明提前" aria-hidden="true">#</a></h3><p>在全局作用域中，使用函数声明创建的函数（function fun(){}）,会在所有的代码执行之前被创建， 也就是我们可以在函数声明前去调用函数，但是使用函数表达式(var fun = function(){})创建的函数没有该特性 在函数作用域中，使用函数声明创建的函数，会在所有的函数中的代码执行之前就被创建好了。</p><h3 id="_3-5-this-上下文对象" tabindex="-1">3.5 this（上下文对象） <a class="header-anchor" href="#_3-5-this-上下文对象" aria-hidden="true">#</a></h3><ul><li><p>我们每次调用函数时，解析器都会将一个上下文对象作为隐含的参数传递进函数。</p></li><li><p>使用this来引用上下文对象，根据函数的调用形式不同，this的值也不同。</p></li><li><p>指向当前对象</p></li><li><p>this的不同的情况：</p></li></ul><ol><li>以函数的形式调用时，this是window</li><li>以方法的形式调用时，this就是调用方法的对象</li><li>以构造函数的形式调用时，this就是新创建的对象</li></ol><h1 id="_4-构造函数" tabindex="-1">4.构造函数 <a class="header-anchor" href="#_4-构造函数" aria-hidden="true">#</a></h1><ul><li>构造函数是专门用来创建对象的函数</li><li>一个构造函数我们也可以称为一个类</li><li>通过一个构造函数创建的对象，我们称该对象时这个构造函数的实例</li><li>通过同一个构造函数创建的对象，我们称为一类对象</li><li>构造函数就是一个普通的函数，只是他的调用方式不同，</li><li>如果直接调用，它就是一个普通函数</li><li>如果使用new来调用，则它就是一个构造函数</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">age</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">gender</span><span style="color:#89DDFF;">){</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">age</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">gender</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">gender</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">sayName</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="构造函数的执行流程" tabindex="-1">构造函数的执行流程： <a class="header-anchor" href="#构造函数的执行流程" aria-hidden="true">#</a></h3><p>1.创建一个新的对象 2.将新的对象作为函数的上下文对象（this） 3.执行函数中的代码 4.将新建的对象返回</p><h3 id="instanceof-用来检查一个对象是否是一个类的实例" tabindex="-1">instanceof 用来检查一个对象是否是一个类的实例 <a class="header-anchor" href="#instanceof-用来检查一个对象是否是一个类的实例" aria-hidden="true">#</a></h3><ul><li>语法：对象 instanceof 构造函数</li><li>如果该对象时构造函数的实例，则返回true，否则返回false</li><li>Object是所有对象的祖先，所以任何对象和Object做instanceof都会返回true</li></ul><h3 id="枚举对象中的属性" tabindex="-1">枚举对象中的属性 <a class="header-anchor" href="#枚举对象中的属性" aria-hidden="true">#</a></h3><p>for…in</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> 属性名 </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> 对象)</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>for…in语句的循环体会执行多次，对象中有几个属性就会执行几次</li><li>每次讲一个属性名赋值给我们定义的变量，我们可以通过它来获取对象中的属性</li></ul><h1 id="_5-原型-prototype" tabindex="-1">5. 原型（prototype） <a class="header-anchor" href="#_5-原型-prototype" aria-hidden="true">#</a></h1><ul><li>创建一个函数以后，解析器都会默认在函数中添加一个数prototype</li><li>prototype属性指向的是一个对象，这个对象我们称为原型对象。</li><li>当函数作为构造函数使用，它所创建的对象中都会有一个隐含的属性执行该原型对象。</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">这个隐含的属性可以通过对象</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__来访问。</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>原型对象就相当于一个公共的区域，凡是通过同一个构造函数创建的对象他们通常都可以访问到相同的原型对象。</li><li>我们可以将对象中共有的属性和方法统一添加到原型对象中，</li><li>这样我们只需要添加一次，就可以使所有的对象都可以使用。</li><li>当我们去访问对象的一个属性或调用对象的一个方法时，它会先自身中寻找，</li><li>如果在自身中找到了，则直接使用。</li><li>如果没有找到，则去原型对象中寻找，如果找到了则使用，</li><li>如果没有找到，则去原型的原型中寻找，依此类推。直到找到Object的原型为止，Object的原型的原型为null，</li><li>如果依然没有找到则返回undefined</li></ul><h3 id="hasownproperty" tabindex="-1">hasOwnProperty() <a class="header-anchor" href="#hasownproperty" aria-hidden="true">#</a></h3><ul><li>这个方法可以用来检查对象自身中是否含有某个属性</li><li>语法：对象.hasOwnProperty(“属性名”)</li></ul><h1 id="_6-tostring方法" tabindex="-1">6. toString方法 <a class="header-anchor" href="#_6-tostring方法" aria-hidden="true">#</a></h1><ul><li><p>当我们直接在页面中打印一个对象时，事件上是输出的对象的toString()方法的返回值</p></li><li><p>如果我们希望在输出对象时不输出[object Object]，可以为对象添加一个toString()方法</p></li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">//修改Person原型的toString  </span></span>
<span class="line"><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Person[name=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,age=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+this.</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,gender=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+this.</span><span style="color:#A6ACCD;">gender</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h1 id="垃圾回收-gc" tabindex="-1">垃圾回收（GC） <a class="header-anchor" href="#垃圾回收-gc" aria-hidden="true">#</a></h1><ul><li>就像人生活的时间长了会产生垃圾一样，程序运行过程中也会产生垃圾</li><li>这些垃圾积攒过多以后，会导致程序运行的速度过慢，</li><li>所以我们需要一个垃圾回收的机制，来处理程序运行过程中产生垃圾</li><li>当一个对象没有任何的变量或属性对它进行引用，此时我们将永远无法操作该对象，</li><li>此时这种对象就是一个垃圾，这种对象过多会占用大量的内存空间，导致程序运行变慢，</li><li>所以这种垃圾必须进行清理。</li><li>在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，</li><li>我们不需要也不能进行垃圾回收的操作</li><li>我们需要做的只是要将不再使用的对象设置null即可</li></ul><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-hidden="true">#</a></h2>`,68);function u(C,A,b,m,_,g){const l=i,n=p,e=o;return r(),c("div",null,[h,s(l,{readTime:"8",words:"2.8k"}),D,s(n),s(e)])}const j=t(F,[["render",u]]);export{w as __pageData,j as default};
