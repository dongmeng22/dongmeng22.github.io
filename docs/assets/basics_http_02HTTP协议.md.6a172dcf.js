import{_ as l,a as p}from"./chunks/Contributors.vue_vue_type_script_setup_true_lang.2d10c1d4.js";import{_ as o}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.63457685.js";import{_ as r,o as d,c as g,D as a,z as m,x as e,a as n,Q as h,B as b}from"./chunks/framework.c7127555.js";import"./chunks/commonjsHelpers.725317a4.js";const G=JSON.parse('{"title":"1. HTTP协议用于客户端和服务器端之间的通信","description":"","frontmatter":{},"headers":[{"level":2,"title":"2.1 示例","slug":"_2-1-示例","link":"#_2-1-示例","children":[]},{"level":2,"title":"2.2 请求报文","slug":"_2-2-请求报文","link":"#_2-2-请求报文","children":[]},{"level":2,"title":"2.3 响应报文","slug":"_2-3-响应报文","link":"#_2-3-响应报文","children":[]},{"level":2,"title":"5.1 GET 获取资源","slug":"_5-1-get-获取资源","link":"#_5-1-get-获取资源","children":[]},{"level":2,"title":"5.2 POST 传输实体主体","slug":"_5-2-post-传输实体主体","link":"#_5-2-post-传输实体主体","children":[]},{"level":2,"title":"5.3 PUT 传输文件","slug":"_5-3-put-传输文件","link":"#_5-3-put-传输文件","children":[]},{"level":2,"title":"5.4 HEAD 获得报文首部","slug":"_5-4-head-获得报文首部","link":"#_5-4-head-获得报文首部","children":[]},{"level":2,"title":"5.5 DELETE 删除文件","slug":"_5-5-delete-删除文件","link":"#_5-5-delete-删除文件","children":[]},{"level":2,"title":"5.6 OPTIONS 询问支持的方法","slug":"_5-6-options-询问支持的方法","link":"#_5-6-options-询问支持的方法","children":[]},{"level":2,"title":"5.7 TRACE 追踪路径","slug":"_5-7-trace-追踪路径","link":"#_5-7-trace-追踪路径","children":[]},{"level":2,"title":"5.8 CONNECT 要求用隧道协议连接代理","slug":"_5-8-connect-要求用隧道协议连接代理","link":"#_5-8-connect-要求用隧道协议连接代理","children":[]},{"level":2,"title":"7.1 持久连接","slug":"_7-1-持久连接","link":"#_7-1-持久连接","children":[]},{"level":2,"title":"7.2 管线化","slug":"_7-2-管线化","link":"#_7-2-管线化","children":[]},{"level":2,"title":"Contributors","slug":"contributors","link":"#contributors","children":[]}],"relativePath":"basics/http/02HTTP协议.md","lastUpdated":1678883566000}'),_={name:"basics/http/02HTTP协议.md"},u=e("p",null,"@[toc]",-1),f=e("p",null,[e("img",{src:"https://img-blog.csdnimg.cn/20210114221012616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk3MjAwOA==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"})],-1),T=e("h1",{id:"_1-http协议用于客户端和服务器端之间的通信",tabindex:"-1"},[n("1. HTTP协议用于客户端和服务器端之间的通信 "),e("a",{class:"header-anchor",href:"#_1-http协议用于客户端和服务器端之间的通信","aria-hidden":"true"},"#")],-1),k=e("p",null,[e("img",{src:"https://img-blog.csdnimg.cn/img_convert/13b9eef8cc29597b908740adf89229a3.png",alt:"image"})],-1),C=e("ul",null,[e("li",null,"应用HTTP协议时，必定是一端担任客户端角色，另一端担任服务器端角色")],-1),v=e("h1",{id:"_2-过请求和响应的交换达成通信",tabindex:"-1"},[n("2. 过请求和响应的交换达成通信 "),e("a",{class:"header-anchor",href:"#_2-过请求和响应的交换达成通信","aria-hidden":"true"},"#")],-1),A=e("p",null,[e("img",{src:"https://img-blog.csdnimg.cn/img_convert/ac830e477be7d43a8b41be2a370ec456.png",alt:"image"})],-1),P=h(`<h2 id="_2-1-示例" tabindex="-1">2.1 示例 <a class="header-anchor" href="#_2-1-示例" aria-hidden="true">#</a></h2><p><img src="https://img-blog.csdnimg.cn/img_convert/aaf2e3026f70d3026fcd258a055dcdbe.png" alt="image"></p><h2 id="_2-2-请求报文" tabindex="-1">2.2 请求报文 <a class="header-anchor" href="#_2-2-请求报文" aria-hidden="true">#</a></h2><blockquote><p>请求报文是由请求方法、请求URI、协议版本、可选的请求首部字段和内容实体构成的</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/51f7d13a2938655e5141f8a4662e2c42.png" alt="image"></p><h2 id="_2-3-响应报文" tabindex="-1">2.3 响应报文 <a class="header-anchor" href="#_2-3-响应报文" aria-hidden="true">#</a></h2><blockquote><p>响应报文基本上由协议版本、状态码（表示请求成功或失败的数字代码）、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/6b0165e318683180a55fc72a32ca3b5b.png" alt="image"></p><h1 id="_3-http是不保存状态的协议" tabindex="-1">3. HTTP是不保存状态的协议 <a class="header-anchor" href="#_3-http是不保存状态的协议" aria-hidden="true">#</a></h1><blockquote><p>HTTP是一种不保存状态，即无状态（stateless）协议</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/9998ac0781ec7aa75f4d2f51eb3d213a.png" alt="image"></p><ul><li><p>使用HTTP协议，每当有新的请求发送时，就会有对应的新响应产生。</p></li><li><p>协议本身并不保留之前一切的请求或响应报文的信息。</p></li><li><p>这是为了更快地处理大量事务，确保协议的可伸缩性，而特意把HTTP协议设计成如此简单的。</p></li><li><p>HTTP/1.1虽然是无状态协议，但为了实现期望的保持状态功能，于是引入了Cookie技术。</p></li><li><p>有了Cookie再用HTTP协议通信，就可以管理状态了</p></li></ul><h1 id="_4-请求uri定位资源" tabindex="-1">4. 请求URI定位资源 <a class="header-anchor" href="#_4-请求uri定位资源" aria-hidden="true">#</a></h1><blockquote><p>HTTP协议使用URI定位互联网上的资源</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/96a2bd1404c8fa9779c548f181e8a2ff.png" alt="image"></p><blockquote><p>因为URI的特定功能，在互联网上任意位置的资源都能访问到</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/b82e5ed5c2a5447f5c9439390330eb0f.png" alt="image"></p><ul><li>如果不是访问特定资源而是对服务器本身发起请求，可以用一个*来代替请求URI</li><li>查询HTTP服务器端支持的HTTP方法种类</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">OPTIONS * HTTP/1.1</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h1 id="_5-告知服务器意图的http方法" tabindex="-1">5. 告知服务器意图的HTTP方法 <a class="header-anchor" href="#_5-告知服务器意图的http方法" aria-hidden="true">#</a></h1><h2 id="_5-1-get-获取资源" tabindex="-1">5.1 GET 获取资源 <a class="header-anchor" href="#_5-1-get-获取资源" aria-hidden="true">#</a></h2><p><img src="https://img-blog.csdnimg.cn/img_convert/a03fe2e1a72dcadf8e757df1e7c5f411.png" alt="image"></p><blockquote><p>GET方法用来请求访问已被URI识别的资源。指定的资源经服务器端解析后返回响应内容</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/0c20a206e1e27576694122ea0001dc87.png" alt="image"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/0f7a02e3016e36d6c98d29c4f73ec0a0.png" alt="image"></p><h2 id="_5-2-post-传输实体主体" tabindex="-1">5.2 POST 传输实体主体 <a class="header-anchor" href="#_5-2-post-传输实体主体" aria-hidden="true">#</a></h2><p><img src="https://img-blog.csdnimg.cn/img_convert/4119304fd15a992118708ad82093424c.png" alt="image"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/3eca24482d6a5843d7e1659e6173c47d.png" alt="image"></p><h2 id="_5-3-put-传输文件" tabindex="-1">5.3 PUT 传输文件 <a class="header-anchor" href="#_5-3-put-传输文件" aria-hidden="true">#</a></h2><p><img src="https://img-blog.csdnimg.cn/img_convert/2f7aa2166249ece0836558bdcadf228e.png" alt="image"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/87fa57a51259819a98405a3fe929cabb.png" alt="image"></p><h2 id="_5-4-head-获得报文首部" tabindex="-1">5.4 HEAD 获得报文首部 <a class="header-anchor" href="#_5-4-head-获得报文首部" aria-hidden="true">#</a></h2><p><img src="https://img-blog.csdnimg.cn/img_convert/cc2ec5f4b1f5234f914c8e317e20bfbc.png" alt="image"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/361f4361cc9548e517dd8d4c7e893dbb.png" alt="image"></p><h2 id="_5-5-delete-删除文件" tabindex="-1">5.5 DELETE 删除文件 <a class="header-anchor" href="#_5-5-delete-删除文件" aria-hidden="true">#</a></h2><p><img src="https://img-blog.csdnimg.cn/img_convert/cb671fadee4e16a8034df6cf193fa090.png" alt="image"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/5dd8a0161f19d55bc64bd7a6fa7e60cb.png" alt="image"></p><h2 id="_5-6-options-询问支持的方法" tabindex="-1">5.6 OPTIONS 询问支持的方法 <a class="header-anchor" href="#_5-6-options-询问支持的方法" aria-hidden="true">#</a></h2><p><img src="https://img-blog.csdnimg.cn/img_convert/75e5080d7dc92cdbe06e6141bc53e30d.png" alt="image"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/a76f8b26ea32da361a6435091432783a.png" alt="image"></p><h2 id="_5-7-trace-追踪路径" tabindex="-1">5.7 TRACE 追踪路径 <a class="header-anchor" href="#_5-7-trace-追踪路径" aria-hidden="true">#</a></h2><p><img src="https://img-blog.csdnimg.cn/img_convert/5d9adfbc7d014f2abb174ff921ebd937.png" alt="image"></p><blockquote><p>TRACE方法是让Web服务器端将之前的请求通信环回给客户端的方法</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/d495b7bcf5220db178086846a008e254.png" alt="image"></p><h2 id="_5-8-connect-要求用隧道协议连接代理" tabindex="-1">5.8 CONNECT 要求用隧道协议连接代理 <a class="header-anchor" href="#_5-8-connect-要求用隧道协议连接代理" aria-hidden="true">#</a></h2><p><img src="https://img-blog.csdnimg.cn/img_convert/a10fb40ad27f6aa91baf9688bc851a7a.png" alt="image"></p><blockquote><p>CONNECT方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行TCP通信。主要使用SSL（Secure Sockets Layer，安全套接层）和TLS（TransportLayer Security，传输层安全）协议把通信内容加密后经网络隧道传输</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/ca3c53c1d7597af82c1c714d97274a43.png" alt="image"></p><h1 id="_6-用方法下达命令" tabindex="-1">6. 用方法下达命令 <a class="header-anchor" href="#_6-用方法下达命令" aria-hidden="true">#</a></h1><p><img src="https://img-blog.csdnimg.cn/img_convert/a8719e9eca7100add71db40f525c54e3.png" alt="image"></p><blockquote><p>方法名区分大小写，要用大写字母</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/1cf90569b46e450941756a7c06e7e97a.png" alt="image"></p><h1 id="_7-持久连接节省通信量" tabindex="-1">7. 持久连接节省通信量 <a class="header-anchor" href="#_7-持久连接节省通信量" aria-hidden="true">#</a></h1><blockquote><p>初始版本：每进行一次HTTP通信就要断开一次TCP连接</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/bd1a3b2c1f6e379fc32ac53049e81d0a.png" alt="image"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/4dbe156da26ed58226056b315c13a28a.png" alt="image"></p><h2 id="_7-1-持久连接" tabindex="-1">7.1 持久连接 <a class="header-anchor" href="#_7-1-持久连接" aria-hidden="true">#</a></h2><blockquote><p>HTTP Persistent Connections，也称为HTTP keep-alive或HTTP connectionreuse</p></blockquote><blockquote><p>持久连接的特点是，只要任意一端没有明确提出断开连接，则保持TCP连接状态</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/6399a308a0215859ef2952092db7c309.png" alt="image"></p><h2 id="_7-2-管线化" tabindex="-1">7.2 管线化 <a class="header-anchor" href="#_7-2-管线化" aria-hidden="true">#</a></h2><blockquote><p>持久连接使得多数请求以管线化（pipelining）方式发送成为可能</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/897ecc3c1c3986a45b293addbec9a9c4.png" alt="image"></p><p>当请求一个包含10张图片的HTML Web页面，与挨个连接相比，用持久连接可以让请求更快结束。而管线化技术则比持久连接还要快。请求数越多，时间差就越明显</p><h1 id="_8-使用cookie的状态管理" tabindex="-1">8. 使用Cookie的状态管理 <a class="header-anchor" href="#_8-使用cookie的状态管理" aria-hidden="true">#</a></h1><blockquote><p>HTTP是无状态协议，它不对之前发生过的请求和响应的状态进行管理。也就是说，无法根据之前的状态进行本次的请求处理</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/7695a19176288adc3f11cfe20657bffb.png" alt="image"></p><blockquote><p>Cookie技术通过在请求和响应报文中写入Cookie信息来控制客户端的状态</p></blockquote><ul><li>Cookie会根据从服务器端发送的响应报文内的一个叫做Set-Cookie的首部字段信息，通知客户端保存Cookie</li><li>当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入Cookie值后发送出去</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/aac277900c7968bd06608fafd836c4ea.png" alt="image"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/266d7f1b35695baec2b7f83ba2a33e8f.png" alt="image"></p><p>①请求报文（没有Cookie信息的状态）</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">GET /reader/ HTTP/1.1</span></span>
<span class="line"><span style="color:#A6ACCD;">Host: hackr.jp</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>②响应报文（服务器端生成Cookie信息）</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">HTTP/1.1 200 OK</span></span>
<span class="line"><span style="color:#A6ACCD;">Date: Thu, 12 JUL 2012 07:12:20 GMT</span></span>
<span class="line"><span style="color:#A6ACCD;">server: Apache</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;Set-Cookie: sid=1342077140226724; path=/; expires=Wed, 10-Oct-12 07:12:20 GMT&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">Content-Type: text/plain; charset=UTF-8</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>③请求报文（自动发送保存着的Cookie信息）</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">GET /image/ HTTP/1.1</span></span>
<span class="line"><span style="color:#A6ACCD;">Host: hackr.jp</span></span>
<span class="line"><span style="color:#A6ACCD;">Cookie: sid=1342077140226724</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-hidden="true">#</a></h2>`,78);function x(H,q,y,D,E,S){const i=o,s=b("center"),t=l,c=p;return d(),g("div",null,[u,f,T,a(i,{readTime:"5",words:"1.3k"}),k,C,v,A,a(s,null,{default:m(()=>[n("请求必定由客户端发出，而服务器端回复响应")]),_:1}),P,a(t),a(c)])}const L=r(_,[["render",x]]);export{G as __pageData,L as default};
