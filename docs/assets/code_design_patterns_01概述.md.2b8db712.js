import{_ as a,a as n}from"./chunks/Contributors.vue_vue_type_script_setup_true_lang.3dcd3b9e.js";import{_ as s}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.358bd1c3.js";import{_ as c,o as l,c as p,D as t,x as e,a as d,Q as g}from"./chunks/framework.c7127555.js";import"./chunks/commonjsHelpers.725317a4.js";const $=JSON.parse('{"title":"什么是设计模式","description":"","frontmatter":{},"headers":[{"level":2,"title":"Contributors","slug":"contributors","link":"#contributors","children":[]}],"relativePath":"code/design_patterns/01概述.md","lastUpdated":null}'),_={name:"code/design_patterns/01概述.md"},u=e("blockquote",null,[e("p",null,"今天开始来学习JavaScript常见的设计模式，其实设计模式和算法一样，是脱离语言的一种通用性经验性的思想。前端程序员同样是软件工程师，需要扎实的专业基础，而设计模式也是计算机重要专业基础之一。")],-1),m=e("h1",{id:"什么是设计模式",tabindex:"-1"},[d("什么是设计模式 "),e("a",{class:"header-anchor",href:"#什么是设计模式","aria-hidden":"true"},"#")],-1),h=g('<p>设计模式就是在软件设计过程中，针对特定问题的简洁而优雅的解决方案</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57d0224122444e1ba695f119267401a1~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>在开发业务代码时，面临着各种各样不同的需要，不同的情况会总结出不同的解决方案。我们可以将这些<strong>经验总结</strong>起来，<strong>合理运用</strong>到不同的问题中，从而可以使用通用的方案来<strong>解决问题</strong>。简单点可以将设计模式理解成在编写代码时的一些小套路，小技巧。</p><p>设计模式具有<code>SOLID</code>五大<strong>设计原则</strong></p><ul><li>单一功能原则（<code>S</code>ingle Responsibility Principle）：一个程序只做好一件事</li><li>开放封闭原则（<code>O</code>pened Closed Principle）：对拓展开放，对修改封闭</li><li>里式替换原则（<code>L</code>iskov Substitution Principle）：子类能覆盖父类，并能出现在父类出现的地方</li><li>接口隔离原则（<code>I</code>nterface Segregation Principle）：保持接口的单一独立</li><li>依赖反转原则（<code>D</code>ependency Inversion Principle）：使用方法只关注接口而不关注具体类的实现</li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d2ec9a649c421c871e0be5504aab90~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><blockquote><p>前端开发使用JavaScript，我们应该重点关注前两个原则也就是<strong>单一功能原则</strong>和<strong>开放封闭原则</strong></p></blockquote><h1 id="为什么需要设计模式" tabindex="-1">为什么需要设计模式 <a class="header-anchor" href="#为什么需要设计模式" aria-hidden="true">#</a></h1><blockquote><p>为什么需要设计模式，也就是学习与使用设计模式可以带来哪些好处。</p></blockquote><p>正是因为现在的业务越来越庞大，而且还需要不断的迭代与更新，所以我们在编写代码的时候要考虑代码的可读性、拓展性、复用性和可靠性。</p><ol><li><strong>易读</strong>性：能够提升代码的可读性，提升后续开发效率</li><li><strong>拓展</strong>性：对代码解耦，能很好地增强代码的易修改性和拓展性</li><li><strong>复用</strong>性：可以重用已有的解决方案，无需再重复相同工作</li><li><strong>可靠</strong>性：能够增加系统的健壮性，使代码编写真正工程化</li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9949876d5081445099835f55e9d17f0a~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h1 id="设计模式的分类" tabindex="-1">设计模式的分类 <a class="header-anchor" href="#设计模式的分类" aria-hidden="true">#</a></h1><p>从意图上区分，可以将设计模式分别被划分为<strong>创建型</strong>模式、<strong>结构型</strong>模式和<strong>行为型</strong>模式</p><ul><li>创建型模式的目的就是封装创建对象的变化</li><li>结构型模式封装的是对象之间的组合关系</li><li>行为型模式封装的是对象的行为变化。</li></ul><h1 id="javascript常见设计模式" tabindex="-1">JavaScript常见设计模式 <a class="header-anchor" href="#javascript常见设计模式" aria-hidden="true">#</a></h1><p>我们常常能听到23种设计模式，今天跟着字节跳动的讲师，先来学习JavaScript常见的十种设计模式：</p><ul><li><a href="https://juejin.cn/post/7054932452417994782" target="_blank" rel="noreferrer">单例模式</a></li><li>策略模式</li><li>代理模式</li><li>发布订阅模式</li><li>命令模式</li><li>组合模式</li><li>装饰器模式</li><li>适配器模式</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/be64de95ba22477fb139db0e7a0794ce~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-hidden="true">#</a></h2>',20);function f(b,k,v,S,j,x){const i=s,o=a,r=n;return l(),p("div",null,[u,m,t(i,{readTime:"2",words:"816"}),h,t(o),t(r)])}const I=c(_,[["render",f]]);export{$ as __pageData,I as default};
